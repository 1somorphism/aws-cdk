/* eslint-disable prettier/prettier,max-len */
import * as cdk from "aws-cdk-lib";
import * as constructs from "constructs";
import * as cfn_parse from "aws-cdk-lib/core/lib/helpers-internal";

/**
 * Creates a running app for the specified UserProfile.
 *
 * This operation is automatically invoked by Amazon SageMaker upon access to the associated Domain, and when new kernel configurations are selected by the user. A user may have multiple Apps active simultaneously.
 *
 * @cloudformationResource AWS::SageMaker::App
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-app.html
 */
export class CfnApp extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::App";

  /**
   * Build a CfnApp from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnApp {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnAppPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnApp(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The Amazon Resource Name (ARN) of the app, such as `arn:aws:sagemaker:us-west-2:account-id:app/my-app-name` .
   *
   * @cloudformationAttribute AppArn
   */
  public readonly attrAppArn: string;

  /**
   * The name of the app.
   */
  public appName: string;

  /**
   * The type of app.
   */
  public appType: string;

  /**
   * The domain ID.
   */
  public domainId: string;

  /**
   * Specifies the ARNs of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
   */
  public resourceSpec?: cdk.IResolvable | CfnApp.ResourceSpecProperty;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * An array of key-value pairs to apply to this resource.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * The user profile name.
   */
  public userProfileName: string;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnAppProps) {
    super(scope, id, {
      "type": CfnApp.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "appName", this);
    cdk.requireProperty(props, "appType", this);
    cdk.requireProperty(props, "domainId", this);
    cdk.requireProperty(props, "userProfileName", this);

    this.attrAppArn = cdk.Token.asString(this.getAtt("AppArn", cdk.ResolutionTypeHint.STRING));
    this.appName = props.appName;
    this.appType = props.appType;
    this.domainId = props.domainId;
    this.resourceSpec = props.resourceSpec;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::App", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
    this.userProfileName = props.userProfileName;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "appName": this.appName,
      "appType": this.appType,
      "domainId": this.domainId,
      "resourceSpec": this.resourceSpec,
      "tags": this.tags.renderTags(),
      "userProfileName": this.userProfileName
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnApp.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnAppPropsToCloudFormation(props);
  }
}

export namespace CfnApp {
  /**
   * Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-app-resourcespec.html
   */
  export interface ResourceSpecProperty {
    /**
     * The instance type that the image version runs on.
     *
     * > *JupyterServer apps* only support the `system` value.
     * >
     * > For *KernelGateway apps* , the `system` value is translated to `ml.t3.medium` . KernelGateway apps also support all other values for available instance types.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-app-resourcespec.html#cfn-sagemaker-app-resourcespec-instancetype
     */
    readonly instanceType?: string;

    /**
     * The ARN of the SageMaker image that the image version belongs to.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-app-resourcespec.html#cfn-sagemaker-app-resourcespec-sagemakerimagearn
     */
    readonly sageMakerImageArn?: string;

    /**
     * The ARN of the image version created on the instance.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-app-resourcespec.html#cfn-sagemaker-app-resourcespec-sagemakerimageversionarn
     */
    readonly sageMakerImageVersionArn?: string;
  }
}

/**
 * Properties for defining a `CfnApp`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-app.html
 */
export interface CfnAppProps {
  /**
   * The name of the app.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-app.html#cfn-sagemaker-app-appname
   */
  readonly appName: string;

  /**
   * The type of app.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-app.html#cfn-sagemaker-app-apptype
   */
  readonly appType: string;

  /**
   * The domain ID.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-app.html#cfn-sagemaker-app-domainid
   */
  readonly domainId: string;

  /**
   * Specifies the ARNs of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-app.html#cfn-sagemaker-app-resourcespec
   */
  readonly resourceSpec?: cdk.IResolvable | CfnApp.ResourceSpecProperty;

  /**
   * An array of key-value pairs to apply to this resource.
   *
   * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-app.html#cfn-sagemaker-app-tags
   */
  readonly tags?: Array<cdk.CfnTag>;

  /**
   * The user profile name.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-app.html#cfn-sagemaker-app-userprofilename
   */
  readonly userProfileName: string;
}

/**
 * Determine whether the given properties match those of a `ResourceSpecProperty`
 *
 * @param properties - the TypeScript properties of a `ResourceSpecProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnAppResourceSpecPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
  errors.collect(cdk.propertyValidator("sageMakerImageArn", cdk.validateString)(properties.sageMakerImageArn));
  errors.collect(cdk.propertyValidator("sageMakerImageVersionArn", cdk.validateString)(properties.sageMakerImageVersionArn));
  return errors.wrap("supplied properties not correct for \"ResourceSpecProperty\"");
}

// @ts-ignore TS6133
function convertCfnAppResourceSpecPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnAppResourceSpecPropertyValidator(properties).assertSuccess();
  return {
    "InstanceType": cdk.stringToCloudFormation(properties.instanceType),
    "SageMakerImageArn": cdk.stringToCloudFormation(properties.sageMakerImageArn),
    "SageMakerImageVersionArn": cdk.stringToCloudFormation(properties.sageMakerImageVersionArn)
  };
}

// @ts-ignore TS6133
function CfnAppResourceSpecPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnApp.ResourceSpecProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnApp.ResourceSpecProperty>();
  ret.addPropertyResult("instanceType", "InstanceType", (properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined));
  ret.addPropertyResult("sageMakerImageArn", "SageMakerImageArn", (properties.SageMakerImageArn != null ? cfn_parse.FromCloudFormation.getString(properties.SageMakerImageArn) : undefined));
  ret.addPropertyResult("sageMakerImageVersionArn", "SageMakerImageVersionArn", (properties.SageMakerImageVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.SageMakerImageVersionArn) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnAppProps`
 *
 * @param properties - the TypeScript properties of a `CfnAppProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnAppPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("appName", cdk.requiredValidator)(properties.appName));
  errors.collect(cdk.propertyValidator("appName", cdk.validateString)(properties.appName));
  errors.collect(cdk.propertyValidator("appType", cdk.requiredValidator)(properties.appType));
  errors.collect(cdk.propertyValidator("appType", cdk.validateString)(properties.appType));
  errors.collect(cdk.propertyValidator("domainId", cdk.requiredValidator)(properties.domainId));
  errors.collect(cdk.propertyValidator("domainId", cdk.validateString)(properties.domainId));
  errors.collect(cdk.propertyValidator("resourceSpec", CfnAppResourceSpecPropertyValidator)(properties.resourceSpec));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  errors.collect(cdk.propertyValidator("userProfileName", cdk.requiredValidator)(properties.userProfileName));
  errors.collect(cdk.propertyValidator("userProfileName", cdk.validateString)(properties.userProfileName));
  return errors.wrap("supplied properties not correct for \"CfnAppProps\"");
}

// @ts-ignore TS6133
function convertCfnAppPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnAppPropsValidator(properties).assertSuccess();
  return {
    "AppName": cdk.stringToCloudFormation(properties.appName),
    "AppType": cdk.stringToCloudFormation(properties.appType),
    "DomainId": cdk.stringToCloudFormation(properties.domainId),
    "ResourceSpec": convertCfnAppResourceSpecPropertyToCloudFormation(properties.resourceSpec),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
    "UserProfileName": cdk.stringToCloudFormation(properties.userProfileName)
  };
}

// @ts-ignore TS6133
function CfnAppPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAppProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAppProps>();
  ret.addPropertyResult("appName", "AppName", (properties.AppName != null ? cfn_parse.FromCloudFormation.getString(properties.AppName) : undefined));
  ret.addPropertyResult("appType", "AppType", (properties.AppType != null ? cfn_parse.FromCloudFormation.getString(properties.AppType) : undefined));
  ret.addPropertyResult("domainId", "DomainId", (properties.DomainId != null ? cfn_parse.FromCloudFormation.getString(properties.DomainId) : undefined));
  ret.addPropertyResult("resourceSpec", "ResourceSpec", (properties.ResourceSpec != null ? CfnAppResourceSpecPropertyFromCloudFormation(properties.ResourceSpec) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addPropertyResult("userProfileName", "UserProfileName", (properties.UserProfileName != null ? cfn_parse.FromCloudFormation.getString(properties.UserProfileName) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Creates a configuration for running a SageMaker image as a KernelGateway app.
 *
 * The configuration specifies the Amazon Elastic File System (EFS) storage volume on the image, and a list of the kernels in the image.
 *
 * @cloudformationResource AWS::SageMaker::AppImageConfig
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-appimageconfig.html
 */
export class CfnAppImageConfig extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::AppImageConfig";

  /**
   * Build a CfnAppImageConfig from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnAppImageConfig {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnAppImageConfigPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnAppImageConfig(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The Amazon Resource Name (ARN) of the AppImageConfig, such as `arn:aws:sagemaker:us-west-2:account-id:app-image-config/my-app-image-config-name` .
   *
   * @cloudformationAttribute AppImageConfigArn
   */
  public readonly attrAppImageConfigArn: string;

  /**
   * The name of the AppImageConfig.
   */
  public appImageConfigName: string;

  /**
   * The configuration for the file system and kernels in the SageMaker image.
   */
  public kernelGatewayImageConfig?: cdk.IResolvable | CfnAppImageConfig.KernelGatewayImageConfigProperty;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * An array of key-value pairs to apply to this resource.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnAppImageConfigProps) {
    super(scope, id, {
      "type": CfnAppImageConfig.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "appImageConfigName", this);

    this.attrAppImageConfigArn = cdk.Token.asString(this.getAtt("AppImageConfigArn", cdk.ResolutionTypeHint.STRING));
    this.appImageConfigName = props.appImageConfigName;
    this.kernelGatewayImageConfig = props.kernelGatewayImageConfig;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::AppImageConfig", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "appImageConfigName": this.appImageConfigName,
      "kernelGatewayImageConfig": this.kernelGatewayImageConfig,
      "tags": this.tags.renderTags()
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnAppImageConfig.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnAppImageConfigPropsToCloudFormation(props);
  }
}

export namespace CfnAppImageConfig {
  /**
   * The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-appimageconfig-kernelgatewayimageconfig.html
   */
  export interface KernelGatewayImageConfigProperty {
    /**
     * The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-appimageconfig-kernelgatewayimageconfig.html#cfn-sagemaker-appimageconfig-kernelgatewayimageconfig-filesystemconfig
     */
    readonly fileSystemConfig?: CfnAppImageConfig.FileSystemConfigProperty | cdk.IResolvable;

    /**
     * The specification of the Jupyter kernels in the image.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-appimageconfig-kernelgatewayimageconfig.html#cfn-sagemaker-appimageconfig-kernelgatewayimageconfig-kernelspecs
     */
    readonly kernelSpecs: Array<cdk.IResolvable | CfnAppImageConfig.KernelSpecProperty> | cdk.IResolvable;
  }

  /**
   * The specification of a Jupyter kernel.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-appimageconfig-kernelspec.html
   */
  export interface KernelSpecProperty {
    /**
     * The display name of the kernel.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-appimageconfig-kernelspec.html#cfn-sagemaker-appimageconfig-kernelspec-displayname
     */
    readonly displayName?: string;

    /**
     * The name of the Jupyter kernel in the image.
     *
     * This value is case sensitive.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-appimageconfig-kernelspec.html#cfn-sagemaker-appimageconfig-kernelspec-name
     */
    readonly name: string;
  }

  /**
   * The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-appimageconfig-filesystemconfig.html
   */
  export interface FileSystemConfigProperty {
    /**
     * The default POSIX group ID (GID).
     *
     * If not specified, defaults to `100` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-appimageconfig-filesystemconfig.html#cfn-sagemaker-appimageconfig-filesystemconfig-defaultgid
     */
    readonly defaultGid?: number;

    /**
     * The default POSIX user ID (UID).
     *
     * If not specified, defaults to `1000` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-appimageconfig-filesystemconfig.html#cfn-sagemaker-appimageconfig-filesystemconfig-defaultuid
     */
    readonly defaultUid?: number;

    /**
     * The path within the image to mount the user's EFS home directory.
     *
     * The directory should be empty. If not specified, defaults to * /home/sagemaker-user* .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-appimageconfig-filesystemconfig.html#cfn-sagemaker-appimageconfig-filesystemconfig-mountpath
     */
    readonly mountPath?: string;
  }
}

/**
 * Properties for defining a `CfnAppImageConfig`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-appimageconfig.html
 */
export interface CfnAppImageConfigProps {
  /**
   * The name of the AppImageConfig.
   *
   * Must be unique to your account.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-appimageconfig.html#cfn-sagemaker-appimageconfig-appimageconfigname
   */
  readonly appImageConfigName: string;

  /**
   * The configuration for the file system and kernels in the SageMaker image.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-appimageconfig.html#cfn-sagemaker-appimageconfig-kernelgatewayimageconfig
   */
  readonly kernelGatewayImageConfig?: cdk.IResolvable | CfnAppImageConfig.KernelGatewayImageConfigProperty;

  /**
   * An array of key-value pairs to apply to this resource.
   *
   * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-appimageconfig.html#cfn-sagemaker-appimageconfig-tags
   */
  readonly tags?: Array<cdk.CfnTag>;
}

/**
 * Determine whether the given properties match those of a `KernelSpecProperty`
 *
 * @param properties - the TypeScript properties of a `KernelSpecProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnAppImageConfigKernelSpecPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("displayName", cdk.validateString)(properties.displayName));
  errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
  errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
  return errors.wrap("supplied properties not correct for \"KernelSpecProperty\"");
}

// @ts-ignore TS6133
function convertCfnAppImageConfigKernelSpecPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnAppImageConfigKernelSpecPropertyValidator(properties).assertSuccess();
  return {
    "DisplayName": cdk.stringToCloudFormation(properties.displayName),
    "Name": cdk.stringToCloudFormation(properties.name)
  };
}

// @ts-ignore TS6133
function CfnAppImageConfigKernelSpecPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnAppImageConfig.KernelSpecProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAppImageConfig.KernelSpecProperty>();
  ret.addPropertyResult("displayName", "DisplayName", (properties.DisplayName != null ? cfn_parse.FromCloudFormation.getString(properties.DisplayName) : undefined));
  ret.addPropertyResult("name", "Name", (properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `FileSystemConfigProperty`
 *
 * @param properties - the TypeScript properties of a `FileSystemConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnAppImageConfigFileSystemConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("defaultGid", cdk.validateNumber)(properties.defaultGid));
  errors.collect(cdk.propertyValidator("defaultUid", cdk.validateNumber)(properties.defaultUid));
  errors.collect(cdk.propertyValidator("mountPath", cdk.validateString)(properties.mountPath));
  return errors.wrap("supplied properties not correct for \"FileSystemConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnAppImageConfigFileSystemConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnAppImageConfigFileSystemConfigPropertyValidator(properties).assertSuccess();
  return {
    "DefaultGid": cdk.numberToCloudFormation(properties.defaultGid),
    "DefaultUid": cdk.numberToCloudFormation(properties.defaultUid),
    "MountPath": cdk.stringToCloudFormation(properties.mountPath)
  };
}

// @ts-ignore TS6133
function CfnAppImageConfigFileSystemConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAppImageConfig.FileSystemConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAppImageConfig.FileSystemConfigProperty>();
  ret.addPropertyResult("defaultGid", "DefaultGid", (properties.DefaultGid != null ? cfn_parse.FromCloudFormation.getNumber(properties.DefaultGid) : undefined));
  ret.addPropertyResult("defaultUid", "DefaultUid", (properties.DefaultUid != null ? cfn_parse.FromCloudFormation.getNumber(properties.DefaultUid) : undefined));
  ret.addPropertyResult("mountPath", "MountPath", (properties.MountPath != null ? cfn_parse.FromCloudFormation.getString(properties.MountPath) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `KernelGatewayImageConfigProperty`
 *
 * @param properties - the TypeScript properties of a `KernelGatewayImageConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnAppImageConfigKernelGatewayImageConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("fileSystemConfig", CfnAppImageConfigFileSystemConfigPropertyValidator)(properties.fileSystemConfig));
  errors.collect(cdk.propertyValidator("kernelSpecs", cdk.requiredValidator)(properties.kernelSpecs));
  errors.collect(cdk.propertyValidator("kernelSpecs", cdk.listValidator(CfnAppImageConfigKernelSpecPropertyValidator))(properties.kernelSpecs));
  return errors.wrap("supplied properties not correct for \"KernelGatewayImageConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnAppImageConfigKernelGatewayImageConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnAppImageConfigKernelGatewayImageConfigPropertyValidator(properties).assertSuccess();
  return {
    "FileSystemConfig": convertCfnAppImageConfigFileSystemConfigPropertyToCloudFormation(properties.fileSystemConfig),
    "KernelSpecs": cdk.listMapper(convertCfnAppImageConfigKernelSpecPropertyToCloudFormation)(properties.kernelSpecs)
  };
}

// @ts-ignore TS6133
function CfnAppImageConfigKernelGatewayImageConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnAppImageConfig.KernelGatewayImageConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAppImageConfig.KernelGatewayImageConfigProperty>();
  ret.addPropertyResult("fileSystemConfig", "FileSystemConfig", (properties.FileSystemConfig != null ? CfnAppImageConfigFileSystemConfigPropertyFromCloudFormation(properties.FileSystemConfig) : undefined));
  ret.addPropertyResult("kernelSpecs", "KernelSpecs", (properties.KernelSpecs != null ? cfn_parse.FromCloudFormation.getArray(CfnAppImageConfigKernelSpecPropertyFromCloudFormation)(properties.KernelSpecs) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnAppImageConfigProps`
 *
 * @param properties - the TypeScript properties of a `CfnAppImageConfigProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnAppImageConfigPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("appImageConfigName", cdk.requiredValidator)(properties.appImageConfigName));
  errors.collect(cdk.propertyValidator("appImageConfigName", cdk.validateString)(properties.appImageConfigName));
  errors.collect(cdk.propertyValidator("kernelGatewayImageConfig", CfnAppImageConfigKernelGatewayImageConfigPropertyValidator)(properties.kernelGatewayImageConfig));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  return errors.wrap("supplied properties not correct for \"CfnAppImageConfigProps\"");
}

// @ts-ignore TS6133
function convertCfnAppImageConfigPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnAppImageConfigPropsValidator(properties).assertSuccess();
  return {
    "AppImageConfigName": cdk.stringToCloudFormation(properties.appImageConfigName),
    "KernelGatewayImageConfig": convertCfnAppImageConfigKernelGatewayImageConfigPropertyToCloudFormation(properties.kernelGatewayImageConfig),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
  };
}

// @ts-ignore TS6133
function CfnAppImageConfigPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnAppImageConfigProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnAppImageConfigProps>();
  ret.addPropertyResult("appImageConfigName", "AppImageConfigName", (properties.AppImageConfigName != null ? cfn_parse.FromCloudFormation.getString(properties.AppImageConfigName) : undefined));
  ret.addPropertyResult("kernelGatewayImageConfig", "KernelGatewayImageConfig", (properties.KernelGatewayImageConfig != null ? CfnAppImageConfigKernelGatewayImageConfigPropertyFromCloudFormation(properties.KernelGatewayImageConfig) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Creates a Git repository as a resource in your SageMaker account.
 *
 * You can associate the repository with notebook instances so that you can use Git source control for the notebooks you create. The Git repository is a resource in your SageMaker account, so it can be associated with more than one notebook instance, and it persists independently from the lifecycle of any notebook instances it is associated with.
 *
 * The repository can be hosted either in [AWS CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository.
 *
 * @cloudformationResource AWS::SageMaker::CodeRepository
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-coderepository.html
 */
export class CfnCodeRepository extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::CodeRepository";

  /**
   * Build a CfnCodeRepository from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnCodeRepository {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnCodeRepositoryPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnCodeRepository(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The name of the code repository, such as `myCodeRepo` .
   *
   * @cloudformationAttribute CodeRepositoryName
   */
  public readonly attrCodeRepositoryName: string;

  /**
   * @cloudformationAttribute Id
   */
  public readonly attrId: string;

  /**
   * The name of the Git repository.
   */
  public codeRepositoryName?: string;

  /**
   * Configuration details for the Git repository, including the URL where it is located and the ARN of the AWS Secrets Manager secret that contains the credentials used to access the repository.
   */
  public gitConfig: CfnCodeRepository.GitConfigProperty | cdk.IResolvable;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * List of tags for Code Repository.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnCodeRepositoryProps) {
    super(scope, id, {
      "type": CfnCodeRepository.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "gitConfig", this);

    this.attrCodeRepositoryName = cdk.Token.asString(this.getAtt("CodeRepositoryName", cdk.ResolutionTypeHint.STRING));
    this.attrId = cdk.Token.asString(this.getAtt("Id", cdk.ResolutionTypeHint.STRING));
    this.codeRepositoryName = props.codeRepositoryName;
    this.gitConfig = props.gitConfig;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::CodeRepository", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "codeRepositoryName": this.codeRepositoryName,
      "gitConfig": this.gitConfig,
      "tags": this.tags.renderTags()
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnCodeRepository.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnCodeRepositoryPropsToCloudFormation(props);
  }
}

export namespace CfnCodeRepository {
  /**
   * Specifies configuration details for a Git repository in your AWS account.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-coderepository-gitconfig.html
   */
  export interface GitConfigProperty {
    /**
     * The default branch for the Git repository.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-coderepository-gitconfig.html#cfn-sagemaker-coderepository-gitconfig-branch
     */
    readonly branch?: string;

    /**
     * The URL where the Git repository is located.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-coderepository-gitconfig.html#cfn-sagemaker-coderepository-gitconfig-repositoryurl
     */
    readonly repositoryUrl: string;

    /**
     * The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the credentials used to access the git repository.
     *
     * The secret must have a staging label of `AWSCURRENT` and must be in the following format:
     *
     * `{"username": *UserName* , "password": *Password* }`
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-coderepository-gitconfig.html#cfn-sagemaker-coderepository-gitconfig-secretarn
     */
    readonly secretArn?: string;
  }
}

/**
 * Properties for defining a `CfnCodeRepository`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-coderepository.html
 */
export interface CfnCodeRepositoryProps {
  /**
   * The name of the Git repository.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-coderepository.html#cfn-sagemaker-coderepository-coderepositoryname
   */
  readonly codeRepositoryName?: string;

  /**
   * Configuration details for the Git repository, including the URL where it is located and the ARN of the AWS Secrets Manager secret that contains the credentials used to access the repository.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-coderepository.html#cfn-sagemaker-coderepository-gitconfig
   */
  readonly gitConfig: CfnCodeRepository.GitConfigProperty | cdk.IResolvable;

  /**
   * List of tags for Code Repository.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-coderepository.html#cfn-sagemaker-coderepository-tags
   */
  readonly tags?: Array<cdk.CfnTag>;
}

/**
 * Determine whether the given properties match those of a `GitConfigProperty`
 *
 * @param properties - the TypeScript properties of a `GitConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnCodeRepositoryGitConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("branch", cdk.validateString)(properties.branch));
  errors.collect(cdk.propertyValidator("repositoryUrl", cdk.requiredValidator)(properties.repositoryUrl));
  errors.collect(cdk.propertyValidator("repositoryUrl", cdk.validateString)(properties.repositoryUrl));
  errors.collect(cdk.propertyValidator("secretArn", cdk.validateString)(properties.secretArn));
  return errors.wrap("supplied properties not correct for \"GitConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnCodeRepositoryGitConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnCodeRepositoryGitConfigPropertyValidator(properties).assertSuccess();
  return {
    "Branch": cdk.stringToCloudFormation(properties.branch),
    "RepositoryUrl": cdk.stringToCloudFormation(properties.repositoryUrl),
    "SecretArn": cdk.stringToCloudFormation(properties.secretArn)
  };
}

// @ts-ignore TS6133
function CfnCodeRepositoryGitConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCodeRepository.GitConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCodeRepository.GitConfigProperty>();
  ret.addPropertyResult("branch", "Branch", (properties.Branch != null ? cfn_parse.FromCloudFormation.getString(properties.Branch) : undefined));
  ret.addPropertyResult("repositoryUrl", "RepositoryUrl", (properties.RepositoryUrl != null ? cfn_parse.FromCloudFormation.getString(properties.RepositoryUrl) : undefined));
  ret.addPropertyResult("secretArn", "SecretArn", (properties.SecretArn != null ? cfn_parse.FromCloudFormation.getString(properties.SecretArn) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnCodeRepositoryProps`
 *
 * @param properties - the TypeScript properties of a `CfnCodeRepositoryProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnCodeRepositoryPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("codeRepositoryName", cdk.validateString)(properties.codeRepositoryName));
  errors.collect(cdk.propertyValidator("gitConfig", cdk.requiredValidator)(properties.gitConfig));
  errors.collect(cdk.propertyValidator("gitConfig", CfnCodeRepositoryGitConfigPropertyValidator)(properties.gitConfig));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  return errors.wrap("supplied properties not correct for \"CfnCodeRepositoryProps\"");
}

// @ts-ignore TS6133
function convertCfnCodeRepositoryPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnCodeRepositoryPropsValidator(properties).assertSuccess();
  return {
    "CodeRepositoryName": cdk.stringToCloudFormation(properties.codeRepositoryName),
    "GitConfig": convertCfnCodeRepositoryGitConfigPropertyToCloudFormation(properties.gitConfig),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
  };
}

// @ts-ignore TS6133
function CfnCodeRepositoryPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnCodeRepositoryProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnCodeRepositoryProps>();
  ret.addPropertyResult("codeRepositoryName", "CodeRepositoryName", (properties.CodeRepositoryName != null ? cfn_parse.FromCloudFormation.getString(properties.CodeRepositoryName) : undefined));
  ret.addPropertyResult("gitConfig", "GitConfig", (properties.GitConfig != null ? CfnCodeRepositoryGitConfigPropertyFromCloudFormation(properties.GitConfig) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Creates a definition for a job that monitors data quality and drift.
 *
 * For information about model monitor, see [Amazon SageMaker Model Monitor](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html) .
 *
 * @cloudformationResource AWS::SageMaker::DataQualityJobDefinition
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-dataqualityjobdefinition.html
 */
export class CfnDataQualityJobDefinition extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::DataQualityJobDefinition";

  /**
   * Build a CfnDataQualityJobDefinition from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDataQualityJobDefinition {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnDataQualityJobDefinitionPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnDataQualityJobDefinition(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The time when the job definition was created.
   *
   * @cloudformationAttribute CreationTime
   */
  public readonly attrCreationTime: string;

  /**
   * The Amazon Resource Name (ARN) of the job definition.
   *
   * @cloudformationAttribute JobDefinitionArn
   */
  public readonly attrJobDefinitionArn: string;

  /**
   * Specifies the container that runs the monitoring job.
   */
  public dataQualityAppSpecification: CfnDataQualityJobDefinition.DataQualityAppSpecificationProperty | cdk.IResolvable;

  /**
   * Configures the constraints and baselines for the monitoring job.
   */
  public dataQualityBaselineConfig?: CfnDataQualityJobDefinition.DataQualityBaselineConfigProperty | cdk.IResolvable;

  /**
   * A list of inputs for the monitoring job.
   */
  public dataQualityJobInput: CfnDataQualityJobDefinition.DataQualityJobInputProperty | cdk.IResolvable;

  /**
   * The output configuration for monitoring jobs.
   */
  public dataQualityJobOutputConfig: cdk.IResolvable | CfnDataQualityJobDefinition.MonitoringOutputConfigProperty;

  /**
   * The name of the endpoint used to run the monitoring job.
   */
  public endpointName?: string;

  /**
   * The name for the monitoring job definition.
   */
  public jobDefinitionName?: string;

  /**
   * Identifies the resources to deploy for a monitoring job.
   */
  public jobResources: cdk.IResolvable | CfnDataQualityJobDefinition.MonitoringResourcesProperty;

  /**
   * Specifies networking configuration for the monitoring job.
   */
  public networkConfig?: cdk.IResolvable | CfnDataQualityJobDefinition.NetworkConfigProperty;

  /**
   * The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
   */
  public roleArn: string;

  /**
   * A time limit for how long the monitoring job is allowed to run before stopping.
   */
  public stoppingCondition?: cdk.IResolvable | CfnDataQualityJobDefinition.StoppingConditionProperty;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * An array of key-value pairs to apply to this resource.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnDataQualityJobDefinitionProps) {
    super(scope, id, {
      "type": CfnDataQualityJobDefinition.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "dataQualityAppSpecification", this);
    cdk.requireProperty(props, "dataQualityJobInput", this);
    cdk.requireProperty(props, "dataQualityJobOutputConfig", this);
    cdk.requireProperty(props, "jobResources", this);
    cdk.requireProperty(props, "roleArn", this);

    this.attrCreationTime = cdk.Token.asString(this.getAtt("CreationTime", cdk.ResolutionTypeHint.STRING));
    this.attrJobDefinitionArn = cdk.Token.asString(this.getAtt("JobDefinitionArn", cdk.ResolutionTypeHint.STRING));
    this.dataQualityAppSpecification = props.dataQualityAppSpecification;
    this.dataQualityBaselineConfig = props.dataQualityBaselineConfig;
    this.dataQualityJobInput = props.dataQualityJobInput;
    this.dataQualityJobOutputConfig = props.dataQualityJobOutputConfig;
    this.endpointName = props.endpointName;
    this.jobDefinitionName = props.jobDefinitionName;
    this.jobResources = props.jobResources;
    this.networkConfig = props.networkConfig;
    this.roleArn = props.roleArn;
    this.stoppingCondition = props.stoppingCondition;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::DataQualityJobDefinition", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "dataQualityAppSpecification": this.dataQualityAppSpecification,
      "dataQualityBaselineConfig": this.dataQualityBaselineConfig,
      "dataQualityJobInput": this.dataQualityJobInput,
      "dataQualityJobOutputConfig": this.dataQualityJobOutputConfig,
      "endpointName": this.endpointName,
      "jobDefinitionName": this.jobDefinitionName,
      "jobResources": this.jobResources,
      "networkConfig": this.networkConfig,
      "roleArn": this.roleArn,
      "stoppingCondition": this.stoppingCondition,
      "tags": this.tags.renderTags()
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnDataQualityJobDefinition.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnDataQualityJobDefinitionPropsToCloudFormation(props);
  }
}

export namespace CfnDataQualityJobDefinition {
  /**
   * The input for the data quality monitoring job.
   *
   * Currently endpoints are supported for input.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-dataqualityjobinput.html
   */
  export interface DataQualityJobInputProperty {
    /**
     * Input object for the batch transform job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-dataqualityjobinput.html#cfn-sagemaker-dataqualityjobdefinition-dataqualityjobinput-batchtransforminput
     */
    readonly batchTransformInput?: CfnDataQualityJobDefinition.BatchTransformInputProperty | cdk.IResolvable;

    /**
     * Input object for the endpoint.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-dataqualityjobinput.html#cfn-sagemaker-dataqualityjobdefinition-dataqualityjobinput-endpointinput
     */
    readonly endpointInput?: CfnDataQualityJobDefinition.EndpointInputProperty | cdk.IResolvable;
  }

  /**
   * Input object for the batch transform job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-batchtransforminput.html
   */
  export interface BatchTransformInputProperty {
    /**
     * The Amazon S3 location being used to capture the data.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-batchtransforminput.html#cfn-sagemaker-dataqualityjobdefinition-batchtransforminput-datacaptureddestinations3uri
     */
    readonly dataCapturedDestinationS3Uri: string;

    /**
     * The dataset format for your batch transform job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-batchtransforminput.html#cfn-sagemaker-dataqualityjobdefinition-batchtransforminput-datasetformat
     */
    readonly datasetFormat: CfnDataQualityJobDefinition.DatasetFormatProperty | cdk.IResolvable;

    /**
     * The attributes of the input data to exclude from the analysis.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-batchtransforminput.html#cfn-sagemaker-dataqualityjobdefinition-batchtransforminput-excludefeaturesattribute
     */
    readonly excludeFeaturesAttribute?: string;

    /**
     * Path to the filesystem where the batch transform data is available to the container.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-batchtransforminput.html#cfn-sagemaker-dataqualityjobdefinition-batchtransforminput-localpath
     */
    readonly localPath: string;

    /**
     * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key.
     *
     * Defaults to `FullyReplicated`
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-batchtransforminput.html#cfn-sagemaker-dataqualityjobdefinition-batchtransforminput-s3datadistributiontype
     */
    readonly s3DataDistributionType?: string;

    /**
     * Whether the `Pipe` or `File` is used as the input mode for transferring data for the monitoring job.
     *
     * `Pipe` mode is recommended for large datasets. `File` mode is useful for small files that fit in memory. Defaults to `File` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-batchtransforminput.html#cfn-sagemaker-dataqualityjobdefinition-batchtransforminput-s3inputmode
     */
    readonly s3InputMode?: string;
  }

  /**
   * The dataset format of the data to monitor.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-datasetformat.html
   */
  export interface DatasetFormatProperty {
    /**
     * The CSV format.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-datasetformat.html#cfn-sagemaker-dataqualityjobdefinition-datasetformat-csv
     */
    readonly csv?: CfnDataQualityJobDefinition.CsvProperty | cdk.IResolvable;

    /**
     * The Json format.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-datasetformat.html#cfn-sagemaker-dataqualityjobdefinition-datasetformat-json
     */
    readonly json?: cdk.IResolvable | CfnDataQualityJobDefinition.JsonProperty;

    /**
     * A flag indicate if the dataset format is Parquet.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-datasetformat.html#cfn-sagemaker-dataqualityjobdefinition-datasetformat-parquet
     */
    readonly parquet?: boolean | cdk.IResolvable;
  }

  /**
   * The CSV format.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-csv.html
   */
  export interface CsvProperty {
    /**
     * A boolean flag indicating if given CSV has header.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-csv.html#cfn-sagemaker-dataqualityjobdefinition-csv-header
     */
    readonly header?: boolean | cdk.IResolvable;
  }

  /**
   * The Json format.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-json.html
   */
  export interface JsonProperty {
    /**
     * A boolean flag indicating if it is JSON line format.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-json.html#cfn-sagemaker-dataqualityjobdefinition-json-line
     */
    readonly line?: boolean | cdk.IResolvable;
  }

  /**
   * Input object for the endpoint.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-endpointinput.html
   */
  export interface EndpointInputProperty {
    /**
     * An endpoint in customer's account which has enabled `DataCaptureConfig` enabled.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-endpointinput.html#cfn-sagemaker-dataqualityjobdefinition-endpointinput-endpointname
     */
    readonly endpointName: string;

    /**
     * The attributes of the input data to exclude from the analysis.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-endpointinput.html#cfn-sagemaker-dataqualityjobdefinition-endpointinput-excludefeaturesattribute
     */
    readonly excludeFeaturesAttribute?: string;

    /**
     * Path to the filesystem where the endpoint data is available to the container.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-endpointinput.html#cfn-sagemaker-dataqualityjobdefinition-endpointinput-localpath
     */
    readonly localPath: string;

    /**
     * Whether input data distributed in Amazon S3 is fully replicated or sharded by an Amazon S3 key.
     *
     * Defaults to `FullyReplicated`
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-endpointinput.html#cfn-sagemaker-dataqualityjobdefinition-endpointinput-s3datadistributiontype
     */
    readonly s3DataDistributionType?: string;

    /**
     * Whether the `Pipe` or `File` is used as the input mode for transferring data for the monitoring job.
     *
     * `Pipe` mode is recommended for large datasets. `File` mode is useful for small files that fit in memory. Defaults to `File` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-endpointinput.html#cfn-sagemaker-dataqualityjobdefinition-endpointinput-s3inputmode
     */
    readonly s3InputMode?: string;
  }

  /**
   * Information about the container that a data quality monitoring job runs.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-dataqualityappspecification.html
   */
  export interface DataQualityAppSpecificationProperty {
    /**
     * The arguments to send to the container that the monitoring job runs.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-dataqualityappspecification.html#cfn-sagemaker-dataqualityjobdefinition-dataqualityappspecification-containerarguments
     */
    readonly containerArguments?: Array<string>;

    /**
     * The entrypoint for a container used to run a monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-dataqualityappspecification.html#cfn-sagemaker-dataqualityjobdefinition-dataqualityappspecification-containerentrypoint
     */
    readonly containerEntrypoint?: Array<string>;

    /**
     * Sets the environment variables in the container that the monitoring job runs.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-dataqualityappspecification.html#cfn-sagemaker-dataqualityjobdefinition-dataqualityappspecification-environment
     */
    readonly environment?: cdk.IResolvable | Record<string, string>;

    /**
     * The container image that the data quality monitoring job runs.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-dataqualityappspecification.html#cfn-sagemaker-dataqualityjobdefinition-dataqualityappspecification-imageuri
     */
    readonly imageUri: string;

    /**
     * An Amazon S3 URI to a script that is called after analysis has been performed.
     *
     * Applicable only for the built-in (first party) containers.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-dataqualityappspecification.html#cfn-sagemaker-dataqualityjobdefinition-dataqualityappspecification-postanalyticsprocessorsourceuri
     */
    readonly postAnalyticsProcessorSourceUri?: string;

    /**
     * An Amazon S3 URI to a script that is called per row prior to running analysis.
     *
     * It can base64 decode the payload and convert it into a flattened JSON so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-dataqualityappspecification.html#cfn-sagemaker-dataqualityjobdefinition-dataqualityappspecification-recordpreprocessorsourceuri
     */
    readonly recordPreprocessorSourceUri?: string;
  }

  /**
   * Specifies a limit to how long a model training job or model compilation job can run.
   *
   * It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, SageMaker ends the training or compilation job. Use this API to cap model training costs.
   *
   * To stop a training job, SageMaker sends the algorithm the `SIGTERM` signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
   *
   * The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with `CreateModel` .
   *
   * > The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-stoppingcondition.html
   */
  export interface StoppingConditionProperty {
    /**
     * The maximum length of time, in seconds, that a training or compilation job can run before it is stopped.
     *
     * For compilation jobs, if the job does not complete during this time, a `TimeOut` error is generated. We recommend starting with 900 seconds and increasing as necessary based on your model.
     *
     * For all other jobs, if the job does not complete during this time, SageMaker ends the job. When `RetryStrategy` is specified in the job request, `MaxRuntimeInSeconds` specifies the maximum time for all of the attempts in total, not each individual attempt. The default value is 1 day. The maximum value is 28 days.
     *
     * The maximum time that a `TrainingJob` can run in total, including any time spent publishing metrics or archiving and uploading models after it has been stopped, is 30 days.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-stoppingcondition.html#cfn-sagemaker-dataqualityjobdefinition-stoppingcondition-maxruntimeinseconds
     */
    readonly maxRuntimeInSeconds: number;
  }

  /**
   * Identifies the resources to deploy for a monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-monitoringresources.html
   */
  export interface MonitoringResourcesProperty {
    /**
     * The configuration for the cluster resources used to run the processing job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-monitoringresources.html#cfn-sagemaker-dataqualityjobdefinition-monitoringresources-clusterconfig
     */
    readonly clusterConfig: CfnDataQualityJobDefinition.ClusterConfigProperty | cdk.IResolvable;
  }

  /**
   * The configuration for the cluster of resources used to run the processing job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-clusterconfig.html
   */
  export interface ClusterConfigProperty {
    /**
     * The number of ML compute instances to use in the model monitoring job.
     *
     * For distributed processing jobs, specify a value greater than 1. The default value is 1.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-clusterconfig.html#cfn-sagemaker-dataqualityjobdefinition-clusterconfig-instancecount
     */
    readonly instanceCount: number;

    /**
     * The ML compute instance type for the processing job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-clusterconfig.html#cfn-sagemaker-dataqualityjobdefinition-clusterconfig-instancetype
     */
    readonly instanceType: string;

    /**
     * The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-clusterconfig.html#cfn-sagemaker-dataqualityjobdefinition-clusterconfig-volumekmskeyid
     */
    readonly volumeKmsKeyId?: string;

    /**
     * The size of the ML storage volume, in gigabytes, that you want to provision.
     *
     * You must specify sufficient ML storage for your scenario.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-clusterconfig.html#cfn-sagemaker-dataqualityjobdefinition-clusterconfig-volumesizeingb
     */
    readonly volumeSizeInGb: number;
  }

  /**
   * Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-networkconfig.html
   */
  export interface NetworkConfigProperty {
    /**
     * Whether to encrypt all communications between distributed processing jobs.
     *
     * Choose `True` to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-networkconfig.html#cfn-sagemaker-dataqualityjobdefinition-networkconfig-enableintercontainertrafficencryption
     */
    readonly enableInterContainerTrafficEncryption?: boolean | cdk.IResolvable;

    /**
     * Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-networkconfig.html#cfn-sagemaker-dataqualityjobdefinition-networkconfig-enablenetworkisolation
     */
    readonly enableNetworkIsolation?: boolean | cdk.IResolvable;

    /**
     * Specifies a VPC that your training jobs and hosted models have access to.
     *
     * Control access to and from your training and model containers by configuring the VPC.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-networkconfig.html#cfn-sagemaker-dataqualityjobdefinition-networkconfig-vpcconfig
     */
    readonly vpcConfig?: cdk.IResolvable | CfnDataQualityJobDefinition.VpcConfigProperty;
  }

  /**
   * Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to.
   *
   * You can control access to and from your resources by configuring a VPC. For more information, see [Give SageMaker Access to Resources in your Amazon VPC](https://docs.aws.amazon.com/https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html) .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-vpcconfig.html
   */
  export interface VpcConfigProperty {
    /**
     * The VPC security group IDs, in the form `sg-xxxxxxxx` .
     *
     * Specify the security groups for the VPC that is specified in the `Subnets` field.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-vpcconfig.html#cfn-sagemaker-dataqualityjobdefinition-vpcconfig-securitygroupids
     */
    readonly securityGroupIds: Array<string>;

    /**
     * The ID of the subnets in the VPC to which you want to connect your training job or model.
     *
     * For information about the availability of specific instance types, see [Supported Instance Types and Availability Zones](https://docs.aws.amazon.com/sagemaker/latest/dg/instance-types-az.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-vpcconfig.html#cfn-sagemaker-dataqualityjobdefinition-vpcconfig-subnets
     */
    readonly subnets: Array<string>;
  }

  /**
   * The output configuration for monitoring jobs.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-monitoringoutputconfig.html
   */
  export interface MonitoringOutputConfigProperty {
    /**
     * The AWS Key Management Service ( AWS KMS ) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-monitoringoutputconfig.html#cfn-sagemaker-dataqualityjobdefinition-monitoringoutputconfig-kmskeyid
     */
    readonly kmsKeyId?: string;

    /**
     * Monitoring outputs for monitoring jobs.
     *
     * This is where the output of the periodic monitoring jobs is uploaded.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-monitoringoutputconfig.html#cfn-sagemaker-dataqualityjobdefinition-monitoringoutputconfig-monitoringoutputs
     */
    readonly monitoringOutputs: Array<cdk.IResolvable | CfnDataQualityJobDefinition.MonitoringOutputProperty> | cdk.IResolvable;
  }

  /**
   * The output object for a monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-monitoringoutput.html
   */
  export interface MonitoringOutputProperty {
    /**
     * The Amazon S3 storage location where the results of a monitoring job are saved.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-monitoringoutput.html#cfn-sagemaker-dataqualityjobdefinition-monitoringoutput-s3output
     */
    readonly s3Output: cdk.IResolvable | CfnDataQualityJobDefinition.S3OutputProperty;
  }

  /**
   * The Amazon S3 storage location where the results of a monitoring job are saved.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-s3output.html
   */
  export interface S3OutputProperty {
    /**
     * The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
     *
     * LocalPath is an absolute path for the output data.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-s3output.html#cfn-sagemaker-dataqualityjobdefinition-s3output-localpath
     */
    readonly localPath: string;

    /**
     * Whether to upload the results of the monitoring job continuously or after the job completes.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-s3output.html#cfn-sagemaker-dataqualityjobdefinition-s3output-s3uploadmode
     */
    readonly s3UploadMode?: string;

    /**
     * A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-s3output.html#cfn-sagemaker-dataqualityjobdefinition-s3output-s3uri
     */
    readonly s3Uri: string;
  }

  /**
   * Configuration for monitoring constraints and monitoring statistics.
   *
   * These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-dataqualitybaselineconfig.html
   */
  export interface DataQualityBaselineConfigProperty {
    /**
     * The name of the job that performs baselining for the data quality monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-dataqualitybaselineconfig.html#cfn-sagemaker-dataqualityjobdefinition-dataqualitybaselineconfig-baseliningjobname
     */
    readonly baseliningJobName?: string;

    /**
     * The constraints resource for a monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-dataqualitybaselineconfig.html#cfn-sagemaker-dataqualityjobdefinition-dataqualitybaselineconfig-constraintsresource
     */
    readonly constraintsResource?: CfnDataQualityJobDefinition.ConstraintsResourceProperty | cdk.IResolvable;

    /**
     * Configuration for monitoring constraints and monitoring statistics.
     *
     * These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-dataqualitybaselineconfig.html#cfn-sagemaker-dataqualityjobdefinition-dataqualitybaselineconfig-statisticsresource
     */
    readonly statisticsResource?: cdk.IResolvable | CfnDataQualityJobDefinition.StatisticsResourceProperty;
  }

  /**
   * The statistics resource for a monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-statisticsresource.html
   */
  export interface StatisticsResourceProperty {
    /**
     * The Amazon S3 URI for the statistics resource.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-statisticsresource.html#cfn-sagemaker-dataqualityjobdefinition-statisticsresource-s3uri
     */
    readonly s3Uri?: string;
  }

  /**
   * The constraints resource for a monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-constraintsresource.html
   */
  export interface ConstraintsResourceProperty {
    /**
     * The Amazon S3 URI for the constraints resource.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-constraintsresource.html#cfn-sagemaker-dataqualityjobdefinition-constraintsresource-s3uri
     */
    readonly s3Uri?: string;
  }
}

/**
 * Properties for defining a `CfnDataQualityJobDefinition`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-dataqualityjobdefinition.html
 */
export interface CfnDataQualityJobDefinitionProps {
  /**
   * Specifies the container that runs the monitoring job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-dataqualityjobdefinition.html#cfn-sagemaker-dataqualityjobdefinition-dataqualityappspecification
   */
  readonly dataQualityAppSpecification: CfnDataQualityJobDefinition.DataQualityAppSpecificationProperty | cdk.IResolvable;

  /**
   * Configures the constraints and baselines for the monitoring job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-dataqualityjobdefinition.html#cfn-sagemaker-dataqualityjobdefinition-dataqualitybaselineconfig
   */
  readonly dataQualityBaselineConfig?: CfnDataQualityJobDefinition.DataQualityBaselineConfigProperty | cdk.IResolvable;

  /**
   * A list of inputs for the monitoring job.
   *
   * Currently endpoints are supported as monitoring inputs.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-dataqualityjobdefinition.html#cfn-sagemaker-dataqualityjobdefinition-dataqualityjobinput
   */
  readonly dataQualityJobInput: CfnDataQualityJobDefinition.DataQualityJobInputProperty | cdk.IResolvable;

  /**
   * The output configuration for monitoring jobs.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-dataqualityjobdefinition.html#cfn-sagemaker-dataqualityjobdefinition-dataqualityjoboutputconfig
   */
  readonly dataQualityJobOutputConfig: cdk.IResolvable | CfnDataQualityJobDefinition.MonitoringOutputConfigProperty;

  /**
   * The name of the endpoint used to run the monitoring job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-dataqualityjobdefinition.html#cfn-sagemaker-dataqualityjobdefinition-endpointname
   */
  readonly endpointName?: string;

  /**
   * The name for the monitoring job definition.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-dataqualityjobdefinition.html#cfn-sagemaker-dataqualityjobdefinition-jobdefinitionname
   */
  readonly jobDefinitionName?: string;

  /**
   * Identifies the resources to deploy for a monitoring job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-dataqualityjobdefinition.html#cfn-sagemaker-dataqualityjobdefinition-jobresources
   */
  readonly jobResources: cdk.IResolvable | CfnDataQualityJobDefinition.MonitoringResourcesProperty;

  /**
   * Specifies networking configuration for the monitoring job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-dataqualityjobdefinition.html#cfn-sagemaker-dataqualityjobdefinition-networkconfig
   */
  readonly networkConfig?: cdk.IResolvable | CfnDataQualityJobDefinition.NetworkConfigProperty;

  /**
   * The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-dataqualityjobdefinition.html#cfn-sagemaker-dataqualityjobdefinition-rolearn
   */
  readonly roleArn: string;

  /**
   * A time limit for how long the monitoring job is allowed to run before stopping.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-dataqualityjobdefinition.html#cfn-sagemaker-dataqualityjobdefinition-stoppingcondition
   */
  readonly stoppingCondition?: cdk.IResolvable | CfnDataQualityJobDefinition.StoppingConditionProperty;

  /**
   * An array of key-value pairs to apply to this resource.
   *
   * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-dataqualityjobdefinition.html#cfn-sagemaker-dataqualityjobdefinition-tags
   */
  readonly tags?: Array<cdk.CfnTag>;
}

/**
 * Determine whether the given properties match those of a `CsvProperty`
 *
 * @param properties - the TypeScript properties of a `CsvProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDataQualityJobDefinitionCsvPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("header", cdk.validateBoolean)(properties.header));
  return errors.wrap("supplied properties not correct for \"CsvProperty\"");
}

// @ts-ignore TS6133
function convertCfnDataQualityJobDefinitionCsvPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDataQualityJobDefinitionCsvPropertyValidator(properties).assertSuccess();
  return {
    "Header": cdk.booleanToCloudFormation(properties.header)
  };
}

// @ts-ignore TS6133
function CfnDataQualityJobDefinitionCsvPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.CsvProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.CsvProperty>();
  ret.addPropertyResult("header", "Header", (properties.Header != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Header) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `JsonProperty`
 *
 * @param properties - the TypeScript properties of a `JsonProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDataQualityJobDefinitionJsonPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("line", cdk.validateBoolean)(properties.line));
  return errors.wrap("supplied properties not correct for \"JsonProperty\"");
}

// @ts-ignore TS6133
function convertCfnDataQualityJobDefinitionJsonPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDataQualityJobDefinitionJsonPropertyValidator(properties).assertSuccess();
  return {
    "Line": cdk.booleanToCloudFormation(properties.line)
  };
}

// @ts-ignore TS6133
function CfnDataQualityJobDefinitionJsonPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnDataQualityJobDefinition.JsonProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.JsonProperty>();
  ret.addPropertyResult("line", "Line", (properties.Line != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Line) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DatasetFormatProperty`
 *
 * @param properties - the TypeScript properties of a `DatasetFormatProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDataQualityJobDefinitionDatasetFormatPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("csv", CfnDataQualityJobDefinitionCsvPropertyValidator)(properties.csv));
  errors.collect(cdk.propertyValidator("json", CfnDataQualityJobDefinitionJsonPropertyValidator)(properties.json));
  errors.collect(cdk.propertyValidator("parquet", cdk.validateBoolean)(properties.parquet));
  return errors.wrap("supplied properties not correct for \"DatasetFormatProperty\"");
}

// @ts-ignore TS6133
function convertCfnDataQualityJobDefinitionDatasetFormatPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDataQualityJobDefinitionDatasetFormatPropertyValidator(properties).assertSuccess();
  return {
    "Csv": convertCfnDataQualityJobDefinitionCsvPropertyToCloudFormation(properties.csv),
    "Json": convertCfnDataQualityJobDefinitionJsonPropertyToCloudFormation(properties.json),
    "Parquet": cdk.booleanToCloudFormation(properties.parquet)
  };
}

// @ts-ignore TS6133
function CfnDataQualityJobDefinitionDatasetFormatPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.DatasetFormatProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.DatasetFormatProperty>();
  ret.addPropertyResult("csv", "Csv", (properties.Csv != null ? CfnDataQualityJobDefinitionCsvPropertyFromCloudFormation(properties.Csv) : undefined));
  ret.addPropertyResult("json", "Json", (properties.Json != null ? CfnDataQualityJobDefinitionJsonPropertyFromCloudFormation(properties.Json) : undefined));
  ret.addPropertyResult("parquet", "Parquet", (properties.Parquet != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Parquet) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `BatchTransformInputProperty`
 *
 * @param properties - the TypeScript properties of a `BatchTransformInputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDataQualityJobDefinitionBatchTransformInputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("dataCapturedDestinationS3Uri", cdk.requiredValidator)(properties.dataCapturedDestinationS3Uri));
  errors.collect(cdk.propertyValidator("dataCapturedDestinationS3Uri", cdk.validateString)(properties.dataCapturedDestinationS3Uri));
  errors.collect(cdk.propertyValidator("datasetFormat", cdk.requiredValidator)(properties.datasetFormat));
  errors.collect(cdk.propertyValidator("datasetFormat", CfnDataQualityJobDefinitionDatasetFormatPropertyValidator)(properties.datasetFormat));
  errors.collect(cdk.propertyValidator("excludeFeaturesAttribute", cdk.validateString)(properties.excludeFeaturesAttribute));
  errors.collect(cdk.propertyValidator("localPath", cdk.requiredValidator)(properties.localPath));
  errors.collect(cdk.propertyValidator("localPath", cdk.validateString)(properties.localPath));
  errors.collect(cdk.propertyValidator("s3DataDistributionType", cdk.validateString)(properties.s3DataDistributionType));
  errors.collect(cdk.propertyValidator("s3InputMode", cdk.validateString)(properties.s3InputMode));
  return errors.wrap("supplied properties not correct for \"BatchTransformInputProperty\"");
}

// @ts-ignore TS6133
function convertCfnDataQualityJobDefinitionBatchTransformInputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDataQualityJobDefinitionBatchTransformInputPropertyValidator(properties).assertSuccess();
  return {
    "DataCapturedDestinationS3Uri": cdk.stringToCloudFormation(properties.dataCapturedDestinationS3Uri),
    "DatasetFormat": convertCfnDataQualityJobDefinitionDatasetFormatPropertyToCloudFormation(properties.datasetFormat),
    "ExcludeFeaturesAttribute": cdk.stringToCloudFormation(properties.excludeFeaturesAttribute),
    "LocalPath": cdk.stringToCloudFormation(properties.localPath),
    "S3DataDistributionType": cdk.stringToCloudFormation(properties.s3DataDistributionType),
    "S3InputMode": cdk.stringToCloudFormation(properties.s3InputMode)
  };
}

// @ts-ignore TS6133
function CfnDataQualityJobDefinitionBatchTransformInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.BatchTransformInputProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.BatchTransformInputProperty>();
  ret.addPropertyResult("dataCapturedDestinationS3Uri", "DataCapturedDestinationS3Uri", (properties.DataCapturedDestinationS3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.DataCapturedDestinationS3Uri) : undefined));
  ret.addPropertyResult("datasetFormat", "DatasetFormat", (properties.DatasetFormat != null ? CfnDataQualityJobDefinitionDatasetFormatPropertyFromCloudFormation(properties.DatasetFormat) : undefined));
  ret.addPropertyResult("excludeFeaturesAttribute", "ExcludeFeaturesAttribute", (properties.ExcludeFeaturesAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.ExcludeFeaturesAttribute) : undefined));
  ret.addPropertyResult("localPath", "LocalPath", (properties.LocalPath != null ? cfn_parse.FromCloudFormation.getString(properties.LocalPath) : undefined));
  ret.addPropertyResult("s3DataDistributionType", "S3DataDistributionType", (properties.S3DataDistributionType != null ? cfn_parse.FromCloudFormation.getString(properties.S3DataDistributionType) : undefined));
  ret.addPropertyResult("s3InputMode", "S3InputMode", (properties.S3InputMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3InputMode) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `EndpointInputProperty`
 *
 * @param properties - the TypeScript properties of a `EndpointInputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDataQualityJobDefinitionEndpointInputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("endpointName", cdk.requiredValidator)(properties.endpointName));
  errors.collect(cdk.propertyValidator("endpointName", cdk.validateString)(properties.endpointName));
  errors.collect(cdk.propertyValidator("excludeFeaturesAttribute", cdk.validateString)(properties.excludeFeaturesAttribute));
  errors.collect(cdk.propertyValidator("localPath", cdk.requiredValidator)(properties.localPath));
  errors.collect(cdk.propertyValidator("localPath", cdk.validateString)(properties.localPath));
  errors.collect(cdk.propertyValidator("s3DataDistributionType", cdk.validateString)(properties.s3DataDistributionType));
  errors.collect(cdk.propertyValidator("s3InputMode", cdk.validateString)(properties.s3InputMode));
  return errors.wrap("supplied properties not correct for \"EndpointInputProperty\"");
}

// @ts-ignore TS6133
function convertCfnDataQualityJobDefinitionEndpointInputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDataQualityJobDefinitionEndpointInputPropertyValidator(properties).assertSuccess();
  return {
    "EndpointName": cdk.stringToCloudFormation(properties.endpointName),
    "ExcludeFeaturesAttribute": cdk.stringToCloudFormation(properties.excludeFeaturesAttribute),
    "LocalPath": cdk.stringToCloudFormation(properties.localPath),
    "S3DataDistributionType": cdk.stringToCloudFormation(properties.s3DataDistributionType),
    "S3InputMode": cdk.stringToCloudFormation(properties.s3InputMode)
  };
}

// @ts-ignore TS6133
function CfnDataQualityJobDefinitionEndpointInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.EndpointInputProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.EndpointInputProperty>();
  ret.addPropertyResult("endpointName", "EndpointName", (properties.EndpointName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointName) : undefined));
  ret.addPropertyResult("excludeFeaturesAttribute", "ExcludeFeaturesAttribute", (properties.ExcludeFeaturesAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.ExcludeFeaturesAttribute) : undefined));
  ret.addPropertyResult("localPath", "LocalPath", (properties.LocalPath != null ? cfn_parse.FromCloudFormation.getString(properties.LocalPath) : undefined));
  ret.addPropertyResult("s3DataDistributionType", "S3DataDistributionType", (properties.S3DataDistributionType != null ? cfn_parse.FromCloudFormation.getString(properties.S3DataDistributionType) : undefined));
  ret.addPropertyResult("s3InputMode", "S3InputMode", (properties.S3InputMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3InputMode) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DataQualityJobInputProperty`
 *
 * @param properties - the TypeScript properties of a `DataQualityJobInputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDataQualityJobDefinitionDataQualityJobInputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("batchTransformInput", CfnDataQualityJobDefinitionBatchTransformInputPropertyValidator)(properties.batchTransformInput));
  errors.collect(cdk.propertyValidator("endpointInput", CfnDataQualityJobDefinitionEndpointInputPropertyValidator)(properties.endpointInput));
  return errors.wrap("supplied properties not correct for \"DataQualityJobInputProperty\"");
}

// @ts-ignore TS6133
function convertCfnDataQualityJobDefinitionDataQualityJobInputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDataQualityJobDefinitionDataQualityJobInputPropertyValidator(properties).assertSuccess();
  return {
    "BatchTransformInput": convertCfnDataQualityJobDefinitionBatchTransformInputPropertyToCloudFormation(properties.batchTransformInput),
    "EndpointInput": convertCfnDataQualityJobDefinitionEndpointInputPropertyToCloudFormation(properties.endpointInput)
  };
}

// @ts-ignore TS6133
function CfnDataQualityJobDefinitionDataQualityJobInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.DataQualityJobInputProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.DataQualityJobInputProperty>();
  ret.addPropertyResult("batchTransformInput", "BatchTransformInput", (properties.BatchTransformInput != null ? CfnDataQualityJobDefinitionBatchTransformInputPropertyFromCloudFormation(properties.BatchTransformInput) : undefined));
  ret.addPropertyResult("endpointInput", "EndpointInput", (properties.EndpointInput != null ? CfnDataQualityJobDefinitionEndpointInputPropertyFromCloudFormation(properties.EndpointInput) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DataQualityAppSpecificationProperty`
 *
 * @param properties - the TypeScript properties of a `DataQualityAppSpecificationProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDataQualityJobDefinitionDataQualityAppSpecificationPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("containerArguments", cdk.listValidator(cdk.validateString))(properties.containerArguments));
  errors.collect(cdk.propertyValidator("containerEntrypoint", cdk.listValidator(cdk.validateString))(properties.containerEntrypoint));
  errors.collect(cdk.propertyValidator("environment", cdk.hashValidator(cdk.validateString))(properties.environment));
  errors.collect(cdk.propertyValidator("imageUri", cdk.requiredValidator)(properties.imageUri));
  errors.collect(cdk.propertyValidator("imageUri", cdk.validateString)(properties.imageUri));
  errors.collect(cdk.propertyValidator("postAnalyticsProcessorSourceUri", cdk.validateString)(properties.postAnalyticsProcessorSourceUri));
  errors.collect(cdk.propertyValidator("recordPreprocessorSourceUri", cdk.validateString)(properties.recordPreprocessorSourceUri));
  return errors.wrap("supplied properties not correct for \"DataQualityAppSpecificationProperty\"");
}

// @ts-ignore TS6133
function convertCfnDataQualityJobDefinitionDataQualityAppSpecificationPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDataQualityJobDefinitionDataQualityAppSpecificationPropertyValidator(properties).assertSuccess();
  return {
    "ContainerArguments": cdk.listMapper(cdk.stringToCloudFormation)(properties.containerArguments),
    "ContainerEntrypoint": cdk.listMapper(cdk.stringToCloudFormation)(properties.containerEntrypoint),
    "Environment": cdk.hashMapper(cdk.stringToCloudFormation)(properties.environment),
    "ImageUri": cdk.stringToCloudFormation(properties.imageUri),
    "PostAnalyticsProcessorSourceUri": cdk.stringToCloudFormation(properties.postAnalyticsProcessorSourceUri),
    "RecordPreprocessorSourceUri": cdk.stringToCloudFormation(properties.recordPreprocessorSourceUri)
  };
}

// @ts-ignore TS6133
function CfnDataQualityJobDefinitionDataQualityAppSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.DataQualityAppSpecificationProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.DataQualityAppSpecificationProperty>();
  ret.addPropertyResult("containerArguments", "ContainerArguments", (properties.ContainerArguments != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.ContainerArguments) : undefined));
  ret.addPropertyResult("containerEntrypoint", "ContainerEntrypoint", (properties.ContainerEntrypoint != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.ContainerEntrypoint) : undefined));
  ret.addPropertyResult("environment", "Environment", (properties.Environment != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Environment) : undefined));
  ret.addPropertyResult("imageUri", "ImageUri", (properties.ImageUri != null ? cfn_parse.FromCloudFormation.getString(properties.ImageUri) : undefined));
  ret.addPropertyResult("postAnalyticsProcessorSourceUri", "PostAnalyticsProcessorSourceUri", (properties.PostAnalyticsProcessorSourceUri != null ? cfn_parse.FromCloudFormation.getString(properties.PostAnalyticsProcessorSourceUri) : undefined));
  ret.addPropertyResult("recordPreprocessorSourceUri", "RecordPreprocessorSourceUri", (properties.RecordPreprocessorSourceUri != null ? cfn_parse.FromCloudFormation.getString(properties.RecordPreprocessorSourceUri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `StoppingConditionProperty`
 *
 * @param properties - the TypeScript properties of a `StoppingConditionProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDataQualityJobDefinitionStoppingConditionPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("maxRuntimeInSeconds", cdk.requiredValidator)(properties.maxRuntimeInSeconds));
  errors.collect(cdk.propertyValidator("maxRuntimeInSeconds", cdk.validateNumber)(properties.maxRuntimeInSeconds));
  return errors.wrap("supplied properties not correct for \"StoppingConditionProperty\"");
}

// @ts-ignore TS6133
function convertCfnDataQualityJobDefinitionStoppingConditionPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDataQualityJobDefinitionStoppingConditionPropertyValidator(properties).assertSuccess();
  return {
    "MaxRuntimeInSeconds": cdk.numberToCloudFormation(properties.maxRuntimeInSeconds)
  };
}

// @ts-ignore TS6133
function CfnDataQualityJobDefinitionStoppingConditionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnDataQualityJobDefinition.StoppingConditionProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.StoppingConditionProperty>();
  ret.addPropertyResult("maxRuntimeInSeconds", "MaxRuntimeInSeconds", (properties.MaxRuntimeInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxRuntimeInSeconds) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ClusterConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ClusterConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDataQualityJobDefinitionClusterConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("instanceCount", cdk.requiredValidator)(properties.instanceCount));
  errors.collect(cdk.propertyValidator("instanceCount", cdk.validateNumber)(properties.instanceCount));
  errors.collect(cdk.propertyValidator("instanceType", cdk.requiredValidator)(properties.instanceType));
  errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
  errors.collect(cdk.propertyValidator("volumeKmsKeyId", cdk.validateString)(properties.volumeKmsKeyId));
  errors.collect(cdk.propertyValidator("volumeSizeInGb", cdk.requiredValidator)(properties.volumeSizeInGb));
  errors.collect(cdk.propertyValidator("volumeSizeInGb", cdk.validateNumber)(properties.volumeSizeInGb));
  return errors.wrap("supplied properties not correct for \"ClusterConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnDataQualityJobDefinitionClusterConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDataQualityJobDefinitionClusterConfigPropertyValidator(properties).assertSuccess();
  return {
    "InstanceCount": cdk.numberToCloudFormation(properties.instanceCount),
    "InstanceType": cdk.stringToCloudFormation(properties.instanceType),
    "VolumeKmsKeyId": cdk.stringToCloudFormation(properties.volumeKmsKeyId),
    "VolumeSizeInGB": cdk.numberToCloudFormation(properties.volumeSizeInGb)
  };
}

// @ts-ignore TS6133
function CfnDataQualityJobDefinitionClusterConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.ClusterConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.ClusterConfigProperty>();
  ret.addPropertyResult("instanceCount", "InstanceCount", (properties.InstanceCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.InstanceCount) : undefined));
  ret.addPropertyResult("instanceType", "InstanceType", (properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined));
  ret.addPropertyResult("volumeKmsKeyId", "VolumeKmsKeyId", (properties.VolumeKmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeKmsKeyId) : undefined));
  ret.addPropertyResult("volumeSizeInGb", "VolumeSizeInGB", (properties.VolumeSizeInGB != null ? cfn_parse.FromCloudFormation.getNumber(properties.VolumeSizeInGB) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringResourcesProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringResourcesProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDataQualityJobDefinitionMonitoringResourcesPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("clusterConfig", cdk.requiredValidator)(properties.clusterConfig));
  errors.collect(cdk.propertyValidator("clusterConfig", CfnDataQualityJobDefinitionClusterConfigPropertyValidator)(properties.clusterConfig));
  return errors.wrap("supplied properties not correct for \"MonitoringResourcesProperty\"");
}

// @ts-ignore TS6133
function convertCfnDataQualityJobDefinitionMonitoringResourcesPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDataQualityJobDefinitionMonitoringResourcesPropertyValidator(properties).assertSuccess();
  return {
    "ClusterConfig": convertCfnDataQualityJobDefinitionClusterConfigPropertyToCloudFormation(properties.clusterConfig)
  };
}

// @ts-ignore TS6133
function CfnDataQualityJobDefinitionMonitoringResourcesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnDataQualityJobDefinition.MonitoringResourcesProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.MonitoringResourcesProperty>();
  ret.addPropertyResult("clusterConfig", "ClusterConfig", (properties.ClusterConfig != null ? CfnDataQualityJobDefinitionClusterConfigPropertyFromCloudFormation(properties.ClusterConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `VpcConfigProperty`
 *
 * @param properties - the TypeScript properties of a `VpcConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDataQualityJobDefinitionVpcConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("securityGroupIds", cdk.requiredValidator)(properties.securityGroupIds));
  errors.collect(cdk.propertyValidator("securityGroupIds", cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
  errors.collect(cdk.propertyValidator("subnets", cdk.requiredValidator)(properties.subnets));
  errors.collect(cdk.propertyValidator("subnets", cdk.listValidator(cdk.validateString))(properties.subnets));
  return errors.wrap("supplied properties not correct for \"VpcConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnDataQualityJobDefinitionVpcConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDataQualityJobDefinitionVpcConfigPropertyValidator(properties).assertSuccess();
  return {
    "SecurityGroupIds": cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
    "Subnets": cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets)
  };
}

// @ts-ignore TS6133
function CfnDataQualityJobDefinitionVpcConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnDataQualityJobDefinition.VpcConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.VpcConfigProperty>();
  ret.addPropertyResult("securityGroupIds", "SecurityGroupIds", (properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SecurityGroupIds) : undefined));
  ret.addPropertyResult("subnets", "Subnets", (properties.Subnets != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.Subnets) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `NetworkConfigProperty`
 *
 * @param properties - the TypeScript properties of a `NetworkConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDataQualityJobDefinitionNetworkConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("enableInterContainerTrafficEncryption", cdk.validateBoolean)(properties.enableInterContainerTrafficEncryption));
  errors.collect(cdk.propertyValidator("enableNetworkIsolation", cdk.validateBoolean)(properties.enableNetworkIsolation));
  errors.collect(cdk.propertyValidator("vpcConfig", CfnDataQualityJobDefinitionVpcConfigPropertyValidator)(properties.vpcConfig));
  return errors.wrap("supplied properties not correct for \"NetworkConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnDataQualityJobDefinitionNetworkConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDataQualityJobDefinitionNetworkConfigPropertyValidator(properties).assertSuccess();
  return {
    "EnableInterContainerTrafficEncryption": cdk.booleanToCloudFormation(properties.enableInterContainerTrafficEncryption),
    "EnableNetworkIsolation": cdk.booleanToCloudFormation(properties.enableNetworkIsolation),
    "VpcConfig": convertCfnDataQualityJobDefinitionVpcConfigPropertyToCloudFormation(properties.vpcConfig)
  };
}

// @ts-ignore TS6133
function CfnDataQualityJobDefinitionNetworkConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnDataQualityJobDefinition.NetworkConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.NetworkConfigProperty>();
  ret.addPropertyResult("enableInterContainerTrafficEncryption", "EnableInterContainerTrafficEncryption", (properties.EnableInterContainerTrafficEncryption != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableInterContainerTrafficEncryption) : undefined));
  ret.addPropertyResult("enableNetworkIsolation", "EnableNetworkIsolation", (properties.EnableNetworkIsolation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableNetworkIsolation) : undefined));
  ret.addPropertyResult("vpcConfig", "VpcConfig", (properties.VpcConfig != null ? CfnDataQualityJobDefinitionVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `S3OutputProperty`
 *
 * @param properties - the TypeScript properties of a `S3OutputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDataQualityJobDefinitionS3OutputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("localPath", cdk.requiredValidator)(properties.localPath));
  errors.collect(cdk.propertyValidator("localPath", cdk.validateString)(properties.localPath));
  errors.collect(cdk.propertyValidator("s3UploadMode", cdk.validateString)(properties.s3UploadMode));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.requiredValidator)(properties.s3Uri));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.validateString)(properties.s3Uri));
  return errors.wrap("supplied properties not correct for \"S3OutputProperty\"");
}

// @ts-ignore TS6133
function convertCfnDataQualityJobDefinitionS3OutputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDataQualityJobDefinitionS3OutputPropertyValidator(properties).assertSuccess();
  return {
    "LocalPath": cdk.stringToCloudFormation(properties.localPath),
    "S3UploadMode": cdk.stringToCloudFormation(properties.s3UploadMode),
    "S3Uri": cdk.stringToCloudFormation(properties.s3Uri)
  };
}

// @ts-ignore TS6133
function CfnDataQualityJobDefinitionS3OutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnDataQualityJobDefinition.S3OutputProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.S3OutputProperty>();
  ret.addPropertyResult("localPath", "LocalPath", (properties.LocalPath != null ? cfn_parse.FromCloudFormation.getString(properties.LocalPath) : undefined));
  ret.addPropertyResult("s3UploadMode", "S3UploadMode", (properties.S3UploadMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3UploadMode) : undefined));
  ret.addPropertyResult("s3Uri", "S3Uri", (properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringOutputProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringOutputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDataQualityJobDefinitionMonitoringOutputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("s3Output", cdk.requiredValidator)(properties.s3Output));
  errors.collect(cdk.propertyValidator("s3Output", CfnDataQualityJobDefinitionS3OutputPropertyValidator)(properties.s3Output));
  return errors.wrap("supplied properties not correct for \"MonitoringOutputProperty\"");
}

// @ts-ignore TS6133
function convertCfnDataQualityJobDefinitionMonitoringOutputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDataQualityJobDefinitionMonitoringOutputPropertyValidator(properties).assertSuccess();
  return {
    "S3Output": convertCfnDataQualityJobDefinitionS3OutputPropertyToCloudFormation(properties.s3Output)
  };
}

// @ts-ignore TS6133
function CfnDataQualityJobDefinitionMonitoringOutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnDataQualityJobDefinition.MonitoringOutputProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.MonitoringOutputProperty>();
  ret.addPropertyResult("s3Output", "S3Output", (properties.S3Output != null ? CfnDataQualityJobDefinitionS3OutputPropertyFromCloudFormation(properties.S3Output) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringOutputConfigProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringOutputConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDataQualityJobDefinitionMonitoringOutputConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("kmsKeyId", cdk.validateString)(properties.kmsKeyId));
  errors.collect(cdk.propertyValidator("monitoringOutputs", cdk.requiredValidator)(properties.monitoringOutputs));
  errors.collect(cdk.propertyValidator("monitoringOutputs", cdk.listValidator(CfnDataQualityJobDefinitionMonitoringOutputPropertyValidator))(properties.monitoringOutputs));
  return errors.wrap("supplied properties not correct for \"MonitoringOutputConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnDataQualityJobDefinitionMonitoringOutputConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDataQualityJobDefinitionMonitoringOutputConfigPropertyValidator(properties).assertSuccess();
  return {
    "KmsKeyId": cdk.stringToCloudFormation(properties.kmsKeyId),
    "MonitoringOutputs": cdk.listMapper(convertCfnDataQualityJobDefinitionMonitoringOutputPropertyToCloudFormation)(properties.monitoringOutputs)
  };
}

// @ts-ignore TS6133
function CfnDataQualityJobDefinitionMonitoringOutputConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnDataQualityJobDefinition.MonitoringOutputConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.MonitoringOutputConfigProperty>();
  ret.addPropertyResult("kmsKeyId", "KmsKeyId", (properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined));
  ret.addPropertyResult("monitoringOutputs", "MonitoringOutputs", (properties.MonitoringOutputs != null ? cfn_parse.FromCloudFormation.getArray(CfnDataQualityJobDefinitionMonitoringOutputPropertyFromCloudFormation)(properties.MonitoringOutputs) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `StatisticsResourceProperty`
 *
 * @param properties - the TypeScript properties of a `StatisticsResourceProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDataQualityJobDefinitionStatisticsResourcePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("s3Uri", cdk.validateString)(properties.s3Uri));
  return errors.wrap("supplied properties not correct for \"StatisticsResourceProperty\"");
}

// @ts-ignore TS6133
function convertCfnDataQualityJobDefinitionStatisticsResourcePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDataQualityJobDefinitionStatisticsResourcePropertyValidator(properties).assertSuccess();
  return {
    "S3Uri": cdk.stringToCloudFormation(properties.s3Uri)
  };
}

// @ts-ignore TS6133
function CfnDataQualityJobDefinitionStatisticsResourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnDataQualityJobDefinition.StatisticsResourceProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.StatisticsResourceProperty>();
  ret.addPropertyResult("s3Uri", "S3Uri", (properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ConstraintsResourceProperty`
 *
 * @param properties - the TypeScript properties of a `ConstraintsResourceProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDataQualityJobDefinitionConstraintsResourcePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("s3Uri", cdk.validateString)(properties.s3Uri));
  return errors.wrap("supplied properties not correct for \"ConstraintsResourceProperty\"");
}

// @ts-ignore TS6133
function convertCfnDataQualityJobDefinitionConstraintsResourcePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDataQualityJobDefinitionConstraintsResourcePropertyValidator(properties).assertSuccess();
  return {
    "S3Uri": cdk.stringToCloudFormation(properties.s3Uri)
  };
}

// @ts-ignore TS6133
function CfnDataQualityJobDefinitionConstraintsResourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.ConstraintsResourceProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.ConstraintsResourceProperty>();
  ret.addPropertyResult("s3Uri", "S3Uri", (properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DataQualityBaselineConfigProperty`
 *
 * @param properties - the TypeScript properties of a `DataQualityBaselineConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDataQualityJobDefinitionDataQualityBaselineConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("baseliningJobName", cdk.validateString)(properties.baseliningJobName));
  errors.collect(cdk.propertyValidator("constraintsResource", CfnDataQualityJobDefinitionConstraintsResourcePropertyValidator)(properties.constraintsResource));
  errors.collect(cdk.propertyValidator("statisticsResource", CfnDataQualityJobDefinitionStatisticsResourcePropertyValidator)(properties.statisticsResource));
  return errors.wrap("supplied properties not correct for \"DataQualityBaselineConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnDataQualityJobDefinitionDataQualityBaselineConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDataQualityJobDefinitionDataQualityBaselineConfigPropertyValidator(properties).assertSuccess();
  return {
    "BaseliningJobName": cdk.stringToCloudFormation(properties.baseliningJobName),
    "ConstraintsResource": convertCfnDataQualityJobDefinitionConstraintsResourcePropertyToCloudFormation(properties.constraintsResource),
    "StatisticsResource": convertCfnDataQualityJobDefinitionStatisticsResourcePropertyToCloudFormation(properties.statisticsResource)
  };
}

// @ts-ignore TS6133
function CfnDataQualityJobDefinitionDataQualityBaselineConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinition.DataQualityBaselineConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinition.DataQualityBaselineConfigProperty>();
  ret.addPropertyResult("baseliningJobName", "BaseliningJobName", (properties.BaseliningJobName != null ? cfn_parse.FromCloudFormation.getString(properties.BaseliningJobName) : undefined));
  ret.addPropertyResult("constraintsResource", "ConstraintsResource", (properties.ConstraintsResource != null ? CfnDataQualityJobDefinitionConstraintsResourcePropertyFromCloudFormation(properties.ConstraintsResource) : undefined));
  ret.addPropertyResult("statisticsResource", "StatisticsResource", (properties.StatisticsResource != null ? CfnDataQualityJobDefinitionStatisticsResourcePropertyFromCloudFormation(properties.StatisticsResource) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnDataQualityJobDefinitionProps`
 *
 * @param properties - the TypeScript properties of a `CfnDataQualityJobDefinitionProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDataQualityJobDefinitionPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("dataQualityAppSpecification", cdk.requiredValidator)(properties.dataQualityAppSpecification));
  errors.collect(cdk.propertyValidator("dataQualityAppSpecification", CfnDataQualityJobDefinitionDataQualityAppSpecificationPropertyValidator)(properties.dataQualityAppSpecification));
  errors.collect(cdk.propertyValidator("dataQualityBaselineConfig", CfnDataQualityJobDefinitionDataQualityBaselineConfigPropertyValidator)(properties.dataQualityBaselineConfig));
  errors.collect(cdk.propertyValidator("dataQualityJobInput", cdk.requiredValidator)(properties.dataQualityJobInput));
  errors.collect(cdk.propertyValidator("dataQualityJobInput", CfnDataQualityJobDefinitionDataQualityJobInputPropertyValidator)(properties.dataQualityJobInput));
  errors.collect(cdk.propertyValidator("dataQualityJobOutputConfig", cdk.requiredValidator)(properties.dataQualityJobOutputConfig));
  errors.collect(cdk.propertyValidator("dataQualityJobOutputConfig", CfnDataQualityJobDefinitionMonitoringOutputConfigPropertyValidator)(properties.dataQualityJobOutputConfig));
  errors.collect(cdk.propertyValidator("endpointName", cdk.validateString)(properties.endpointName));
  errors.collect(cdk.propertyValidator("jobDefinitionName", cdk.validateString)(properties.jobDefinitionName));
  errors.collect(cdk.propertyValidator("jobResources", cdk.requiredValidator)(properties.jobResources));
  errors.collect(cdk.propertyValidator("jobResources", CfnDataQualityJobDefinitionMonitoringResourcesPropertyValidator)(properties.jobResources));
  errors.collect(cdk.propertyValidator("networkConfig", CfnDataQualityJobDefinitionNetworkConfigPropertyValidator)(properties.networkConfig));
  errors.collect(cdk.propertyValidator("roleArn", cdk.requiredValidator)(properties.roleArn));
  errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
  errors.collect(cdk.propertyValidator("stoppingCondition", CfnDataQualityJobDefinitionStoppingConditionPropertyValidator)(properties.stoppingCondition));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  return errors.wrap("supplied properties not correct for \"CfnDataQualityJobDefinitionProps\"");
}

// @ts-ignore TS6133
function convertCfnDataQualityJobDefinitionPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDataQualityJobDefinitionPropsValidator(properties).assertSuccess();
  return {
    "DataQualityAppSpecification": convertCfnDataQualityJobDefinitionDataQualityAppSpecificationPropertyToCloudFormation(properties.dataQualityAppSpecification),
    "DataQualityBaselineConfig": convertCfnDataQualityJobDefinitionDataQualityBaselineConfigPropertyToCloudFormation(properties.dataQualityBaselineConfig),
    "DataQualityJobInput": convertCfnDataQualityJobDefinitionDataQualityJobInputPropertyToCloudFormation(properties.dataQualityJobInput),
    "DataQualityJobOutputConfig": convertCfnDataQualityJobDefinitionMonitoringOutputConfigPropertyToCloudFormation(properties.dataQualityJobOutputConfig),
    "EndpointName": cdk.stringToCloudFormation(properties.endpointName),
    "JobDefinitionName": cdk.stringToCloudFormation(properties.jobDefinitionName),
    "JobResources": convertCfnDataQualityJobDefinitionMonitoringResourcesPropertyToCloudFormation(properties.jobResources),
    "NetworkConfig": convertCfnDataQualityJobDefinitionNetworkConfigPropertyToCloudFormation(properties.networkConfig),
    "RoleArn": cdk.stringToCloudFormation(properties.roleArn),
    "StoppingCondition": convertCfnDataQualityJobDefinitionStoppingConditionPropertyToCloudFormation(properties.stoppingCondition),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
  };
}

// @ts-ignore TS6133
function CfnDataQualityJobDefinitionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDataQualityJobDefinitionProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDataQualityJobDefinitionProps>();
  ret.addPropertyResult("dataQualityAppSpecification", "DataQualityAppSpecification", (properties.DataQualityAppSpecification != null ? CfnDataQualityJobDefinitionDataQualityAppSpecificationPropertyFromCloudFormation(properties.DataQualityAppSpecification) : undefined));
  ret.addPropertyResult("dataQualityBaselineConfig", "DataQualityBaselineConfig", (properties.DataQualityBaselineConfig != null ? CfnDataQualityJobDefinitionDataQualityBaselineConfigPropertyFromCloudFormation(properties.DataQualityBaselineConfig) : undefined));
  ret.addPropertyResult("dataQualityJobInput", "DataQualityJobInput", (properties.DataQualityJobInput != null ? CfnDataQualityJobDefinitionDataQualityJobInputPropertyFromCloudFormation(properties.DataQualityJobInput) : undefined));
  ret.addPropertyResult("dataQualityJobOutputConfig", "DataQualityJobOutputConfig", (properties.DataQualityJobOutputConfig != null ? CfnDataQualityJobDefinitionMonitoringOutputConfigPropertyFromCloudFormation(properties.DataQualityJobOutputConfig) : undefined));
  ret.addPropertyResult("endpointName", "EndpointName", (properties.EndpointName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointName) : undefined));
  ret.addPropertyResult("jobDefinitionName", "JobDefinitionName", (properties.JobDefinitionName != null ? cfn_parse.FromCloudFormation.getString(properties.JobDefinitionName) : undefined));
  ret.addPropertyResult("jobResources", "JobResources", (properties.JobResources != null ? CfnDataQualityJobDefinitionMonitoringResourcesPropertyFromCloudFormation(properties.JobResources) : undefined));
  ret.addPropertyResult("networkConfig", "NetworkConfig", (properties.NetworkConfig != null ? CfnDataQualityJobDefinitionNetworkConfigPropertyFromCloudFormation(properties.NetworkConfig) : undefined));
  ret.addPropertyResult("roleArn", "RoleArn", (properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined));
  ret.addPropertyResult("stoppingCondition", "StoppingCondition", (properties.StoppingCondition != null ? CfnDataQualityJobDefinitionStoppingConditionPropertyFromCloudFormation(properties.StoppingCondition) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * The `AWS::SageMaker::Device` resource is an Amazon SageMaker resource type that allows you to register your Devices against an existing SageMaker Edge Manager DeviceFleet.
 *
 * Each device must be listed individually in the CFN specification.
 *
 * @cloudformationResource AWS::SageMaker::Device
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-device.html
 */
export class CfnDevice extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::Device";

  /**
   * Build a CfnDevice from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDevice {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnDevicePropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnDevice(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * Edge device you want to create.
   */
  public device?: CfnDevice.DeviceProperty | cdk.IResolvable;

  /**
   * The name of the fleet the device belongs to.
   */
  public deviceFleetName: string;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * An array of key-value pairs that contain metadata to help you categorize and organize your devices.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnDeviceProps) {
    super(scope, id, {
      "type": CfnDevice.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "deviceFleetName", this);

    this.device = props.device;
    this.deviceFleetName = props.deviceFleetName;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::Device", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "device": this.device,
      "deviceFleetName": this.deviceFleetName,
      "tags": this.tags.renderTags()
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnDevice.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnDevicePropsToCloudFormation(props);
  }
}

export namespace CfnDevice {
  /**
   * Information of a particular device.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-device-device.html
   */
  export interface DeviceProperty {
    /**
     * Description of the device.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-device-device.html#cfn-sagemaker-device-device-description
     */
    readonly description?: string;

    /**
     * The name of the device.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-device-device.html#cfn-sagemaker-device-device-devicename
     */
    readonly deviceName: string;

    /**
     * AWS Internet of Things (IoT) object name.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-device-device.html#cfn-sagemaker-device-device-iotthingname
     */
    readonly iotThingName?: string;
  }
}

/**
 * Properties for defining a `CfnDevice`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-device.html
 */
export interface CfnDeviceProps {
  /**
   * Edge device you want to create.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-device.html#cfn-sagemaker-device-device
   */
  readonly device?: CfnDevice.DeviceProperty | cdk.IResolvable;

  /**
   * The name of the fleet the device belongs to.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-device.html#cfn-sagemaker-device-devicefleetname
   */
  readonly deviceFleetName: string;

  /**
   * An array of key-value pairs that contain metadata to help you categorize and organize your devices.
   *
   * Each tag consists of a key and a value, both of which you define.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-device.html#cfn-sagemaker-device-tags
   */
  readonly tags?: Array<cdk.CfnTag>;
}

/**
 * Determine whether the given properties match those of a `DeviceProperty`
 *
 * @param properties - the TypeScript properties of a `DeviceProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDeviceDevicePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
  errors.collect(cdk.propertyValidator("deviceName", cdk.requiredValidator)(properties.deviceName));
  errors.collect(cdk.propertyValidator("deviceName", cdk.validateString)(properties.deviceName));
  errors.collect(cdk.propertyValidator("iotThingName", cdk.validateString)(properties.iotThingName));
  return errors.wrap("supplied properties not correct for \"DeviceProperty\"");
}

// @ts-ignore TS6133
function convertCfnDeviceDevicePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDeviceDevicePropertyValidator(properties).assertSuccess();
  return {
    "Description": cdk.stringToCloudFormation(properties.description),
    "DeviceName": cdk.stringToCloudFormation(properties.deviceName),
    "IotThingName": cdk.stringToCloudFormation(properties.iotThingName)
  };
}

// @ts-ignore TS6133
function CfnDeviceDevicePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDevice.DeviceProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDevice.DeviceProperty>();
  ret.addPropertyResult("description", "Description", (properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined));
  ret.addPropertyResult("deviceName", "DeviceName", (properties.DeviceName != null ? cfn_parse.FromCloudFormation.getString(properties.DeviceName) : undefined));
  ret.addPropertyResult("iotThingName", "IotThingName", (properties.IotThingName != null ? cfn_parse.FromCloudFormation.getString(properties.IotThingName) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnDeviceProps`
 *
 * @param properties - the TypeScript properties of a `CfnDeviceProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDevicePropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("device", CfnDeviceDevicePropertyValidator)(properties.device));
  errors.collect(cdk.propertyValidator("deviceFleetName", cdk.requiredValidator)(properties.deviceFleetName));
  errors.collect(cdk.propertyValidator("deviceFleetName", cdk.validateString)(properties.deviceFleetName));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  return errors.wrap("supplied properties not correct for \"CfnDeviceProps\"");
}

// @ts-ignore TS6133
function convertCfnDevicePropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDevicePropsValidator(properties).assertSuccess();
  return {
    "Device": convertCfnDeviceDevicePropertyToCloudFormation(properties.device),
    "DeviceFleetName": cdk.stringToCloudFormation(properties.deviceFleetName),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
  };
}

// @ts-ignore TS6133
function CfnDevicePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeviceProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeviceProps>();
  ret.addPropertyResult("device", "Device", (properties.Device != null ? CfnDeviceDevicePropertyFromCloudFormation(properties.Device) : undefined));
  ret.addPropertyResult("deviceFleetName", "DeviceFleetName", (properties.DeviceFleetName != null ? cfn_parse.FromCloudFormation.getString(properties.DeviceFleetName) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * The `AWS::SageMaker::DeviceFleet` resource is an Amazon SageMaker resource type that allows you to create a DeviceFleet that manages your SageMaker Edge Manager Devices.
 *
 * You must register your devices against the `DeviceFleet` separately.
 *
 * @cloudformationResource AWS::SageMaker::DeviceFleet
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-devicefleet.html
 */
export class CfnDeviceFleet extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::DeviceFleet";

  /**
   * Build a CfnDeviceFleet from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDeviceFleet {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnDeviceFleetPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnDeviceFleet(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * A description of the fleet.
   */
  public description?: string;

  /**
   * Name of the device fleet.
   */
  public deviceFleetName: string;

  /**
   * The output configuration for storing sample data collected by the fleet.
   */
  public outputConfig: CfnDeviceFleet.EdgeOutputConfigProperty | cdk.IResolvable;

  /**
   * The Amazon Resource Name (ARN) that has access to AWS Internet of Things (IoT).
   */
  public roleArn: string;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * An array of key-value pairs that contain metadata to help you categorize and organize your device fleets.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnDeviceFleetProps) {
    super(scope, id, {
      "type": CfnDeviceFleet.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "deviceFleetName", this);
    cdk.requireProperty(props, "outputConfig", this);
    cdk.requireProperty(props, "roleArn", this);

    this.description = props.description;
    this.deviceFleetName = props.deviceFleetName;
    this.outputConfig = props.outputConfig;
    this.roleArn = props.roleArn;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::DeviceFleet", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "description": this.description,
      "deviceFleetName": this.deviceFleetName,
      "outputConfig": this.outputConfig,
      "roleArn": this.roleArn,
      "tags": this.tags.renderTags()
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnDeviceFleet.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnDeviceFleetPropsToCloudFormation(props);
  }
}

export namespace CfnDeviceFleet {
  /**
   * The output configuration for storing sample data collected by the fleet.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-devicefleet-edgeoutputconfig.html
   */
  export interface EdgeOutputConfigProperty {
    /**
     * The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume after compilation job.
     *
     * If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-devicefleet-edgeoutputconfig.html#cfn-sagemaker-devicefleet-edgeoutputconfig-kmskeyid
     */
    readonly kmsKeyId?: string;

    /**
     * The Amazon Simple Storage (S3) bucket URI.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-devicefleet-edgeoutputconfig.html#cfn-sagemaker-devicefleet-edgeoutputconfig-s3outputlocation
     */
    readonly s3OutputLocation: string;
  }
}

/**
 * Properties for defining a `CfnDeviceFleet`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-devicefleet.html
 */
export interface CfnDeviceFleetProps {
  /**
   * A description of the fleet.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-devicefleet.html#cfn-sagemaker-devicefleet-description
   */
  readonly description?: string;

  /**
   * Name of the device fleet.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-devicefleet.html#cfn-sagemaker-devicefleet-devicefleetname
   */
  readonly deviceFleetName: string;

  /**
   * The output configuration for storing sample data collected by the fleet.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-devicefleet.html#cfn-sagemaker-devicefleet-outputconfig
   */
  readonly outputConfig: CfnDeviceFleet.EdgeOutputConfigProperty | cdk.IResolvable;

  /**
   * The Amazon Resource Name (ARN) that has access to AWS Internet of Things (IoT).
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-devicefleet.html#cfn-sagemaker-devicefleet-rolearn
   */
  readonly roleArn: string;

  /**
   * An array of key-value pairs that contain metadata to help you categorize and organize your device fleets.
   *
   * Each tag consists of a key and a value, both of which you define.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-devicefleet.html#cfn-sagemaker-devicefleet-tags
   */
  readonly tags?: Array<cdk.CfnTag>;
}

/**
 * Determine whether the given properties match those of a `EdgeOutputConfigProperty`
 *
 * @param properties - the TypeScript properties of a `EdgeOutputConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDeviceFleetEdgeOutputConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("kmsKeyId", cdk.validateString)(properties.kmsKeyId));
  errors.collect(cdk.propertyValidator("s3OutputLocation", cdk.requiredValidator)(properties.s3OutputLocation));
  errors.collect(cdk.propertyValidator("s3OutputLocation", cdk.validateString)(properties.s3OutputLocation));
  return errors.wrap("supplied properties not correct for \"EdgeOutputConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnDeviceFleetEdgeOutputConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDeviceFleetEdgeOutputConfigPropertyValidator(properties).assertSuccess();
  return {
    "KmsKeyId": cdk.stringToCloudFormation(properties.kmsKeyId),
    "S3OutputLocation": cdk.stringToCloudFormation(properties.s3OutputLocation)
  };
}

// @ts-ignore TS6133
function CfnDeviceFleetEdgeOutputConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeviceFleet.EdgeOutputConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeviceFleet.EdgeOutputConfigProperty>();
  ret.addPropertyResult("kmsKeyId", "KmsKeyId", (properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined));
  ret.addPropertyResult("s3OutputLocation", "S3OutputLocation", (properties.S3OutputLocation != null ? cfn_parse.FromCloudFormation.getString(properties.S3OutputLocation) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnDeviceFleetProps`
 *
 * @param properties - the TypeScript properties of a `CfnDeviceFleetProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDeviceFleetPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
  errors.collect(cdk.propertyValidator("deviceFleetName", cdk.requiredValidator)(properties.deviceFleetName));
  errors.collect(cdk.propertyValidator("deviceFleetName", cdk.validateString)(properties.deviceFleetName));
  errors.collect(cdk.propertyValidator("outputConfig", cdk.requiredValidator)(properties.outputConfig));
  errors.collect(cdk.propertyValidator("outputConfig", CfnDeviceFleetEdgeOutputConfigPropertyValidator)(properties.outputConfig));
  errors.collect(cdk.propertyValidator("roleArn", cdk.requiredValidator)(properties.roleArn));
  errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  return errors.wrap("supplied properties not correct for \"CfnDeviceFleetProps\"");
}

// @ts-ignore TS6133
function convertCfnDeviceFleetPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDeviceFleetPropsValidator(properties).assertSuccess();
  return {
    "Description": cdk.stringToCloudFormation(properties.description),
    "DeviceFleetName": cdk.stringToCloudFormation(properties.deviceFleetName),
    "OutputConfig": convertCfnDeviceFleetEdgeOutputConfigPropertyToCloudFormation(properties.outputConfig),
    "RoleArn": cdk.stringToCloudFormation(properties.roleArn),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
  };
}

// @ts-ignore TS6133
function CfnDeviceFleetPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDeviceFleetProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDeviceFleetProps>();
  ret.addPropertyResult("description", "Description", (properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined));
  ret.addPropertyResult("deviceFleetName", "DeviceFleetName", (properties.DeviceFleetName != null ? cfn_parse.FromCloudFormation.getString(properties.DeviceFleetName) : undefined));
  ret.addPropertyResult("outputConfig", "OutputConfig", (properties.OutputConfig != null ? CfnDeviceFleetEdgeOutputConfigPropertyFromCloudFormation(properties.OutputConfig) : undefined));
  ret.addPropertyResult("roleArn", "RoleArn", (properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Creates a `Domain` .
 *
 * A domain consists of an associated Amazon Elastic File System (EFS) volume, a list of authorized users, and a variety of security, application, policy, and Amazon Virtual Private Cloud (VPC) configurations. Users within a domain can share notebook files and other artifacts with each other.
 *
 * *EFS storage*
 *
 * When a domain is created, an EFS volume is created for use by all of the users within the domain. Each user receives a private home directory within the EFS volume for notebooks, Git repositories, and data files.
 *
 * SageMaker uses the AWS Key Management Service ( AWS KMS) to encrypt the EFS volume attached to the domain with an AWS managed key by default. For more control, you can specify a customer managed key. For more information, see [Protect Data at Rest Using Encryption](https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html) .
 *
 * *VPC configuration*
 *
 * All traffic between the domain and the EFS volume is through the specified VPC and subnets. For other traffic, you can specify the `AppNetworkAccessType` parameter. `AppNetworkAccessType` corresponds to the network access type that you choose when you onboard to the domain. The following options are available:
 *
 * - `PublicInternetOnly` - Non-EFS traffic goes through a VPC managed by Amazon SageMaker, which allows internet access. This is the default value.
 * - `VpcOnly` - All traffic is through the specified VPC and subnets. Internet access is disabled by default. To allow internet access, you must specify a NAT gateway.
 *
 * When internet access is disabled, you won't be able to run a Amazon SageMaker Studio notebook or to train or host models unless your VPC has an interface endpoint to the SageMaker API and runtime or a NAT gateway and your security groups allow outbound connections.
 *
 * > NFS traffic over TCP on port 2049 needs to be allowed in both inbound and outbound rules in order to launch a Amazon SageMaker Studio app successfully.
 *
 * For more information, see [Connect Amazon SageMaker Studio Notebooks to Resources in a VPC](https://docs.aws.amazon.com/sagemaker/latest/dg/studio-notebooks-and-internet-access.html) .
 *
 * @cloudformationResource AWS::SageMaker::Domain
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-domain.html
 */
export class CfnDomain extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::Domain";

  /**
   * Build a CfnDomain from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnDomain {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnDomainPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnDomain(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The Amazon Resource Name (ARN) of the Domain, such as `arn:aws:sagemaker:us-west-2:account-id:domain/my-domain-name` .
   *
   * @cloudformationAttribute DomainArn
   */
  public readonly attrDomainArn: string;

  /**
   * The Domain ID.
   *
   * @cloudformationAttribute DomainId
   */
  public readonly attrDomainId: string;

  /**
   * The ID of the Amazon Elastic File System (EFS) managed by this Domain.
   *
   * @cloudformationAttribute HomeEfsFileSystemId
   */
  public readonly attrHomeEfsFileSystemId: string;

  /**
   * The ID of the security group that authorizes traffic between the `RSessionGateway` apps and the `RStudioServerPro` app.
   *
   * @cloudformationAttribute SecurityGroupIdForDomainBoundary
   */
  public readonly attrSecurityGroupIdForDomainBoundary: string;

  /**
   * The ARN of the application managed by SageMaker in IAM Identity Center. This value is only returned for domains created after October 1, 2023.
   *
   * @cloudformationAttribute SingleSignOnApplicationArn
   */
  public readonly attrSingleSignOnApplicationArn: string;

  /**
   * The IAM Identity Center managed application instance ID.
   *
   * @cloudformationAttribute SingleSignOnManagedApplicationInstanceId
   */
  public readonly attrSingleSignOnManagedApplicationInstanceId: string;

  /**
   * The URL for the Domain.
   *
   * @cloudformationAttribute Url
   */
  public readonly attrUrl: string;

  /**
   * Specifies the VPC used for non-EFS traffic. The default value is `PublicInternetOnly` .
   */
  public appNetworkAccessType?: string;

  /**
   * The entity that creates and manages the required security groups for inter-app communication in `VpcOnly` mode.
   */
  public appSecurityGroupManagement?: string;

  /**
   * The mode of authentication that members use to access the Domain.
   */
  public authMode: string;

  /**
   * A collection of settings that apply to spaces created in the Domain.
   */
  public defaultSpaceSettings?: CfnDomain.DefaultSpaceSettingsProperty | cdk.IResolvable;

  /**
   * The default user settings.
   */
  public defaultUserSettings: cdk.IResolvable | CfnDomain.UserSettingsProperty;

  /**
   * The domain name.
   */
  public domainName: string;

  /**
   * A collection of settings that apply to the `SageMaker Domain` .
   */
  public domainSettings?: CfnDomain.DomainSettingsProperty | cdk.IResolvable;

  /**
   * SageMaker uses AWS KMS to encrypt the EFS volume attached to the Domain with an AWS managed customer master key (CMK) by default.
   */
  public kmsKeyId?: string;

  /**
   * The VPC subnets that Studio uses for communication.
   */
  public subnetIds: Array<string>;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * Tags to associated with the Domain.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * The ID of the Amazon Virtual Private Cloud (Amazon VPC) that Studio uses for communication.
   */
  public vpcId: string;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnDomainProps) {
    super(scope, id, {
      "type": CfnDomain.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "authMode", this);
    cdk.requireProperty(props, "defaultUserSettings", this);
    cdk.requireProperty(props, "domainName", this);
    cdk.requireProperty(props, "subnetIds", this);
    cdk.requireProperty(props, "vpcId", this);

    this.attrDomainArn = cdk.Token.asString(this.getAtt("DomainArn", cdk.ResolutionTypeHint.STRING));
    this.attrDomainId = cdk.Token.asString(this.getAtt("DomainId", cdk.ResolutionTypeHint.STRING));
    this.attrHomeEfsFileSystemId = cdk.Token.asString(this.getAtt("HomeEfsFileSystemId", cdk.ResolutionTypeHint.STRING));
    this.attrSecurityGroupIdForDomainBoundary = cdk.Token.asString(this.getAtt("SecurityGroupIdForDomainBoundary", cdk.ResolutionTypeHint.STRING));
    this.attrSingleSignOnApplicationArn = cdk.Token.asString(this.getAtt("SingleSignOnApplicationArn", cdk.ResolutionTypeHint.STRING));
    this.attrSingleSignOnManagedApplicationInstanceId = cdk.Token.asString(this.getAtt("SingleSignOnManagedApplicationInstanceId", cdk.ResolutionTypeHint.STRING));
    this.attrUrl = cdk.Token.asString(this.getAtt("Url", cdk.ResolutionTypeHint.STRING));
    this.appNetworkAccessType = props.appNetworkAccessType;
    this.appSecurityGroupManagement = props.appSecurityGroupManagement;
    this.authMode = props.authMode;
    this.defaultSpaceSettings = props.defaultSpaceSettings;
    this.defaultUserSettings = props.defaultUserSettings;
    this.domainName = props.domainName;
    this.domainSettings = props.domainSettings;
    this.kmsKeyId = props.kmsKeyId;
    this.subnetIds = props.subnetIds;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::Domain", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
    this.vpcId = props.vpcId;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "appNetworkAccessType": this.appNetworkAccessType,
      "appSecurityGroupManagement": this.appSecurityGroupManagement,
      "authMode": this.authMode,
      "defaultSpaceSettings": this.defaultSpaceSettings,
      "defaultUserSettings": this.defaultUserSettings,
      "domainName": this.domainName,
      "domainSettings": this.domainSettings,
      "kmsKeyId": this.kmsKeyId,
      "subnetIds": this.subnetIds,
      "tags": this.tags.renderTags(),
      "vpcId": this.vpcId
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnDomain.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnDomainPropsToCloudFormation(props);
  }
}

export namespace CfnDomain {
  /**
   * A collection of settings that apply to spaces created in the Domain.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-defaultspacesettings.html
   */
  export interface DefaultSpaceSettingsProperty {
    /**
     * The ARN of the execution role for the space.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-defaultspacesettings.html#cfn-sagemaker-domain-defaultspacesettings-executionrole
     */
    readonly executionRole: string;

    /**
     * The JupyterServer app settings.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-defaultspacesettings.html#cfn-sagemaker-domain-defaultspacesettings-jupyterserverappsettings
     */
    readonly jupyterServerAppSettings?: cdk.IResolvable | CfnDomain.JupyterServerAppSettingsProperty;

    /**
     * The KernelGateway app settings.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-defaultspacesettings.html#cfn-sagemaker-domain-defaultspacesettings-kernelgatewayappsettings
     */
    readonly kernelGatewayAppSettings?: cdk.IResolvable | CfnDomain.KernelGatewayAppSettingsProperty;

    /**
     * The security group IDs for the Amazon Virtual Private Cloud that the space uses for communication.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-defaultspacesettings.html#cfn-sagemaker-domain-defaultspacesettings-securitygroups
     */
    readonly securityGroups?: Array<string>;
  }

  /**
   * The KernelGateway app settings.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-kernelgatewayappsettings.html
   */
  export interface KernelGatewayAppSettingsProperty {
    /**
     * A list of custom SageMaker images that are configured to run as a KernelGateway app.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-kernelgatewayappsettings.html#cfn-sagemaker-domain-kernelgatewayappsettings-customimages
     */
    readonly customImages?: Array<CfnDomain.CustomImageProperty | cdk.IResolvable> | cdk.IResolvable;

    /**
     * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
     *
     * > The Amazon SageMaker Studio UI does not use the default instance type value set here. The default instance type set here is used when Apps are created using the AWS Command Line Interface or AWS CloudFormation and the instance type parameter value is not passed.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-kernelgatewayappsettings.html#cfn-sagemaker-domain-kernelgatewayappsettings-defaultresourcespec
     */
    readonly defaultResourceSpec?: cdk.IResolvable | CfnDomain.ResourceSpecProperty;
  }

  /**
   * A custom SageMaker image.
   *
   * For more information, see [Bring your own SageMaker image](https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html) .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-customimage.html
   */
  export interface CustomImageProperty {
    /**
     * The name of the AppImageConfig.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-customimage.html#cfn-sagemaker-domain-customimage-appimageconfigname
     */
    readonly appImageConfigName: string;

    /**
     * The name of the CustomImage.
     *
     * Must be unique to your account.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-customimage.html#cfn-sagemaker-domain-customimage-imagename
     */
    readonly imageName: string;

    /**
     * The version number of the CustomImage.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-customimage.html#cfn-sagemaker-domain-customimage-imageversionnumber
     */
    readonly imageVersionNumber?: number;
  }

  /**
   * Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-resourcespec.html
   */
  export interface ResourceSpecProperty {
    /**
     * The instance type that the image version runs on.
     *
     * > *JupyterServer apps* only support the `system` value.
     * >
     * > For *KernelGateway apps* , the `system` value is translated to `ml.t3.medium` . KernelGateway apps also support all other values for available instance types.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-resourcespec.html#cfn-sagemaker-domain-resourcespec-instancetype
     */
    readonly instanceType?: string;

    /**
     * The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-resourcespec.html#cfn-sagemaker-domain-resourcespec-lifecycleconfigarn
     */
    readonly lifecycleConfigArn?: string;

    /**
     * The ARN of the SageMaker image that the image version belongs to.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-resourcespec.html#cfn-sagemaker-domain-resourcespec-sagemakerimagearn
     */
    readonly sageMakerImageArn?: string;

    /**
     * The ARN of the image version created on the instance.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-resourcespec.html#cfn-sagemaker-domain-resourcespec-sagemakerimageversionarn
     */
    readonly sageMakerImageVersionArn?: string;
  }

  /**
   * The JupyterServer app settings.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-jupyterserverappsettings.html
   */
  export interface JupyterServerAppSettingsProperty {
    /**
     * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterServer app.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-jupyterserverappsettings.html#cfn-sagemaker-domain-jupyterserverappsettings-defaultresourcespec
     */
    readonly defaultResourceSpec?: cdk.IResolvable | CfnDomain.ResourceSpecProperty;
  }

  /**
   * A collection of settings that apply to users of Amazon SageMaker Studio.
   *
   * These settings are specified when the [CreateUserProfile](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateUserProfile.html) API is called, and as `DefaultUserSettings` when the [CreateDomain](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateDomain.html) API is called.
   *
   * `SecurityGroups` is aggregated when specified in both calls. For all other settings in `UserSettings` , the values specified in `CreateUserProfile` take precedence over those specified in `CreateDomain` .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-usersettings.html
   */
  export interface UserSettingsProperty {
    /**
     * The Code Editor application settings.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-usersettings.html#cfn-sagemaker-domain-usersettings-codeeditorappsettings
     */
    readonly codeEditorAppSettings?: CfnDomain.CodeEditorAppSettingsProperty | cdk.IResolvable;

    /**
     * The settings for assigning a custom file system to a user profile.
     *
     * Permitted users can access this file system in Amazon SageMaker Studio.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-usersettings.html#cfn-sagemaker-domain-usersettings-customfilesystemconfigs
     */
    readonly customFileSystemConfigs?: Array<CfnDomain.CustomFileSystemConfigProperty | cdk.IResolvable> | cdk.IResolvable;

    /**
     * Details about the POSIX identity that is used for file system operations.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-usersettings.html#cfn-sagemaker-domain-usersettings-customposixuserconfig
     */
    readonly customPosixUserConfig?: CfnDomain.CustomPosixUserConfigProperty | cdk.IResolvable;

    /**
     * The default experience that the user is directed to when accessing the domain. The supported values are:.
     *
     * - `studio::` : Indicates that Studio is the default experience. This value can only be passed if `StudioWebPortal` is set to `ENABLED` .
     * - `app:JupyterServer:` : Indicates that Studio Classic is the default experience.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-usersettings.html#cfn-sagemaker-domain-usersettings-defaultlandinguri
     */
    readonly defaultLandingUri?: string;

    /**
     * The execution role for the user.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-usersettings.html#cfn-sagemaker-domain-usersettings-executionrole
     */
    readonly executionRole: string;

    /**
     * The settings for the JupyterLab application.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-usersettings.html#cfn-sagemaker-domain-usersettings-jupyterlabappsettings
     */
    readonly jupyterLabAppSettings?: cdk.IResolvable | CfnDomain.JupyterLabAppSettingsProperty;

    /**
     * The Jupyter server's app settings.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-usersettings.html#cfn-sagemaker-domain-usersettings-jupyterserverappsettings
     */
    readonly jupyterServerAppSettings?: cdk.IResolvable | CfnDomain.JupyterServerAppSettingsProperty;

    /**
     * The kernel gateway app settings.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-usersettings.html#cfn-sagemaker-domain-usersettings-kernelgatewayappsettings
     */
    readonly kernelGatewayAppSettings?: cdk.IResolvable | CfnDomain.KernelGatewayAppSettingsProperty;

    /**
     * A collection of settings that configure the `RSessionGateway` app.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-usersettings.html#cfn-sagemaker-domain-usersettings-rsessionappsettings
     */
    readonly rSessionAppSettings?: cdk.IResolvable | CfnDomain.RSessionAppSettingsProperty;

    /**
     * A collection of settings that configure user interaction with the `RStudioServerPro` app.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-usersettings.html#cfn-sagemaker-domain-usersettings-rstudioserverproappsettings
     */
    readonly rStudioServerProAppSettings?: cdk.IResolvable | CfnDomain.RStudioServerProAppSettingsProperty;

    /**
     * The security groups for the Amazon Virtual Private Cloud (VPC) that the domain uses for communication.
     *
     * Optional when the `CreateDomain.AppNetworkAccessType` parameter is set to `PublicInternetOnly` .
     *
     * Required when the `CreateDomain.AppNetworkAccessType` parameter is set to `VpcOnly` , unless specified as part of the `DefaultUserSettings` for the domain.
     *
     * Amazon SageMaker adds a security group to allow NFS traffic from Amazon SageMaker Studio. Therefore, the number of security groups that you can specify is one less than the maximum number shown.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-usersettings.html#cfn-sagemaker-domain-usersettings-securitygroups
     */
    readonly securityGroups?: Array<string>;

    /**
     * Specifies options for sharing Amazon SageMaker Studio notebooks.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-usersettings.html#cfn-sagemaker-domain-usersettings-sharingsettings
     */
    readonly sharingSettings?: cdk.IResolvable | CfnDomain.SharingSettingsProperty;

    /**
     * The storage settings for a private space.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-usersettings.html#cfn-sagemaker-domain-usersettings-spacestoragesettings
     */
    readonly spaceStorageSettings?: CfnDomain.DefaultSpaceStorageSettingsProperty | cdk.IResolvable;

    /**
     * Whether the user can access Studio.
     *
     * If this value is set to `DISABLED` , the user cannot access Studio, even if that is the default experience for the domain.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-usersettings.html#cfn-sagemaker-domain-usersettings-studiowebportal
     */
    readonly studioWebPortal?: string;
  }

  /**
   * A collection of settings that configure user interaction with the `RStudioServerPro` app.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-rstudioserverproappsettings.html
   */
  export interface RStudioServerProAppSettingsProperty {
    /**
     * Indicates whether the current user has access to the `RStudioServerPro` app.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-rstudioserverproappsettings.html#cfn-sagemaker-domain-rstudioserverproappsettings-accessstatus
     */
    readonly accessStatus?: string;

    /**
     * The level of permissions that the user has within the `RStudioServerPro` app.
     *
     * This value defaults to `User`. The `Admin` value allows the user access to the RStudio Administrative Dashboard.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-rstudioserverproappsettings.html#cfn-sagemaker-domain-rstudioserverproappsettings-usergroup
     */
    readonly userGroup?: string;
  }

  /**
   * A collection of settings that apply to an `RSessionGateway` app.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-rsessionappsettings.html
   */
  export interface RSessionAppSettingsProperty {
    /**
     * A list of custom SageMaker images that are configured to run as a RSession app.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-rsessionappsettings.html#cfn-sagemaker-domain-rsessionappsettings-customimages
     */
    readonly customImages?: Array<CfnDomain.CustomImageProperty | cdk.IResolvable> | cdk.IResolvable;

    /**
     * Specifies the ARNs of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-rsessionappsettings.html#cfn-sagemaker-domain-rsessionappsettings-defaultresourcespec
     */
    readonly defaultResourceSpec?: cdk.IResolvable | CfnDomain.ResourceSpecProperty;
  }

  /**
   * Specifies options when sharing an Amazon SageMaker Studio notebook.
   *
   * These settings are specified as part of `DefaultUserSettings` when the [CreateDomain](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateDomain.html) API is called, and as part of `UserSettings` when the [CreateUserProfile](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateUserProfile.html) API is called.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-sharingsettings.html
   */
  export interface SharingSettingsProperty {
    /**
     * Whether to include the notebook cell output when sharing the notebook.
     *
     * The default is `Disabled` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-sharingsettings.html#cfn-sagemaker-domain-sharingsettings-notebookoutputoption
     */
    readonly notebookOutputOption?: string;

    /**
     * When `NotebookOutputOption` is `Allowed` , the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-sharingsettings.html#cfn-sagemaker-domain-sharingsettings-s3kmskeyid
     */
    readonly s3KmsKeyId?: string;

    /**
     * When `NotebookOutputOption` is `Allowed` , the Amazon S3 bucket used to store the shared notebook snapshots.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-sharingsettings.html#cfn-sagemaker-domain-sharingsettings-s3outputpath
     */
    readonly s3OutputPath?: string;
  }

  /**
   * The settings for the JupyterLab application.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-jupyterlabappsettings.html
   */
  export interface JupyterLabAppSettingsProperty {
    /**
     * A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterLab application.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-jupyterlabappsettings.html#cfn-sagemaker-domain-jupyterlabappsettings-coderepositories
     */
    readonly codeRepositories?: Array<CfnDomain.CodeRepositoryProperty | cdk.IResolvable> | cdk.IResolvable;

    /**
     * A list of custom SageMaker images that are configured to run as a JupyterLab app.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-jupyterlabappsettings.html#cfn-sagemaker-domain-jupyterlabappsettings-customimages
     */
    readonly customImages?: Array<CfnDomain.CustomImageProperty | cdk.IResolvable> | cdk.IResolvable;

    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-jupyterlabappsettings.html#cfn-sagemaker-domain-jupyterlabappsettings-defaultresourcespec
     */
    readonly defaultResourceSpec?: cdk.IResolvable | CfnDomain.ResourceSpecProperty;

    /**
     * The Amazon Resource Name (ARN) of the lifecycle configurations attached to the user profile or domain.
     *
     * To remove a lifecycle config, you must set `LifecycleConfigArns` to an empty list.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-jupyterlabappsettings.html#cfn-sagemaker-domain-jupyterlabappsettings-lifecycleconfigarns
     */
    readonly lifecycleConfigArns?: Array<string>;
  }

  /**
   * A Git repository that SageMaker automatically displays to users for cloning in the JupyterServer application.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-coderepository.html
   */
  export interface CodeRepositoryProperty {
    /**
     * The URL of the Git repository.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-coderepository.html#cfn-sagemaker-domain-coderepository-repositoryurl
     */
    readonly repositoryUrl: string;
  }

  /**
   * The default storage settings for a private space.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-defaultspacestoragesettings.html
   */
  export interface DefaultSpaceStorageSettingsProperty {
    /**
     * The default EBS storage settings for a private space.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-defaultspacestoragesettings.html#cfn-sagemaker-domain-defaultspacestoragesettings-defaultebsstoragesettings
     */
    readonly defaultEbsStorageSettings?: CfnDomain.DefaultEbsStorageSettingsProperty | cdk.IResolvable;
  }

  /**
   * A collection of default EBS storage settings that applies to private spaces created within a domain or user profile.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-defaultebsstoragesettings.html
   */
  export interface DefaultEbsStorageSettingsProperty {
    /**
     * The default size of the EBS storage volume for a private space.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-defaultebsstoragesettings.html#cfn-sagemaker-domain-defaultebsstoragesettings-defaultebsvolumesizeingb
     */
    readonly defaultEbsVolumeSizeInGb: number;

    /**
     * The maximum size of the EBS storage volume for a private space.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-defaultebsstoragesettings.html#cfn-sagemaker-domain-defaultebsstoragesettings-maximumebsvolumesizeingb
     */
    readonly maximumEbsVolumeSizeInGb: number;
  }

  /**
   * The Code Editor application settings.
   *
   * For more information about Code Editor, see [Get started with Code Editor in Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/code-editor.html) .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-codeeditorappsettings.html
   */
  export interface CodeEditorAppSettingsProperty {
    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-codeeditorappsettings.html#cfn-sagemaker-domain-codeeditorappsettings-defaultresourcespec
     */
    readonly defaultResourceSpec?: cdk.IResolvable | CfnDomain.ResourceSpecProperty;

    /**
     * The Amazon Resource Name (ARN) of the Code Editor application lifecycle configuration.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-codeeditorappsettings.html#cfn-sagemaker-domain-codeeditorappsettings-lifecycleconfigarns
     */
    readonly lifecycleConfigArns?: Array<string>;
  }

  /**
   * Details about the POSIX identity that is used for file system operations.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-customposixuserconfig.html
   */
  export interface CustomPosixUserConfigProperty {
    /**
     * The POSIX group ID.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-customposixuserconfig.html#cfn-sagemaker-domain-customposixuserconfig-gid
     */
    readonly gid: number;

    /**
     * The POSIX user ID.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-customposixuserconfig.html#cfn-sagemaker-domain-customposixuserconfig-uid
     */
    readonly uid: number;
  }

  /**
   * The settings for assigning a custom file system to a user profile or space for an Amazon SageMaker Domain.
   *
   * Permitted users can access this file system in Amazon SageMaker Studio.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-customfilesystemconfig.html
   */
  export interface CustomFileSystemConfigProperty {
    /**
     * The settings for a custom Amazon EFS file system.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-customfilesystemconfig.html#cfn-sagemaker-domain-customfilesystemconfig-efsfilesystemconfig
     */
    readonly efsFileSystemConfig?: CfnDomain.EFSFileSystemConfigProperty | cdk.IResolvable;
  }

  /**
   * The settings for assigning a custom Amazon EFS file system to a user profile or space for an Amazon SageMaker Domain.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-efsfilesystemconfig.html
   */
  export interface EFSFileSystemConfigProperty {
    /**
     * The ID of your Amazon EFS file system.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-efsfilesystemconfig.html#cfn-sagemaker-domain-efsfilesystemconfig-filesystemid
     */
    readonly fileSystemId: string;

    /**
     * The path to the file system directory that is accessible in Amazon SageMaker Studio.
     *
     * Permitted users can access only this directory and below.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-efsfilesystemconfig.html#cfn-sagemaker-domain-efsfilesystemconfig-filesystempath
     */
    readonly fileSystemPath?: string;
  }

  /**
   * A collection of settings that apply to the `SageMaker Domain` .
   *
   * These settings are specified through the `CreateDomain` API call.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-domainsettings.html
   */
  export interface DomainSettingsProperty {
    /**
     * A collection of settings that configure the `RStudioServerPro` Domain-level app.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-domainsettings.html#cfn-sagemaker-domain-domainsettings-rstudioserverprodomainsettings
     */
    readonly rStudioServerProDomainSettings?: cdk.IResolvable | CfnDomain.RStudioServerProDomainSettingsProperty;

    /**
     * The security groups for the Amazon Virtual Private Cloud that the `Domain` uses for communication between Domain-level apps and user apps.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-domainsettings.html#cfn-sagemaker-domain-domainsettings-securitygroupids
     */
    readonly securityGroupIds?: Array<string>;
  }

  /**
   * A collection of settings that configure the `RStudioServerPro` Domain-level app.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-rstudioserverprodomainsettings.html
   */
  export interface RStudioServerProDomainSettingsProperty {
    /**
     * A collection that defines the default `InstanceType` , `SageMakerImageArn` , and `SageMakerImageVersionArn` for the Domain.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-rstudioserverprodomainsettings.html#cfn-sagemaker-domain-rstudioserverprodomainsettings-defaultresourcespec
     */
    readonly defaultResourceSpec?: cdk.IResolvable | CfnDomain.ResourceSpecProperty;

    /**
     * The ARN of the execution role for the `RStudioServerPro` Domain-level app.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-rstudioserverprodomainsettings.html#cfn-sagemaker-domain-rstudioserverprodomainsettings-domainexecutionrolearn
     */
    readonly domainExecutionRoleArn: string;

    /**
     * A URL pointing to an RStudio Connect server.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-rstudioserverprodomainsettings.html#cfn-sagemaker-domain-rstudioserverprodomainsettings-rstudioconnecturl
     */
    readonly rStudioConnectUrl?: string;

    /**
     * A URL pointing to an RStudio Package Manager server.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-rstudioserverprodomainsettings.html#cfn-sagemaker-domain-rstudioserverprodomainsettings-rstudiopackagemanagerurl
     */
    readonly rStudioPackageManagerUrl?: string;
  }
}

/**
 * Properties for defining a `CfnDomain`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-domain.html
 */
export interface CfnDomainProps {
  /**
   * Specifies the VPC used for non-EFS traffic. The default value is `PublicInternetOnly` .
   *
   * - `PublicInternetOnly` - Non-EFS traffic is through a VPC managed by Amazon SageMaker , which allows direct internet access
   * - `VpcOnly` - All Studio traffic is through the specified VPC and subnets
   *
   * *Valid Values* : `PublicInternetOnly | VpcOnly`
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-domain.html#cfn-sagemaker-domain-appnetworkaccesstype
   */
  readonly appNetworkAccessType?: string;

  /**
   * The entity that creates and manages the required security groups for inter-app communication in `VpcOnly` mode.
   *
   * Required when `CreateDomain.AppNetworkAccessType` is `VpcOnly` and `DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn` is provided. If setting up the domain for use with RStudio, this value must be set to `Service` .
   *
   * *Allowed Values* : `Service` | `Customer`
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-domain.html#cfn-sagemaker-domain-appsecuritygroupmanagement
   */
  readonly appSecurityGroupManagement?: string;

  /**
   * The mode of authentication that members use to access the Domain.
   *
   * *Valid Values* : `SSO | IAM`
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-domain.html#cfn-sagemaker-domain-authmode
   */
  readonly authMode: string;

  /**
   * A collection of settings that apply to spaces created in the Domain.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-domain.html#cfn-sagemaker-domain-defaultspacesettings
   */
  readonly defaultSpaceSettings?: CfnDomain.DefaultSpaceSettingsProperty | cdk.IResolvable;

  /**
   * The default user settings.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-domain.html#cfn-sagemaker-domain-defaultusersettings
   */
  readonly defaultUserSettings: cdk.IResolvable | CfnDomain.UserSettingsProperty;

  /**
   * The domain name.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-domain.html#cfn-sagemaker-domain-domainname
   */
  readonly domainName: string;

  /**
   * A collection of settings that apply to the `SageMaker Domain` .
   *
   * These settings are specified through the `CreateDomain` API call.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-domain.html#cfn-sagemaker-domain-domainsettings
   */
  readonly domainSettings?: CfnDomain.DomainSettingsProperty | cdk.IResolvable;

  /**
   * SageMaker uses AWS KMS to encrypt the EFS volume attached to the Domain with an AWS managed customer master key (CMK) by default.
   *
   * For more control, specify a customer managed CMK.
   *
   * *Length Constraints* : Maximum length of 2048.
   *
   * *Pattern* : `.*`
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-domain.html#cfn-sagemaker-domain-kmskeyid
   */
  readonly kmsKeyId?: string;

  /**
   * The VPC subnets that Studio uses for communication.
   *
   * *Length Constraints* : Maximum length of 32.
   *
   * *Array members* : Minimum number of 1 item. Maximum number of 16 items.
   *
   * *Pattern* : `[-0-9a-zA-Z]+`
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-domain.html#cfn-sagemaker-domain-subnetids
   */
  readonly subnetIds: Array<string>;

  /**
   * Tags to associated with the Domain.
   *
   * Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags are searchable using the Search API.
   *
   * Tags that you specify for the Domain are also added to all apps that are launched in the Domain.
   *
   * *Array members* : Minimum number of 0 items. Maximum number of 50 items.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-domain.html#cfn-sagemaker-domain-tags
   */
  readonly tags?: Array<cdk.CfnTag>;

  /**
   * The ID of the Amazon Virtual Private Cloud (Amazon VPC) that Studio uses for communication.
   *
   * *Length Constraints* : Maximum length of 32.
   *
   * *Pattern* : `[-0-9a-zA-Z]+`
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-domain.html#cfn-sagemaker-domain-vpcid
   */
  readonly vpcId: string;
}

/**
 * Determine whether the given properties match those of a `CustomImageProperty`
 *
 * @param properties - the TypeScript properties of a `CustomImageProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainCustomImagePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("appImageConfigName", cdk.requiredValidator)(properties.appImageConfigName));
  errors.collect(cdk.propertyValidator("appImageConfigName", cdk.validateString)(properties.appImageConfigName));
  errors.collect(cdk.propertyValidator("imageName", cdk.requiredValidator)(properties.imageName));
  errors.collect(cdk.propertyValidator("imageName", cdk.validateString)(properties.imageName));
  errors.collect(cdk.propertyValidator("imageVersionNumber", cdk.validateNumber)(properties.imageVersionNumber));
  return errors.wrap("supplied properties not correct for \"CustomImageProperty\"");
}

// @ts-ignore TS6133
function convertCfnDomainCustomImagePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainCustomImagePropertyValidator(properties).assertSuccess();
  return {
    "AppImageConfigName": cdk.stringToCloudFormation(properties.appImageConfigName),
    "ImageName": cdk.stringToCloudFormation(properties.imageName),
    "ImageVersionNumber": cdk.numberToCloudFormation(properties.imageVersionNumber)
  };
}

// @ts-ignore TS6133
function CfnDomainCustomImagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.CustomImageProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.CustomImageProperty>();
  ret.addPropertyResult("appImageConfigName", "AppImageConfigName", (properties.AppImageConfigName != null ? cfn_parse.FromCloudFormation.getString(properties.AppImageConfigName) : undefined));
  ret.addPropertyResult("imageName", "ImageName", (properties.ImageName != null ? cfn_parse.FromCloudFormation.getString(properties.ImageName) : undefined));
  ret.addPropertyResult("imageVersionNumber", "ImageVersionNumber", (properties.ImageVersionNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.ImageVersionNumber) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ResourceSpecProperty`
 *
 * @param properties - the TypeScript properties of a `ResourceSpecProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainResourceSpecPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
  errors.collect(cdk.propertyValidator("lifecycleConfigArn", cdk.validateString)(properties.lifecycleConfigArn));
  errors.collect(cdk.propertyValidator("sageMakerImageArn", cdk.validateString)(properties.sageMakerImageArn));
  errors.collect(cdk.propertyValidator("sageMakerImageVersionArn", cdk.validateString)(properties.sageMakerImageVersionArn));
  return errors.wrap("supplied properties not correct for \"ResourceSpecProperty\"");
}

// @ts-ignore TS6133
function convertCfnDomainResourceSpecPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainResourceSpecPropertyValidator(properties).assertSuccess();
  return {
    "InstanceType": cdk.stringToCloudFormation(properties.instanceType),
    "LifecycleConfigArn": cdk.stringToCloudFormation(properties.lifecycleConfigArn),
    "SageMakerImageArn": cdk.stringToCloudFormation(properties.sageMakerImageArn),
    "SageMakerImageVersionArn": cdk.stringToCloudFormation(properties.sageMakerImageVersionArn)
  };
}

// @ts-ignore TS6133
function CfnDomainResourceSpecPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnDomain.ResourceSpecProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.ResourceSpecProperty>();
  ret.addPropertyResult("instanceType", "InstanceType", (properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined));
  ret.addPropertyResult("lifecycleConfigArn", "LifecycleConfigArn", (properties.LifecycleConfigArn != null ? cfn_parse.FromCloudFormation.getString(properties.LifecycleConfigArn) : undefined));
  ret.addPropertyResult("sageMakerImageArn", "SageMakerImageArn", (properties.SageMakerImageArn != null ? cfn_parse.FromCloudFormation.getString(properties.SageMakerImageArn) : undefined));
  ret.addPropertyResult("sageMakerImageVersionArn", "SageMakerImageVersionArn", (properties.SageMakerImageVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.SageMakerImageVersionArn) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `KernelGatewayAppSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `KernelGatewayAppSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainKernelGatewayAppSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("customImages", cdk.listValidator(CfnDomainCustomImagePropertyValidator))(properties.customImages));
  errors.collect(cdk.propertyValidator("defaultResourceSpec", CfnDomainResourceSpecPropertyValidator)(properties.defaultResourceSpec));
  return errors.wrap("supplied properties not correct for \"KernelGatewayAppSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnDomainKernelGatewayAppSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainKernelGatewayAppSettingsPropertyValidator(properties).assertSuccess();
  return {
    "CustomImages": cdk.listMapper(convertCfnDomainCustomImagePropertyToCloudFormation)(properties.customImages),
    "DefaultResourceSpec": convertCfnDomainResourceSpecPropertyToCloudFormation(properties.defaultResourceSpec)
  };
}

// @ts-ignore TS6133
function CfnDomainKernelGatewayAppSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnDomain.KernelGatewayAppSettingsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.KernelGatewayAppSettingsProperty>();
  ret.addPropertyResult("customImages", "CustomImages", (properties.CustomImages != null ? cfn_parse.FromCloudFormation.getArray(CfnDomainCustomImagePropertyFromCloudFormation)(properties.CustomImages) : undefined));
  ret.addPropertyResult("defaultResourceSpec", "DefaultResourceSpec", (properties.DefaultResourceSpec != null ? CfnDomainResourceSpecPropertyFromCloudFormation(properties.DefaultResourceSpec) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `JupyterServerAppSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `JupyterServerAppSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainJupyterServerAppSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("defaultResourceSpec", CfnDomainResourceSpecPropertyValidator)(properties.defaultResourceSpec));
  return errors.wrap("supplied properties not correct for \"JupyterServerAppSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnDomainJupyterServerAppSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainJupyterServerAppSettingsPropertyValidator(properties).assertSuccess();
  return {
    "DefaultResourceSpec": convertCfnDomainResourceSpecPropertyToCloudFormation(properties.defaultResourceSpec)
  };
}

// @ts-ignore TS6133
function CfnDomainJupyterServerAppSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnDomain.JupyterServerAppSettingsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.JupyterServerAppSettingsProperty>();
  ret.addPropertyResult("defaultResourceSpec", "DefaultResourceSpec", (properties.DefaultResourceSpec != null ? CfnDomainResourceSpecPropertyFromCloudFormation(properties.DefaultResourceSpec) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DefaultSpaceSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `DefaultSpaceSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainDefaultSpaceSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("executionRole", cdk.requiredValidator)(properties.executionRole));
  errors.collect(cdk.propertyValidator("executionRole", cdk.validateString)(properties.executionRole));
  errors.collect(cdk.propertyValidator("jupyterServerAppSettings", CfnDomainJupyterServerAppSettingsPropertyValidator)(properties.jupyterServerAppSettings));
  errors.collect(cdk.propertyValidator("kernelGatewayAppSettings", CfnDomainKernelGatewayAppSettingsPropertyValidator)(properties.kernelGatewayAppSettings));
  errors.collect(cdk.propertyValidator("securityGroups", cdk.listValidator(cdk.validateString))(properties.securityGroups));
  return errors.wrap("supplied properties not correct for \"DefaultSpaceSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnDomainDefaultSpaceSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainDefaultSpaceSettingsPropertyValidator(properties).assertSuccess();
  return {
    "ExecutionRole": cdk.stringToCloudFormation(properties.executionRole),
    "JupyterServerAppSettings": convertCfnDomainJupyterServerAppSettingsPropertyToCloudFormation(properties.jupyterServerAppSettings),
    "KernelGatewayAppSettings": convertCfnDomainKernelGatewayAppSettingsPropertyToCloudFormation(properties.kernelGatewayAppSettings),
    "SecurityGroups": cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroups)
  };
}

// @ts-ignore TS6133
function CfnDomainDefaultSpaceSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.DefaultSpaceSettingsProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.DefaultSpaceSettingsProperty>();
  ret.addPropertyResult("executionRole", "ExecutionRole", (properties.ExecutionRole != null ? cfn_parse.FromCloudFormation.getString(properties.ExecutionRole) : undefined));
  ret.addPropertyResult("jupyterServerAppSettings", "JupyterServerAppSettings", (properties.JupyterServerAppSettings != null ? CfnDomainJupyterServerAppSettingsPropertyFromCloudFormation(properties.JupyterServerAppSettings) : undefined));
  ret.addPropertyResult("kernelGatewayAppSettings", "KernelGatewayAppSettings", (properties.KernelGatewayAppSettings != null ? CfnDomainKernelGatewayAppSettingsPropertyFromCloudFormation(properties.KernelGatewayAppSettings) : undefined));
  ret.addPropertyResult("securityGroups", "SecurityGroups", (properties.SecurityGroups != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SecurityGroups) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `RStudioServerProAppSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `RStudioServerProAppSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainRStudioServerProAppSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("accessStatus", cdk.validateString)(properties.accessStatus));
  errors.collect(cdk.propertyValidator("userGroup", cdk.validateString)(properties.userGroup));
  return errors.wrap("supplied properties not correct for \"RStudioServerProAppSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnDomainRStudioServerProAppSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainRStudioServerProAppSettingsPropertyValidator(properties).assertSuccess();
  return {
    "AccessStatus": cdk.stringToCloudFormation(properties.accessStatus),
    "UserGroup": cdk.stringToCloudFormation(properties.userGroup)
  };
}

// @ts-ignore TS6133
function CfnDomainRStudioServerProAppSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnDomain.RStudioServerProAppSettingsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.RStudioServerProAppSettingsProperty>();
  ret.addPropertyResult("accessStatus", "AccessStatus", (properties.AccessStatus != null ? cfn_parse.FromCloudFormation.getString(properties.AccessStatus) : undefined));
  ret.addPropertyResult("userGroup", "UserGroup", (properties.UserGroup != null ? cfn_parse.FromCloudFormation.getString(properties.UserGroup) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `RSessionAppSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `RSessionAppSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainRSessionAppSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("customImages", cdk.listValidator(CfnDomainCustomImagePropertyValidator))(properties.customImages));
  errors.collect(cdk.propertyValidator("defaultResourceSpec", CfnDomainResourceSpecPropertyValidator)(properties.defaultResourceSpec));
  return errors.wrap("supplied properties not correct for \"RSessionAppSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnDomainRSessionAppSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainRSessionAppSettingsPropertyValidator(properties).assertSuccess();
  return {
    "CustomImages": cdk.listMapper(convertCfnDomainCustomImagePropertyToCloudFormation)(properties.customImages),
    "DefaultResourceSpec": convertCfnDomainResourceSpecPropertyToCloudFormation(properties.defaultResourceSpec)
  };
}

// @ts-ignore TS6133
function CfnDomainRSessionAppSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnDomain.RSessionAppSettingsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.RSessionAppSettingsProperty>();
  ret.addPropertyResult("customImages", "CustomImages", (properties.CustomImages != null ? cfn_parse.FromCloudFormation.getArray(CfnDomainCustomImagePropertyFromCloudFormation)(properties.CustomImages) : undefined));
  ret.addPropertyResult("defaultResourceSpec", "DefaultResourceSpec", (properties.DefaultResourceSpec != null ? CfnDomainResourceSpecPropertyFromCloudFormation(properties.DefaultResourceSpec) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `SharingSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `SharingSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainSharingSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("notebookOutputOption", cdk.validateString)(properties.notebookOutputOption));
  errors.collect(cdk.propertyValidator("s3KmsKeyId", cdk.validateString)(properties.s3KmsKeyId));
  errors.collect(cdk.propertyValidator("s3OutputPath", cdk.validateString)(properties.s3OutputPath));
  return errors.wrap("supplied properties not correct for \"SharingSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnDomainSharingSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainSharingSettingsPropertyValidator(properties).assertSuccess();
  return {
    "NotebookOutputOption": cdk.stringToCloudFormation(properties.notebookOutputOption),
    "S3KmsKeyId": cdk.stringToCloudFormation(properties.s3KmsKeyId),
    "S3OutputPath": cdk.stringToCloudFormation(properties.s3OutputPath)
  };
}

// @ts-ignore TS6133
function CfnDomainSharingSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnDomain.SharingSettingsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.SharingSettingsProperty>();
  ret.addPropertyResult("notebookOutputOption", "NotebookOutputOption", (properties.NotebookOutputOption != null ? cfn_parse.FromCloudFormation.getString(properties.NotebookOutputOption) : undefined));
  ret.addPropertyResult("s3KmsKeyId", "S3KmsKeyId", (properties.S3KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.S3KmsKeyId) : undefined));
  ret.addPropertyResult("s3OutputPath", "S3OutputPath", (properties.S3OutputPath != null ? cfn_parse.FromCloudFormation.getString(properties.S3OutputPath) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CodeRepositoryProperty`
 *
 * @param properties - the TypeScript properties of a `CodeRepositoryProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainCodeRepositoryPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("repositoryUrl", cdk.requiredValidator)(properties.repositoryUrl));
  errors.collect(cdk.propertyValidator("repositoryUrl", cdk.validateString)(properties.repositoryUrl));
  return errors.wrap("supplied properties not correct for \"CodeRepositoryProperty\"");
}

// @ts-ignore TS6133
function convertCfnDomainCodeRepositoryPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainCodeRepositoryPropertyValidator(properties).assertSuccess();
  return {
    "RepositoryUrl": cdk.stringToCloudFormation(properties.repositoryUrl)
  };
}

// @ts-ignore TS6133
function CfnDomainCodeRepositoryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.CodeRepositoryProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.CodeRepositoryProperty>();
  ret.addPropertyResult("repositoryUrl", "RepositoryUrl", (properties.RepositoryUrl != null ? cfn_parse.FromCloudFormation.getString(properties.RepositoryUrl) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `JupyterLabAppSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `JupyterLabAppSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainJupyterLabAppSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("codeRepositories", cdk.listValidator(CfnDomainCodeRepositoryPropertyValidator))(properties.codeRepositories));
  errors.collect(cdk.propertyValidator("customImages", cdk.listValidator(CfnDomainCustomImagePropertyValidator))(properties.customImages));
  errors.collect(cdk.propertyValidator("defaultResourceSpec", CfnDomainResourceSpecPropertyValidator)(properties.defaultResourceSpec));
  errors.collect(cdk.propertyValidator("lifecycleConfigArns", cdk.listValidator(cdk.validateString))(properties.lifecycleConfigArns));
  return errors.wrap("supplied properties not correct for \"JupyterLabAppSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnDomainJupyterLabAppSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainJupyterLabAppSettingsPropertyValidator(properties).assertSuccess();
  return {
    "CodeRepositories": cdk.listMapper(convertCfnDomainCodeRepositoryPropertyToCloudFormation)(properties.codeRepositories),
    "CustomImages": cdk.listMapper(convertCfnDomainCustomImagePropertyToCloudFormation)(properties.customImages),
    "DefaultResourceSpec": convertCfnDomainResourceSpecPropertyToCloudFormation(properties.defaultResourceSpec),
    "LifecycleConfigArns": cdk.listMapper(cdk.stringToCloudFormation)(properties.lifecycleConfigArns)
  };
}

// @ts-ignore TS6133
function CfnDomainJupyterLabAppSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnDomain.JupyterLabAppSettingsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.JupyterLabAppSettingsProperty>();
  ret.addPropertyResult("codeRepositories", "CodeRepositories", (properties.CodeRepositories != null ? cfn_parse.FromCloudFormation.getArray(CfnDomainCodeRepositoryPropertyFromCloudFormation)(properties.CodeRepositories) : undefined));
  ret.addPropertyResult("customImages", "CustomImages", (properties.CustomImages != null ? cfn_parse.FromCloudFormation.getArray(CfnDomainCustomImagePropertyFromCloudFormation)(properties.CustomImages) : undefined));
  ret.addPropertyResult("defaultResourceSpec", "DefaultResourceSpec", (properties.DefaultResourceSpec != null ? CfnDomainResourceSpecPropertyFromCloudFormation(properties.DefaultResourceSpec) : undefined));
  ret.addPropertyResult("lifecycleConfigArns", "LifecycleConfigArns", (properties.LifecycleConfigArns != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.LifecycleConfigArns) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DefaultEbsStorageSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `DefaultEbsStorageSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainDefaultEbsStorageSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("defaultEbsVolumeSizeInGb", cdk.requiredValidator)(properties.defaultEbsVolumeSizeInGb));
  errors.collect(cdk.propertyValidator("defaultEbsVolumeSizeInGb", cdk.validateNumber)(properties.defaultEbsVolumeSizeInGb));
  errors.collect(cdk.propertyValidator("maximumEbsVolumeSizeInGb", cdk.requiredValidator)(properties.maximumEbsVolumeSizeInGb));
  errors.collect(cdk.propertyValidator("maximumEbsVolumeSizeInGb", cdk.validateNumber)(properties.maximumEbsVolumeSizeInGb));
  return errors.wrap("supplied properties not correct for \"DefaultEbsStorageSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnDomainDefaultEbsStorageSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainDefaultEbsStorageSettingsPropertyValidator(properties).assertSuccess();
  return {
    "DefaultEbsVolumeSizeInGb": cdk.numberToCloudFormation(properties.defaultEbsVolumeSizeInGb),
    "MaximumEbsVolumeSizeInGb": cdk.numberToCloudFormation(properties.maximumEbsVolumeSizeInGb)
  };
}

// @ts-ignore TS6133
function CfnDomainDefaultEbsStorageSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.DefaultEbsStorageSettingsProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.DefaultEbsStorageSettingsProperty>();
  ret.addPropertyResult("defaultEbsVolumeSizeInGb", "DefaultEbsVolumeSizeInGb", (properties.DefaultEbsVolumeSizeInGb != null ? cfn_parse.FromCloudFormation.getNumber(properties.DefaultEbsVolumeSizeInGb) : undefined));
  ret.addPropertyResult("maximumEbsVolumeSizeInGb", "MaximumEbsVolumeSizeInGb", (properties.MaximumEbsVolumeSizeInGb != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumEbsVolumeSizeInGb) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DefaultSpaceStorageSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `DefaultSpaceStorageSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainDefaultSpaceStorageSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("defaultEbsStorageSettings", CfnDomainDefaultEbsStorageSettingsPropertyValidator)(properties.defaultEbsStorageSettings));
  return errors.wrap("supplied properties not correct for \"DefaultSpaceStorageSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnDomainDefaultSpaceStorageSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainDefaultSpaceStorageSettingsPropertyValidator(properties).assertSuccess();
  return {
    "DefaultEbsStorageSettings": convertCfnDomainDefaultEbsStorageSettingsPropertyToCloudFormation(properties.defaultEbsStorageSettings)
  };
}

// @ts-ignore TS6133
function CfnDomainDefaultSpaceStorageSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.DefaultSpaceStorageSettingsProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.DefaultSpaceStorageSettingsProperty>();
  ret.addPropertyResult("defaultEbsStorageSettings", "DefaultEbsStorageSettings", (properties.DefaultEbsStorageSettings != null ? CfnDomainDefaultEbsStorageSettingsPropertyFromCloudFormation(properties.DefaultEbsStorageSettings) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CodeEditorAppSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `CodeEditorAppSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainCodeEditorAppSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("defaultResourceSpec", CfnDomainResourceSpecPropertyValidator)(properties.defaultResourceSpec));
  errors.collect(cdk.propertyValidator("lifecycleConfigArns", cdk.listValidator(cdk.validateString))(properties.lifecycleConfigArns));
  return errors.wrap("supplied properties not correct for \"CodeEditorAppSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnDomainCodeEditorAppSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainCodeEditorAppSettingsPropertyValidator(properties).assertSuccess();
  return {
    "DefaultResourceSpec": convertCfnDomainResourceSpecPropertyToCloudFormation(properties.defaultResourceSpec),
    "LifecycleConfigArns": cdk.listMapper(cdk.stringToCloudFormation)(properties.lifecycleConfigArns)
  };
}

// @ts-ignore TS6133
function CfnDomainCodeEditorAppSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.CodeEditorAppSettingsProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.CodeEditorAppSettingsProperty>();
  ret.addPropertyResult("defaultResourceSpec", "DefaultResourceSpec", (properties.DefaultResourceSpec != null ? CfnDomainResourceSpecPropertyFromCloudFormation(properties.DefaultResourceSpec) : undefined));
  ret.addPropertyResult("lifecycleConfigArns", "LifecycleConfigArns", (properties.LifecycleConfigArns != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.LifecycleConfigArns) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CustomPosixUserConfigProperty`
 *
 * @param properties - the TypeScript properties of a `CustomPosixUserConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainCustomPosixUserConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("gid", cdk.requiredValidator)(properties.gid));
  errors.collect(cdk.propertyValidator("gid", cdk.validateNumber)(properties.gid));
  errors.collect(cdk.propertyValidator("uid", cdk.requiredValidator)(properties.uid));
  errors.collect(cdk.propertyValidator("uid", cdk.validateNumber)(properties.uid));
  return errors.wrap("supplied properties not correct for \"CustomPosixUserConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnDomainCustomPosixUserConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainCustomPosixUserConfigPropertyValidator(properties).assertSuccess();
  return {
    "Gid": cdk.numberToCloudFormation(properties.gid),
    "Uid": cdk.numberToCloudFormation(properties.uid)
  };
}

// @ts-ignore TS6133
function CfnDomainCustomPosixUserConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.CustomPosixUserConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.CustomPosixUserConfigProperty>();
  ret.addPropertyResult("gid", "Gid", (properties.Gid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Gid) : undefined));
  ret.addPropertyResult("uid", "Uid", (properties.Uid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Uid) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `EFSFileSystemConfigProperty`
 *
 * @param properties - the TypeScript properties of a `EFSFileSystemConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainEFSFileSystemConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("fileSystemId", cdk.requiredValidator)(properties.fileSystemId));
  errors.collect(cdk.propertyValidator("fileSystemId", cdk.validateString)(properties.fileSystemId));
  errors.collect(cdk.propertyValidator("fileSystemPath", cdk.validateString)(properties.fileSystemPath));
  return errors.wrap("supplied properties not correct for \"EFSFileSystemConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnDomainEFSFileSystemConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainEFSFileSystemConfigPropertyValidator(properties).assertSuccess();
  return {
    "FileSystemId": cdk.stringToCloudFormation(properties.fileSystemId),
    "FileSystemPath": cdk.stringToCloudFormation(properties.fileSystemPath)
  };
}

// @ts-ignore TS6133
function CfnDomainEFSFileSystemConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.EFSFileSystemConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.EFSFileSystemConfigProperty>();
  ret.addPropertyResult("fileSystemId", "FileSystemId", (properties.FileSystemId != null ? cfn_parse.FromCloudFormation.getString(properties.FileSystemId) : undefined));
  ret.addPropertyResult("fileSystemPath", "FileSystemPath", (properties.FileSystemPath != null ? cfn_parse.FromCloudFormation.getString(properties.FileSystemPath) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CustomFileSystemConfigProperty`
 *
 * @param properties - the TypeScript properties of a `CustomFileSystemConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainCustomFileSystemConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("efsFileSystemConfig", CfnDomainEFSFileSystemConfigPropertyValidator)(properties.efsFileSystemConfig));
  return errors.wrap("supplied properties not correct for \"CustomFileSystemConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnDomainCustomFileSystemConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainCustomFileSystemConfigPropertyValidator(properties).assertSuccess();
  return {
    "EFSFileSystemConfig": convertCfnDomainEFSFileSystemConfigPropertyToCloudFormation(properties.efsFileSystemConfig)
  };
}

// @ts-ignore TS6133
function CfnDomainCustomFileSystemConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.CustomFileSystemConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.CustomFileSystemConfigProperty>();
  ret.addPropertyResult("efsFileSystemConfig", "EFSFileSystemConfig", (properties.EFSFileSystemConfig != null ? CfnDomainEFSFileSystemConfigPropertyFromCloudFormation(properties.EFSFileSystemConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `UserSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `UserSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainUserSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("codeEditorAppSettings", CfnDomainCodeEditorAppSettingsPropertyValidator)(properties.codeEditorAppSettings));
  errors.collect(cdk.propertyValidator("customFileSystemConfigs", cdk.listValidator(CfnDomainCustomFileSystemConfigPropertyValidator))(properties.customFileSystemConfigs));
  errors.collect(cdk.propertyValidator("customPosixUserConfig", CfnDomainCustomPosixUserConfigPropertyValidator)(properties.customPosixUserConfig));
  errors.collect(cdk.propertyValidator("defaultLandingUri", cdk.validateString)(properties.defaultLandingUri));
  errors.collect(cdk.propertyValidator("executionRole", cdk.requiredValidator)(properties.executionRole));
  errors.collect(cdk.propertyValidator("executionRole", cdk.validateString)(properties.executionRole));
  errors.collect(cdk.propertyValidator("jupyterLabAppSettings", CfnDomainJupyterLabAppSettingsPropertyValidator)(properties.jupyterLabAppSettings));
  errors.collect(cdk.propertyValidator("jupyterServerAppSettings", CfnDomainJupyterServerAppSettingsPropertyValidator)(properties.jupyterServerAppSettings));
  errors.collect(cdk.propertyValidator("kernelGatewayAppSettings", CfnDomainKernelGatewayAppSettingsPropertyValidator)(properties.kernelGatewayAppSettings));
  errors.collect(cdk.propertyValidator("rSessionAppSettings", CfnDomainRSessionAppSettingsPropertyValidator)(properties.rSessionAppSettings));
  errors.collect(cdk.propertyValidator("rStudioServerProAppSettings", CfnDomainRStudioServerProAppSettingsPropertyValidator)(properties.rStudioServerProAppSettings));
  errors.collect(cdk.propertyValidator("securityGroups", cdk.listValidator(cdk.validateString))(properties.securityGroups));
  errors.collect(cdk.propertyValidator("sharingSettings", CfnDomainSharingSettingsPropertyValidator)(properties.sharingSettings));
  errors.collect(cdk.propertyValidator("spaceStorageSettings", CfnDomainDefaultSpaceStorageSettingsPropertyValidator)(properties.spaceStorageSettings));
  errors.collect(cdk.propertyValidator("studioWebPortal", cdk.validateString)(properties.studioWebPortal));
  return errors.wrap("supplied properties not correct for \"UserSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnDomainUserSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainUserSettingsPropertyValidator(properties).assertSuccess();
  return {
    "CodeEditorAppSettings": convertCfnDomainCodeEditorAppSettingsPropertyToCloudFormation(properties.codeEditorAppSettings),
    "CustomFileSystemConfigs": cdk.listMapper(convertCfnDomainCustomFileSystemConfigPropertyToCloudFormation)(properties.customFileSystemConfigs),
    "CustomPosixUserConfig": convertCfnDomainCustomPosixUserConfigPropertyToCloudFormation(properties.customPosixUserConfig),
    "DefaultLandingUri": cdk.stringToCloudFormation(properties.defaultLandingUri),
    "ExecutionRole": cdk.stringToCloudFormation(properties.executionRole),
    "JupyterLabAppSettings": convertCfnDomainJupyterLabAppSettingsPropertyToCloudFormation(properties.jupyterLabAppSettings),
    "JupyterServerAppSettings": convertCfnDomainJupyterServerAppSettingsPropertyToCloudFormation(properties.jupyterServerAppSettings),
    "KernelGatewayAppSettings": convertCfnDomainKernelGatewayAppSettingsPropertyToCloudFormation(properties.kernelGatewayAppSettings),
    "RSessionAppSettings": convertCfnDomainRSessionAppSettingsPropertyToCloudFormation(properties.rSessionAppSettings),
    "RStudioServerProAppSettings": convertCfnDomainRStudioServerProAppSettingsPropertyToCloudFormation(properties.rStudioServerProAppSettings),
    "SecurityGroups": cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroups),
    "SharingSettings": convertCfnDomainSharingSettingsPropertyToCloudFormation(properties.sharingSettings),
    "SpaceStorageSettings": convertCfnDomainDefaultSpaceStorageSettingsPropertyToCloudFormation(properties.spaceStorageSettings),
    "StudioWebPortal": cdk.stringToCloudFormation(properties.studioWebPortal)
  };
}

// @ts-ignore TS6133
function CfnDomainUserSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnDomain.UserSettingsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.UserSettingsProperty>();
  ret.addPropertyResult("codeEditorAppSettings", "CodeEditorAppSettings", (properties.CodeEditorAppSettings != null ? CfnDomainCodeEditorAppSettingsPropertyFromCloudFormation(properties.CodeEditorAppSettings) : undefined));
  ret.addPropertyResult("customFileSystemConfigs", "CustomFileSystemConfigs", (properties.CustomFileSystemConfigs != null ? cfn_parse.FromCloudFormation.getArray(CfnDomainCustomFileSystemConfigPropertyFromCloudFormation)(properties.CustomFileSystemConfigs) : undefined));
  ret.addPropertyResult("customPosixUserConfig", "CustomPosixUserConfig", (properties.CustomPosixUserConfig != null ? CfnDomainCustomPosixUserConfigPropertyFromCloudFormation(properties.CustomPosixUserConfig) : undefined));
  ret.addPropertyResult("defaultLandingUri", "DefaultLandingUri", (properties.DefaultLandingUri != null ? cfn_parse.FromCloudFormation.getString(properties.DefaultLandingUri) : undefined));
  ret.addPropertyResult("executionRole", "ExecutionRole", (properties.ExecutionRole != null ? cfn_parse.FromCloudFormation.getString(properties.ExecutionRole) : undefined));
  ret.addPropertyResult("jupyterLabAppSettings", "JupyterLabAppSettings", (properties.JupyterLabAppSettings != null ? CfnDomainJupyterLabAppSettingsPropertyFromCloudFormation(properties.JupyterLabAppSettings) : undefined));
  ret.addPropertyResult("jupyterServerAppSettings", "JupyterServerAppSettings", (properties.JupyterServerAppSettings != null ? CfnDomainJupyterServerAppSettingsPropertyFromCloudFormation(properties.JupyterServerAppSettings) : undefined));
  ret.addPropertyResult("kernelGatewayAppSettings", "KernelGatewayAppSettings", (properties.KernelGatewayAppSettings != null ? CfnDomainKernelGatewayAppSettingsPropertyFromCloudFormation(properties.KernelGatewayAppSettings) : undefined));
  ret.addPropertyResult("rSessionAppSettings", "RSessionAppSettings", (properties.RSessionAppSettings != null ? CfnDomainRSessionAppSettingsPropertyFromCloudFormation(properties.RSessionAppSettings) : undefined));
  ret.addPropertyResult("rStudioServerProAppSettings", "RStudioServerProAppSettings", (properties.RStudioServerProAppSettings != null ? CfnDomainRStudioServerProAppSettingsPropertyFromCloudFormation(properties.RStudioServerProAppSettings) : undefined));
  ret.addPropertyResult("securityGroups", "SecurityGroups", (properties.SecurityGroups != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SecurityGroups) : undefined));
  ret.addPropertyResult("sharingSettings", "SharingSettings", (properties.SharingSettings != null ? CfnDomainSharingSettingsPropertyFromCloudFormation(properties.SharingSettings) : undefined));
  ret.addPropertyResult("spaceStorageSettings", "SpaceStorageSettings", (properties.SpaceStorageSettings != null ? CfnDomainDefaultSpaceStorageSettingsPropertyFromCloudFormation(properties.SpaceStorageSettings) : undefined));
  ret.addPropertyResult("studioWebPortal", "StudioWebPortal", (properties.StudioWebPortal != null ? cfn_parse.FromCloudFormation.getString(properties.StudioWebPortal) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `RStudioServerProDomainSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `RStudioServerProDomainSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainRStudioServerProDomainSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("defaultResourceSpec", CfnDomainResourceSpecPropertyValidator)(properties.defaultResourceSpec));
  errors.collect(cdk.propertyValidator("domainExecutionRoleArn", cdk.requiredValidator)(properties.domainExecutionRoleArn));
  errors.collect(cdk.propertyValidator("domainExecutionRoleArn", cdk.validateString)(properties.domainExecutionRoleArn));
  errors.collect(cdk.propertyValidator("rStudioConnectUrl", cdk.validateString)(properties.rStudioConnectUrl));
  errors.collect(cdk.propertyValidator("rStudioPackageManagerUrl", cdk.validateString)(properties.rStudioPackageManagerUrl));
  return errors.wrap("supplied properties not correct for \"RStudioServerProDomainSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnDomainRStudioServerProDomainSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainRStudioServerProDomainSettingsPropertyValidator(properties).assertSuccess();
  return {
    "DefaultResourceSpec": convertCfnDomainResourceSpecPropertyToCloudFormation(properties.defaultResourceSpec),
    "DomainExecutionRoleArn": cdk.stringToCloudFormation(properties.domainExecutionRoleArn),
    "RStudioConnectUrl": cdk.stringToCloudFormation(properties.rStudioConnectUrl),
    "RStudioPackageManagerUrl": cdk.stringToCloudFormation(properties.rStudioPackageManagerUrl)
  };
}

// @ts-ignore TS6133
function CfnDomainRStudioServerProDomainSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnDomain.RStudioServerProDomainSettingsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.RStudioServerProDomainSettingsProperty>();
  ret.addPropertyResult("defaultResourceSpec", "DefaultResourceSpec", (properties.DefaultResourceSpec != null ? CfnDomainResourceSpecPropertyFromCloudFormation(properties.DefaultResourceSpec) : undefined));
  ret.addPropertyResult("domainExecutionRoleArn", "DomainExecutionRoleArn", (properties.DomainExecutionRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.DomainExecutionRoleArn) : undefined));
  ret.addPropertyResult("rStudioConnectUrl", "RStudioConnectUrl", (properties.RStudioConnectUrl != null ? cfn_parse.FromCloudFormation.getString(properties.RStudioConnectUrl) : undefined));
  ret.addPropertyResult("rStudioPackageManagerUrl", "RStudioPackageManagerUrl", (properties.RStudioPackageManagerUrl != null ? cfn_parse.FromCloudFormation.getString(properties.RStudioPackageManagerUrl) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DomainSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `DomainSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainDomainSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("rStudioServerProDomainSettings", CfnDomainRStudioServerProDomainSettingsPropertyValidator)(properties.rStudioServerProDomainSettings));
  errors.collect(cdk.propertyValidator("securityGroupIds", cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
  return errors.wrap("supplied properties not correct for \"DomainSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnDomainDomainSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainDomainSettingsPropertyValidator(properties).assertSuccess();
  return {
    "RStudioServerProDomainSettings": convertCfnDomainRStudioServerProDomainSettingsPropertyToCloudFormation(properties.rStudioServerProDomainSettings),
    "SecurityGroupIds": cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds)
  };
}

// @ts-ignore TS6133
function CfnDomainDomainSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomain.DomainSettingsProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomain.DomainSettingsProperty>();
  ret.addPropertyResult("rStudioServerProDomainSettings", "RStudioServerProDomainSettings", (properties.RStudioServerProDomainSettings != null ? CfnDomainRStudioServerProDomainSettingsPropertyFromCloudFormation(properties.RStudioServerProDomainSettings) : undefined));
  ret.addPropertyResult("securityGroupIds", "SecurityGroupIds", (properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SecurityGroupIds) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnDomainProps`
 *
 * @param properties - the TypeScript properties of a `CfnDomainProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnDomainPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("appNetworkAccessType", cdk.validateString)(properties.appNetworkAccessType));
  errors.collect(cdk.propertyValidator("appSecurityGroupManagement", cdk.validateString)(properties.appSecurityGroupManagement));
  errors.collect(cdk.propertyValidator("authMode", cdk.requiredValidator)(properties.authMode));
  errors.collect(cdk.propertyValidator("authMode", cdk.validateString)(properties.authMode));
  errors.collect(cdk.propertyValidator("defaultSpaceSettings", CfnDomainDefaultSpaceSettingsPropertyValidator)(properties.defaultSpaceSettings));
  errors.collect(cdk.propertyValidator("defaultUserSettings", cdk.requiredValidator)(properties.defaultUserSettings));
  errors.collect(cdk.propertyValidator("defaultUserSettings", CfnDomainUserSettingsPropertyValidator)(properties.defaultUserSettings));
  errors.collect(cdk.propertyValidator("domainName", cdk.requiredValidator)(properties.domainName));
  errors.collect(cdk.propertyValidator("domainName", cdk.validateString)(properties.domainName));
  errors.collect(cdk.propertyValidator("domainSettings", CfnDomainDomainSettingsPropertyValidator)(properties.domainSettings));
  errors.collect(cdk.propertyValidator("kmsKeyId", cdk.validateString)(properties.kmsKeyId));
  errors.collect(cdk.propertyValidator("subnetIds", cdk.requiredValidator)(properties.subnetIds));
  errors.collect(cdk.propertyValidator("subnetIds", cdk.listValidator(cdk.validateString))(properties.subnetIds));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  errors.collect(cdk.propertyValidator("vpcId", cdk.requiredValidator)(properties.vpcId));
  errors.collect(cdk.propertyValidator("vpcId", cdk.validateString)(properties.vpcId));
  return errors.wrap("supplied properties not correct for \"CfnDomainProps\"");
}

// @ts-ignore TS6133
function convertCfnDomainPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnDomainPropsValidator(properties).assertSuccess();
  return {
    "AppNetworkAccessType": cdk.stringToCloudFormation(properties.appNetworkAccessType),
    "AppSecurityGroupManagement": cdk.stringToCloudFormation(properties.appSecurityGroupManagement),
    "AuthMode": cdk.stringToCloudFormation(properties.authMode),
    "DefaultSpaceSettings": convertCfnDomainDefaultSpaceSettingsPropertyToCloudFormation(properties.defaultSpaceSettings),
    "DefaultUserSettings": convertCfnDomainUserSettingsPropertyToCloudFormation(properties.defaultUserSettings),
    "DomainName": cdk.stringToCloudFormation(properties.domainName),
    "DomainSettings": convertCfnDomainDomainSettingsPropertyToCloudFormation(properties.domainSettings),
    "KmsKeyId": cdk.stringToCloudFormation(properties.kmsKeyId),
    "SubnetIds": cdk.listMapper(cdk.stringToCloudFormation)(properties.subnetIds),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
    "VpcId": cdk.stringToCloudFormation(properties.vpcId)
  };
}

// @ts-ignore TS6133
function CfnDomainPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnDomainProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnDomainProps>();
  ret.addPropertyResult("appNetworkAccessType", "AppNetworkAccessType", (properties.AppNetworkAccessType != null ? cfn_parse.FromCloudFormation.getString(properties.AppNetworkAccessType) : undefined));
  ret.addPropertyResult("appSecurityGroupManagement", "AppSecurityGroupManagement", (properties.AppSecurityGroupManagement != null ? cfn_parse.FromCloudFormation.getString(properties.AppSecurityGroupManagement) : undefined));
  ret.addPropertyResult("authMode", "AuthMode", (properties.AuthMode != null ? cfn_parse.FromCloudFormation.getString(properties.AuthMode) : undefined));
  ret.addPropertyResult("defaultSpaceSettings", "DefaultSpaceSettings", (properties.DefaultSpaceSettings != null ? CfnDomainDefaultSpaceSettingsPropertyFromCloudFormation(properties.DefaultSpaceSettings) : undefined));
  ret.addPropertyResult("defaultUserSettings", "DefaultUserSettings", (properties.DefaultUserSettings != null ? CfnDomainUserSettingsPropertyFromCloudFormation(properties.DefaultUserSettings) : undefined));
  ret.addPropertyResult("domainName", "DomainName", (properties.DomainName != null ? cfn_parse.FromCloudFormation.getString(properties.DomainName) : undefined));
  ret.addPropertyResult("domainSettings", "DomainSettings", (properties.DomainSettings != null ? CfnDomainDomainSettingsPropertyFromCloudFormation(properties.DomainSettings) : undefined));
  ret.addPropertyResult("kmsKeyId", "KmsKeyId", (properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined));
  ret.addPropertyResult("subnetIds", "SubnetIds", (properties.SubnetIds != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SubnetIds) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addPropertyResult("vpcId", "VpcId", (properties.VpcId != null ? cfn_parse.FromCloudFormation.getString(properties.VpcId) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Use the `AWS::SageMaker::Endpoint` resource to create an endpoint using the specified configuration in the request.
 *
 * Amazon SageMaker uses the endpoint to provision resources and deploy models. You create the endpoint configuration with the [AWS::SageMaker::EndpointConfig](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html) resource. For more information, see [Deploy a Model on Amazon SageMaker Hosting Services](https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works-hosting.html) in the *Amazon SageMaker Developer Guide* .
 *
 * @cloudformationResource AWS::SageMaker::Endpoint
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpoint.html
 */
export class CfnEndpoint extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::Endpoint";

  /**
   * Build a CfnEndpoint from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEndpoint {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnEndpointPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnEndpoint(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The name of the endpoint, such as `MyEndpoint` .
   *
   * @cloudformationAttribute EndpointName
   */
  public readonly attrEndpointName: string;

  /**
   * @cloudformationAttribute Id
   */
  public readonly attrId: string;

  /**
   * The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.
   */
  public deploymentConfig?: CfnEndpoint.DeploymentConfigProperty | cdk.IResolvable;

  /**
   * The name of the [AWS::SageMaker::EndpointConfig](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html) resource that specifies the configuration for the endpoint. For more information, see [CreateEndpointConfig](https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpointConfig.html) .
   */
  public endpointConfigName: string;

  /**
   * The name of the endpoint.The name must be unique within an AWS Region in your AWS account. The name is case-insensitive in `CreateEndpoint` , but the case is preserved and must be matched in [](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpoint.html) .
   */
  public endpointName?: string;

  /**
   * When you are updating endpoint resources with [RetainAllVariantProperties](https://docs.aws.amazon.com/sagemaker/latest/dg/API_UpdateEndpoint.html#SageMaker-UpdateEndpoint-request-RetainAllVariantProperties) whose value is set to `true` , `ExcludeRetainedVariantProperties` specifies the list of type [VariantProperty](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-variantproperty.html) to override with the values provided by `EndpointConfig` . If you don't specify a value for `ExcludeAllVariantProperties` , no variant properties are overridden. Don't use this property when creating new endpoint resources or when `RetainAllVariantProperties` is set to `false` .
   */
  public excludeRetainedVariantProperties?: Array<cdk.IResolvable | CfnEndpoint.VariantPropertyProperty> | cdk.IResolvable;

  /**
   * When updating endpoint resources, enables or disables the retention of variant properties, such as the instance count or the variant weight.
   */
  public retainAllVariantProperties?: boolean | cdk.IResolvable;

  /**
   * Specifies whether to reuse the last deployment configuration.
   */
  public retainDeploymentConfig?: boolean | cdk.IResolvable;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * A list of key-value pairs to apply to this resource.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnEndpointProps) {
    super(scope, id, {
      "type": CfnEndpoint.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "endpointConfigName", this);

    this.attrEndpointName = cdk.Token.asString(this.getAtt("EndpointName", cdk.ResolutionTypeHint.STRING));
    this.attrId = cdk.Token.asString(this.getAtt("Id", cdk.ResolutionTypeHint.STRING));
    this.deploymentConfig = props.deploymentConfig;
    this.endpointConfigName = props.endpointConfigName;
    this.endpointName = props.endpointName;
    this.excludeRetainedVariantProperties = props.excludeRetainedVariantProperties;
    this.retainAllVariantProperties = props.retainAllVariantProperties;
    this.retainDeploymentConfig = props.retainDeploymentConfig;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::Endpoint", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "deploymentConfig": this.deploymentConfig,
      "endpointConfigName": this.endpointConfigName,
      "endpointName": this.endpointName,
      "excludeRetainedVariantProperties": this.excludeRetainedVariantProperties,
      "retainAllVariantProperties": this.retainAllVariantProperties,
      "retainDeploymentConfig": this.retainDeploymentConfig,
      "tags": this.tags.renderTags()
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnEndpoint.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnEndpointPropsToCloudFormation(props);
  }
}

export namespace CfnEndpoint {
  /**
   * Specifies a production variant property type for an Endpoint.
   *
   * If you are updating an Endpoint with the [RetainAllVariantProperties](https://docs.aws.amazon.com/sagemaker/latest/dg/API_UpdateEndpoint.html#SageMaker-UpdateEndpoint-request-RetainAllVariantProperties) option set to `true` , the `VarientProperty` objects listed in [ExcludeRetainedVariantProperties](https://docs.aws.amazon.com/sagemaker/latest/dg/API_UpdateEndpoint.html#SageMaker-UpdateEndpoint-request-ExcludeRetainedVariantProperties) override the existing variant properties of the Endpoint.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-variantproperty.html
   */
  export interface VariantPropertyProperty {
    /**
     * The type of variant property. The supported values are:.
     *
     * - `DesiredInstanceCount` : Overrides the existing variant instance counts using the [InitialInstanceCount](https://docs.aws.amazon.com/sagemaker/latest/dg/API_ProductionVariant.html#SageMaker-Type-ProductionVariant-InitialInstanceCount) values in the [ProductionVariants](https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpointConfig.html#SageMaker-CreateEndpointConfig-request-ProductionVariants) .
     * - `DesiredWeight` : Overrides the existing variant weights using the [InitialVariantWeight](https://docs.aws.amazon.com/sagemaker/latest/dg/API_ProductionVariant.html#SageMaker-Type-ProductionVariant-InitialVariantWeight) values in the [ProductionVariants](https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpointConfig.html#SageMaker-CreateEndpointConfig-request-ProductionVariants) .
     * - `DataCaptureConfig` : (Not currently supported.)
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-variantproperty.html#cfn-sagemaker-endpoint-variantproperty-variantpropertytype
     */
    readonly variantPropertyType?: string;
  }

  /**
   * The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-deploymentconfig.html
   */
  export interface DeploymentConfigProperty {
    /**
     * Automatic rollback configuration for handling endpoint deployment failures and recovery.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-deploymentconfig.html#cfn-sagemaker-endpoint-deploymentconfig-autorollbackconfiguration
     */
    readonly autoRollbackConfiguration?: CfnEndpoint.AutoRollbackConfigProperty | cdk.IResolvable;

    /**
     * Update policy for a blue/green deployment.
     *
     * If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-deploymentconfig.html#cfn-sagemaker-endpoint-deploymentconfig-bluegreenupdatepolicy
     */
    readonly blueGreenUpdatePolicy?: CfnEndpoint.BlueGreenUpdatePolicyProperty | cdk.IResolvable;

    /**
     * Specifies a rolling deployment strategy for updating a SageMaker endpoint.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-deploymentconfig.html#cfn-sagemaker-endpoint-deploymentconfig-rollingupdatepolicy
     */
    readonly rollingUpdatePolicy?: cdk.IResolvable | CfnEndpoint.RollingUpdatePolicyProperty;
  }

  /**
   * Automatic rollback configuration for handling endpoint deployment failures and recovery.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-autorollbackconfig.html
   */
  export interface AutoRollbackConfigProperty {
    /**
     * List of CloudWatch alarms in your account that are configured to monitor metrics on an endpoint.
     *
     * If any alarms are tripped during a deployment, SageMaker rolls back the deployment.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-autorollbackconfig.html#cfn-sagemaker-endpoint-autorollbackconfig-alarms
     */
    readonly alarms: Array<CfnEndpoint.AlarmProperty | cdk.IResolvable> | cdk.IResolvable;
  }

  /**
   * An Amazon CloudWatch alarm configured to monitor metrics on an endpoint.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-alarm.html
   */
  export interface AlarmProperty {
    /**
     * The name of a CloudWatch alarm in your account.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-alarm.html#cfn-sagemaker-endpoint-alarm-alarmname
     */
    readonly alarmName: string;
  }

  /**
   * Specifies a rolling deployment strategy for updating a SageMaker endpoint.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-rollingupdatepolicy.html
   */
  export interface RollingUpdatePolicyProperty {
    /**
     * Batch size for each rolling step to provision capacity and turn on traffic on the new endpoint fleet, and terminate capacity on the old endpoint fleet.
     *
     * Value must be between 5% to 50% of the variant's total instance count.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-rollingupdatepolicy.html#cfn-sagemaker-endpoint-rollingupdatepolicy-maximumbatchsize
     */
    readonly maximumBatchSize: CfnEndpoint.CapacitySizeProperty | cdk.IResolvable;

    /**
     * The time limit for the total deployment.
     *
     * Exceeding this limit causes a timeout.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-rollingupdatepolicy.html#cfn-sagemaker-endpoint-rollingupdatepolicy-maximumexecutiontimeoutinseconds
     */
    readonly maximumExecutionTimeoutInSeconds?: number;

    /**
     * Batch size for rollback to the old endpoint fleet.
     *
     * Each rolling step to provision capacity and turn on traffic on the old endpoint fleet, and terminate capacity on the new endpoint fleet. If this field is absent, the default value will be set to 100% of total capacity which means to bring up the whole capacity of the old fleet at once during rollback.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-rollingupdatepolicy.html#cfn-sagemaker-endpoint-rollingupdatepolicy-rollbackmaximumbatchsize
     */
    readonly rollbackMaximumBatchSize?: CfnEndpoint.CapacitySizeProperty | cdk.IResolvable;

    /**
     * The length of the baking period, during which SageMaker monitors alarms for each batch on the new fleet.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-rollingupdatepolicy.html#cfn-sagemaker-endpoint-rollingupdatepolicy-waitintervalinseconds
     */
    readonly waitIntervalInSeconds: number;
  }

  /**
   * Specifies the type and size of the endpoint capacity to activate for a blue/green deployment, a rolling deployment, or a rollback strategy.
   *
   * You can specify your batches as either instance count or the overall percentage or your fleet.
   *
   * For a rollback strategy, if you don't specify the fields in this object, or if you set the `Value` to 100%, then SageMaker uses a blue/green rollback strategy and rolls all traffic back to the blue fleet.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-capacitysize.html
   */
  export interface CapacitySizeProperty {
    /**
     * Specifies the endpoint capacity type.
     *
     * - `INSTANCE_COUNT` : The endpoint activates based on the number of instances.
     * - `CAPACITY_PERCENT` : The endpoint activates based on the specified percentage of capacity.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-capacitysize.html#cfn-sagemaker-endpoint-capacitysize-type
     */
    readonly type: string;

    /**
     * Defines the capacity size, either as a number of instances or a capacity percentage.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-capacitysize.html#cfn-sagemaker-endpoint-capacitysize-value
     */
    readonly value: number;
  }

  /**
   * Update policy for a blue/green deployment.
   *
   * If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-bluegreenupdatepolicy.html
   */
  export interface BlueGreenUpdatePolicyProperty {
    /**
     * Maximum execution timeout for the deployment.
     *
     * Note that the timeout value should be larger than the total waiting time specified in `TerminationWaitInSeconds` and `WaitIntervalInSeconds` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-bluegreenupdatepolicy.html#cfn-sagemaker-endpoint-bluegreenupdatepolicy-maximumexecutiontimeoutinseconds
     */
    readonly maximumExecutionTimeoutInSeconds?: number;

    /**
     * Additional waiting time in seconds after the completion of an endpoint deployment before terminating the old endpoint fleet.
     *
     * Default is 0.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-bluegreenupdatepolicy.html#cfn-sagemaker-endpoint-bluegreenupdatepolicy-terminationwaitinseconds
     */
    readonly terminationWaitInSeconds?: number;

    /**
     * Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet during an endpoint deployment.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-bluegreenupdatepolicy.html#cfn-sagemaker-endpoint-bluegreenupdatepolicy-trafficroutingconfiguration
     */
    readonly trafficRoutingConfiguration: cdk.IResolvable | CfnEndpoint.TrafficRoutingConfigProperty;
  }

  /**
   * Defines the traffic routing strategy during an endpoint deployment to shift traffic from the old fleet to the new fleet.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-trafficroutingconfig.html
   */
  export interface TrafficRoutingConfigProperty {
    /**
     * Batch size for the first step to turn on traffic on the new endpoint fleet.
     *
     * `Value` must be less than or equal to 50% of the variant's total instance count.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-trafficroutingconfig.html#cfn-sagemaker-endpoint-trafficroutingconfig-canarysize
     */
    readonly canarySize?: CfnEndpoint.CapacitySizeProperty | cdk.IResolvable;

    /**
     * Batch size for each step to turn on traffic on the new endpoint fleet.
     *
     * `Value` must be 10-50% of the variant's total instance count.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-trafficroutingconfig.html#cfn-sagemaker-endpoint-trafficroutingconfig-linearstepsize
     */
    readonly linearStepSize?: CfnEndpoint.CapacitySizeProperty | cdk.IResolvable;

    /**
     * Traffic routing strategy type.
     *
     * - `ALL_AT_ONCE` : Endpoint traffic shifts to the new fleet in a single step.
     * - `CANARY` : Endpoint traffic shifts to the new fleet in two steps. The first step is the canary, which is a small portion of the traffic. The second step is the remainder of the traffic.
     * - `LINEAR` : Endpoint traffic shifts to the new fleet in n steps of a configurable size.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-trafficroutingconfig.html#cfn-sagemaker-endpoint-trafficroutingconfig-type
     */
    readonly type: string;

    /**
     * The waiting time (in seconds) between incremental steps to turn on traffic on the new endpoint fleet.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-trafficroutingconfig.html#cfn-sagemaker-endpoint-trafficroutingconfig-waitintervalinseconds
     */
    readonly waitIntervalInSeconds?: number;
  }
}

/**
 * Properties for defining a `CfnEndpoint`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpoint.html
 */
export interface CfnEndpointProps {
  /**
   * The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpoint.html#cfn-sagemaker-endpoint-deploymentconfig
   */
  readonly deploymentConfig?: CfnEndpoint.DeploymentConfigProperty | cdk.IResolvable;

  /**
   * The name of the [AWS::SageMaker::EndpointConfig](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html) resource that specifies the configuration for the endpoint. For more information, see [CreateEndpointConfig](https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpointConfig.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpoint.html#cfn-sagemaker-endpoint-endpointconfigname
   */
  readonly endpointConfigName: string;

  /**
   * The name of the endpoint.The name must be unique within an AWS Region in your AWS account. The name is case-insensitive in `CreateEndpoint` , but the case is preserved and must be matched in [](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpoint.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpoint.html#cfn-sagemaker-endpoint-endpointname
   */
  readonly endpointName?: string;

  /**
   * When you are updating endpoint resources with [RetainAllVariantProperties](https://docs.aws.amazon.com/sagemaker/latest/dg/API_UpdateEndpoint.html#SageMaker-UpdateEndpoint-request-RetainAllVariantProperties) whose value is set to `true` , `ExcludeRetainedVariantProperties` specifies the list of type [VariantProperty](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-variantproperty.html) to override with the values provided by `EndpointConfig` . If you don't specify a value for `ExcludeAllVariantProperties` , no variant properties are overridden. Don't use this property when creating new endpoint resources or when `RetainAllVariantProperties` is set to `false` .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpoint.html#cfn-sagemaker-endpoint-excluderetainedvariantproperties
   */
  readonly excludeRetainedVariantProperties?: Array<cdk.IResolvable | CfnEndpoint.VariantPropertyProperty> | cdk.IResolvable;

  /**
   * When updating endpoint resources, enables or disables the retention of variant properties, such as the instance count or the variant weight.
   *
   * To retain the variant properties of an endpoint when updating it, set `RetainAllVariantProperties` to `true` . To use the variant properties specified in a new `EndpointConfig` call when updating an endpoint, set `RetainAllVariantProperties` to `false` . Use this property only when updating endpoint resources, not when creating new endpoint resources.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpoint.html#cfn-sagemaker-endpoint-retainallvariantproperties
   */
  readonly retainAllVariantProperties?: boolean | cdk.IResolvable;

  /**
   * Specifies whether to reuse the last deployment configuration.
   *
   * The default value is false (the configuration is not reused).
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpoint.html#cfn-sagemaker-endpoint-retaindeploymentconfig
   */
  readonly retainDeploymentConfig?: boolean | cdk.IResolvable;

  /**
   * A list of key-value pairs to apply to this resource.
   *
   * For more information, see [Resource Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) and [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what) in the *AWS Billing and Cost Management User Guide* .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpoint.html#cfn-sagemaker-endpoint-tags
   */
  readonly tags?: Array<cdk.CfnTag>;
}

/**
 * Determine whether the given properties match those of a `VariantPropertyProperty`
 *
 * @param properties - the TypeScript properties of a `VariantPropertyProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointVariantPropertyPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("variantPropertyType", cdk.validateString)(properties.variantPropertyType));
  return errors.wrap("supplied properties not correct for \"VariantPropertyProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointVariantPropertyPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointVariantPropertyPropertyValidator(properties).assertSuccess();
  return {
    "VariantPropertyType": cdk.stringToCloudFormation(properties.variantPropertyType)
  };
}

// @ts-ignore TS6133
function CfnEndpointVariantPropertyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnEndpoint.VariantPropertyProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.VariantPropertyProperty>();
  ret.addPropertyResult("variantPropertyType", "VariantPropertyType", (properties.VariantPropertyType != null ? cfn_parse.FromCloudFormation.getString(properties.VariantPropertyType) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `AlarmProperty`
 *
 * @param properties - the TypeScript properties of a `AlarmProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointAlarmPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("alarmName", cdk.requiredValidator)(properties.alarmName));
  errors.collect(cdk.propertyValidator("alarmName", cdk.validateString)(properties.alarmName));
  return errors.wrap("supplied properties not correct for \"AlarmProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointAlarmPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointAlarmPropertyValidator(properties).assertSuccess();
  return {
    "AlarmName": cdk.stringToCloudFormation(properties.alarmName)
  };
}

// @ts-ignore TS6133
function CfnEndpointAlarmPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.AlarmProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.AlarmProperty>();
  ret.addPropertyResult("alarmName", "AlarmName", (properties.AlarmName != null ? cfn_parse.FromCloudFormation.getString(properties.AlarmName) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `AutoRollbackConfigProperty`
 *
 * @param properties - the TypeScript properties of a `AutoRollbackConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointAutoRollbackConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("alarms", cdk.requiredValidator)(properties.alarms));
  errors.collect(cdk.propertyValidator("alarms", cdk.listValidator(CfnEndpointAlarmPropertyValidator))(properties.alarms));
  return errors.wrap("supplied properties not correct for \"AutoRollbackConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointAutoRollbackConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointAutoRollbackConfigPropertyValidator(properties).assertSuccess();
  return {
    "Alarms": cdk.listMapper(convertCfnEndpointAlarmPropertyToCloudFormation)(properties.alarms)
  };
}

// @ts-ignore TS6133
function CfnEndpointAutoRollbackConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.AutoRollbackConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.AutoRollbackConfigProperty>();
  ret.addPropertyResult("alarms", "Alarms", (properties.Alarms != null ? cfn_parse.FromCloudFormation.getArray(CfnEndpointAlarmPropertyFromCloudFormation)(properties.Alarms) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CapacitySizeProperty`
 *
 * @param properties - the TypeScript properties of a `CapacitySizeProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointCapacitySizePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("type", cdk.requiredValidator)(properties.type));
  errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
  errors.collect(cdk.propertyValidator("value", cdk.requiredValidator)(properties.value));
  errors.collect(cdk.propertyValidator("value", cdk.validateNumber)(properties.value));
  return errors.wrap("supplied properties not correct for \"CapacitySizeProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointCapacitySizePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointCapacitySizePropertyValidator(properties).assertSuccess();
  return {
    "Type": cdk.stringToCloudFormation(properties.type),
    "Value": cdk.numberToCloudFormation(properties.value)
  };
}

// @ts-ignore TS6133
function CfnEndpointCapacitySizePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.CapacitySizeProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.CapacitySizeProperty>();
  ret.addPropertyResult("type", "Type", (properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined));
  ret.addPropertyResult("value", "Value", (properties.Value != null ? cfn_parse.FromCloudFormation.getNumber(properties.Value) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `RollingUpdatePolicyProperty`
 *
 * @param properties - the TypeScript properties of a `RollingUpdatePolicyProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointRollingUpdatePolicyPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("maximumBatchSize", cdk.requiredValidator)(properties.maximumBatchSize));
  errors.collect(cdk.propertyValidator("maximumBatchSize", CfnEndpointCapacitySizePropertyValidator)(properties.maximumBatchSize));
  errors.collect(cdk.propertyValidator("maximumExecutionTimeoutInSeconds", cdk.validateNumber)(properties.maximumExecutionTimeoutInSeconds));
  errors.collect(cdk.propertyValidator("rollbackMaximumBatchSize", CfnEndpointCapacitySizePropertyValidator)(properties.rollbackMaximumBatchSize));
  errors.collect(cdk.propertyValidator("waitIntervalInSeconds", cdk.requiredValidator)(properties.waitIntervalInSeconds));
  errors.collect(cdk.propertyValidator("waitIntervalInSeconds", cdk.validateNumber)(properties.waitIntervalInSeconds));
  return errors.wrap("supplied properties not correct for \"RollingUpdatePolicyProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointRollingUpdatePolicyPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointRollingUpdatePolicyPropertyValidator(properties).assertSuccess();
  return {
    "MaximumBatchSize": convertCfnEndpointCapacitySizePropertyToCloudFormation(properties.maximumBatchSize),
    "MaximumExecutionTimeoutInSeconds": cdk.numberToCloudFormation(properties.maximumExecutionTimeoutInSeconds),
    "RollbackMaximumBatchSize": convertCfnEndpointCapacitySizePropertyToCloudFormation(properties.rollbackMaximumBatchSize),
    "WaitIntervalInSeconds": cdk.numberToCloudFormation(properties.waitIntervalInSeconds)
  };
}

// @ts-ignore TS6133
function CfnEndpointRollingUpdatePolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnEndpoint.RollingUpdatePolicyProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.RollingUpdatePolicyProperty>();
  ret.addPropertyResult("maximumBatchSize", "MaximumBatchSize", (properties.MaximumBatchSize != null ? CfnEndpointCapacitySizePropertyFromCloudFormation(properties.MaximumBatchSize) : undefined));
  ret.addPropertyResult("maximumExecutionTimeoutInSeconds", "MaximumExecutionTimeoutInSeconds", (properties.MaximumExecutionTimeoutInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumExecutionTimeoutInSeconds) : undefined));
  ret.addPropertyResult("rollbackMaximumBatchSize", "RollbackMaximumBatchSize", (properties.RollbackMaximumBatchSize != null ? CfnEndpointCapacitySizePropertyFromCloudFormation(properties.RollbackMaximumBatchSize) : undefined));
  ret.addPropertyResult("waitIntervalInSeconds", "WaitIntervalInSeconds", (properties.WaitIntervalInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.WaitIntervalInSeconds) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `TrafficRoutingConfigProperty`
 *
 * @param properties - the TypeScript properties of a `TrafficRoutingConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointTrafficRoutingConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("canarySize", CfnEndpointCapacitySizePropertyValidator)(properties.canarySize));
  errors.collect(cdk.propertyValidator("linearStepSize", CfnEndpointCapacitySizePropertyValidator)(properties.linearStepSize));
  errors.collect(cdk.propertyValidator("type", cdk.requiredValidator)(properties.type));
  errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
  errors.collect(cdk.propertyValidator("waitIntervalInSeconds", cdk.validateNumber)(properties.waitIntervalInSeconds));
  return errors.wrap("supplied properties not correct for \"TrafficRoutingConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointTrafficRoutingConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointTrafficRoutingConfigPropertyValidator(properties).assertSuccess();
  return {
    "CanarySize": convertCfnEndpointCapacitySizePropertyToCloudFormation(properties.canarySize),
    "LinearStepSize": convertCfnEndpointCapacitySizePropertyToCloudFormation(properties.linearStepSize),
    "Type": cdk.stringToCloudFormation(properties.type),
    "WaitIntervalInSeconds": cdk.numberToCloudFormation(properties.waitIntervalInSeconds)
  };
}

// @ts-ignore TS6133
function CfnEndpointTrafficRoutingConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnEndpoint.TrafficRoutingConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.TrafficRoutingConfigProperty>();
  ret.addPropertyResult("canarySize", "CanarySize", (properties.CanarySize != null ? CfnEndpointCapacitySizePropertyFromCloudFormation(properties.CanarySize) : undefined));
  ret.addPropertyResult("linearStepSize", "LinearStepSize", (properties.LinearStepSize != null ? CfnEndpointCapacitySizePropertyFromCloudFormation(properties.LinearStepSize) : undefined));
  ret.addPropertyResult("type", "Type", (properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined));
  ret.addPropertyResult("waitIntervalInSeconds", "WaitIntervalInSeconds", (properties.WaitIntervalInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.WaitIntervalInSeconds) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `BlueGreenUpdatePolicyProperty`
 *
 * @param properties - the TypeScript properties of a `BlueGreenUpdatePolicyProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointBlueGreenUpdatePolicyPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("maximumExecutionTimeoutInSeconds", cdk.validateNumber)(properties.maximumExecutionTimeoutInSeconds));
  errors.collect(cdk.propertyValidator("terminationWaitInSeconds", cdk.validateNumber)(properties.terminationWaitInSeconds));
  errors.collect(cdk.propertyValidator("trafficRoutingConfiguration", cdk.requiredValidator)(properties.trafficRoutingConfiguration));
  errors.collect(cdk.propertyValidator("trafficRoutingConfiguration", CfnEndpointTrafficRoutingConfigPropertyValidator)(properties.trafficRoutingConfiguration));
  return errors.wrap("supplied properties not correct for \"BlueGreenUpdatePolicyProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointBlueGreenUpdatePolicyPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointBlueGreenUpdatePolicyPropertyValidator(properties).assertSuccess();
  return {
    "MaximumExecutionTimeoutInSeconds": cdk.numberToCloudFormation(properties.maximumExecutionTimeoutInSeconds),
    "TerminationWaitInSeconds": cdk.numberToCloudFormation(properties.terminationWaitInSeconds),
    "TrafficRoutingConfiguration": convertCfnEndpointTrafficRoutingConfigPropertyToCloudFormation(properties.trafficRoutingConfiguration)
  };
}

// @ts-ignore TS6133
function CfnEndpointBlueGreenUpdatePolicyPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.BlueGreenUpdatePolicyProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.BlueGreenUpdatePolicyProperty>();
  ret.addPropertyResult("maximumExecutionTimeoutInSeconds", "MaximumExecutionTimeoutInSeconds", (properties.MaximumExecutionTimeoutInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumExecutionTimeoutInSeconds) : undefined));
  ret.addPropertyResult("terminationWaitInSeconds", "TerminationWaitInSeconds", (properties.TerminationWaitInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.TerminationWaitInSeconds) : undefined));
  ret.addPropertyResult("trafficRoutingConfiguration", "TrafficRoutingConfiguration", (properties.TrafficRoutingConfiguration != null ? CfnEndpointTrafficRoutingConfigPropertyFromCloudFormation(properties.TrafficRoutingConfiguration) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DeploymentConfigProperty`
 *
 * @param properties - the TypeScript properties of a `DeploymentConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointDeploymentConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("autoRollbackConfiguration", CfnEndpointAutoRollbackConfigPropertyValidator)(properties.autoRollbackConfiguration));
  errors.collect(cdk.propertyValidator("blueGreenUpdatePolicy", CfnEndpointBlueGreenUpdatePolicyPropertyValidator)(properties.blueGreenUpdatePolicy));
  errors.collect(cdk.propertyValidator("rollingUpdatePolicy", CfnEndpointRollingUpdatePolicyPropertyValidator)(properties.rollingUpdatePolicy));
  return errors.wrap("supplied properties not correct for \"DeploymentConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointDeploymentConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointDeploymentConfigPropertyValidator(properties).assertSuccess();
  return {
    "AutoRollbackConfiguration": convertCfnEndpointAutoRollbackConfigPropertyToCloudFormation(properties.autoRollbackConfiguration),
    "BlueGreenUpdatePolicy": convertCfnEndpointBlueGreenUpdatePolicyPropertyToCloudFormation(properties.blueGreenUpdatePolicy),
    "RollingUpdatePolicy": convertCfnEndpointRollingUpdatePolicyPropertyToCloudFormation(properties.rollingUpdatePolicy)
  };
}

// @ts-ignore TS6133
function CfnEndpointDeploymentConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpoint.DeploymentConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpoint.DeploymentConfigProperty>();
  ret.addPropertyResult("autoRollbackConfiguration", "AutoRollbackConfiguration", (properties.AutoRollbackConfiguration != null ? CfnEndpointAutoRollbackConfigPropertyFromCloudFormation(properties.AutoRollbackConfiguration) : undefined));
  ret.addPropertyResult("blueGreenUpdatePolicy", "BlueGreenUpdatePolicy", (properties.BlueGreenUpdatePolicy != null ? CfnEndpointBlueGreenUpdatePolicyPropertyFromCloudFormation(properties.BlueGreenUpdatePolicy) : undefined));
  ret.addPropertyResult("rollingUpdatePolicy", "RollingUpdatePolicy", (properties.RollingUpdatePolicy != null ? CfnEndpointRollingUpdatePolicyPropertyFromCloudFormation(properties.RollingUpdatePolicy) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnEndpointProps`
 *
 * @param properties - the TypeScript properties of a `CfnEndpointProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("deploymentConfig", CfnEndpointDeploymentConfigPropertyValidator)(properties.deploymentConfig));
  errors.collect(cdk.propertyValidator("endpointConfigName", cdk.requiredValidator)(properties.endpointConfigName));
  errors.collect(cdk.propertyValidator("endpointConfigName", cdk.validateString)(properties.endpointConfigName));
  errors.collect(cdk.propertyValidator("endpointName", cdk.validateString)(properties.endpointName));
  errors.collect(cdk.propertyValidator("excludeRetainedVariantProperties", cdk.listValidator(CfnEndpointVariantPropertyPropertyValidator))(properties.excludeRetainedVariantProperties));
  errors.collect(cdk.propertyValidator("retainAllVariantProperties", cdk.validateBoolean)(properties.retainAllVariantProperties));
  errors.collect(cdk.propertyValidator("retainDeploymentConfig", cdk.validateBoolean)(properties.retainDeploymentConfig));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  return errors.wrap("supplied properties not correct for \"CfnEndpointProps\"");
}

// @ts-ignore TS6133
function convertCfnEndpointPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointPropsValidator(properties).assertSuccess();
  return {
    "DeploymentConfig": convertCfnEndpointDeploymentConfigPropertyToCloudFormation(properties.deploymentConfig),
    "EndpointConfigName": cdk.stringToCloudFormation(properties.endpointConfigName),
    "EndpointName": cdk.stringToCloudFormation(properties.endpointName),
    "ExcludeRetainedVariantProperties": cdk.listMapper(convertCfnEndpointVariantPropertyPropertyToCloudFormation)(properties.excludeRetainedVariantProperties),
    "RetainAllVariantProperties": cdk.booleanToCloudFormation(properties.retainAllVariantProperties),
    "RetainDeploymentConfig": cdk.booleanToCloudFormation(properties.retainDeploymentConfig),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
  };
}

// @ts-ignore TS6133
function CfnEndpointPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointProps>();
  ret.addPropertyResult("deploymentConfig", "DeploymentConfig", (properties.DeploymentConfig != null ? CfnEndpointDeploymentConfigPropertyFromCloudFormation(properties.DeploymentConfig) : undefined));
  ret.addPropertyResult("endpointConfigName", "EndpointConfigName", (properties.EndpointConfigName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointConfigName) : undefined));
  ret.addPropertyResult("endpointName", "EndpointName", (properties.EndpointName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointName) : undefined));
  ret.addPropertyResult("excludeRetainedVariantProperties", "ExcludeRetainedVariantProperties", (properties.ExcludeRetainedVariantProperties != null ? cfn_parse.FromCloudFormation.getArray(CfnEndpointVariantPropertyPropertyFromCloudFormation)(properties.ExcludeRetainedVariantProperties) : undefined));
  ret.addPropertyResult("retainAllVariantProperties", "RetainAllVariantProperties", (properties.RetainAllVariantProperties != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RetainAllVariantProperties) : undefined));
  ret.addPropertyResult("retainDeploymentConfig", "RetainDeploymentConfig", (properties.RetainDeploymentConfig != null ? cfn_parse.FromCloudFormation.getBoolean(properties.RetainDeploymentConfig) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * The `AWS::SageMaker::EndpointConfig` resource creates a configuration for an Amazon SageMaker endpoint.
 *
 * For more information, see [CreateEndpointConfig](https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpointConfig.html) in the *SageMaker Developer Guide* .
 *
 * @cloudformationResource AWS::SageMaker::EndpointConfig
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html
 */
export class CfnEndpointConfig extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::EndpointConfig";

  /**
   * Build a CfnEndpointConfig from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnEndpointConfig {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnEndpointConfigPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnEndpointConfig(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The name of the endpoint configuration, such as `MyEndpointConfiguration` .
   *
   * @cloudformationAttribute EndpointConfigName
   */
  public readonly attrEndpointConfigName: string;

  /**
   * @cloudformationAttribute Id
   */
  public readonly attrId: string;

  /**
   * Specifies configuration for how an endpoint performs asynchronous inference.
   */
  public asyncInferenceConfig?: CfnEndpointConfig.AsyncInferenceConfigProperty | cdk.IResolvable;

  /**
   * Specifies how to capture endpoint data for model monitor.
   */
  public dataCaptureConfig?: CfnEndpointConfig.DataCaptureConfigProperty | cdk.IResolvable;

  public enableNetworkIsolation?: boolean | cdk.IResolvable;

  /**
   * The name of the endpoint configuration.
   */
  public endpointConfigName?: string;

  public executionRoleArn?: string;

  /**
   * A parameter to activate explainers.
   */
  public explainerConfig?: CfnEndpointConfig.ExplainerConfigProperty | cdk.IResolvable;

  /**
   * The Amazon Resource Name (ARN) of an AWS Key Management Service key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint.
   */
  public kmsKeyId?: string;

  /**
   * A list of `ProductionVariant` objects, one for each model that you want to host at this endpoint.
   */
  public productionVariants: Array<cdk.IResolvable | CfnEndpointConfig.ProductionVariantProperty> | cdk.IResolvable;

  /**
   * Array of `ProductionVariant` objects.
   */
  public shadowProductionVariants?: Array<cdk.IResolvable | CfnEndpointConfig.ProductionVariantProperty> | cdk.IResolvable;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * A list of key-value pairs to apply to this resource.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  public vpcConfig?: cdk.IResolvable | CfnEndpointConfig.VpcConfigProperty;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnEndpointConfigProps) {
    super(scope, id, {
      "type": CfnEndpointConfig.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "productionVariants", this);

    this.attrEndpointConfigName = cdk.Token.asString(this.getAtt("EndpointConfigName", cdk.ResolutionTypeHint.STRING));
    this.attrId = cdk.Token.asString(this.getAtt("Id", cdk.ResolutionTypeHint.STRING));
    this.asyncInferenceConfig = props.asyncInferenceConfig;
    this.dataCaptureConfig = props.dataCaptureConfig;
    this.enableNetworkIsolation = props.enableNetworkIsolation;
    this.endpointConfigName = props.endpointConfigName;
    this.executionRoleArn = props.executionRoleArn;
    this.explainerConfig = props.explainerConfig;
    this.kmsKeyId = props.kmsKeyId;
    this.productionVariants = props.productionVariants;
    this.shadowProductionVariants = props.shadowProductionVariants;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::EndpointConfig", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
    this.vpcConfig = props.vpcConfig;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "asyncInferenceConfig": this.asyncInferenceConfig,
      "dataCaptureConfig": this.dataCaptureConfig,
      "enableNetworkIsolation": this.enableNetworkIsolation,
      "endpointConfigName": this.endpointConfigName,
      "executionRoleArn": this.executionRoleArn,
      "explainerConfig": this.explainerConfig,
      "kmsKeyId": this.kmsKeyId,
      "productionVariants": this.productionVariants,
      "shadowProductionVariants": this.shadowProductionVariants,
      "tags": this.tags.renderTags(),
      "vpcConfig": this.vpcConfig
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnEndpointConfig.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnEndpointConfigPropsToCloudFormation(props);
  }
}

export namespace CfnEndpointConfig {
  /**
   * Specifies a model that you want to host and the resources to deploy for hosting it.
   *
   * If you are deploying multiple models, tell Amazon SageMaker how to distribute traffic among the models by specifying the `InitialVariantWeight` objects.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-productionvariant.html
   */
  export interface ProductionVariantProperty {
    /**
     * The size of the Elastic Inference (EI) instance to use for the production variant.
     *
     * EI instances provide on-demand GPU computing for inference. For more information, see [Using Elastic Inference in Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html) . For more information, see [Using Elastic Inference in Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-productionvariant.html#cfn-sagemaker-endpointconfig-productionvariant-acceleratortype
     */
    readonly acceleratorType?: string;

    /**
     * The timeout value, in seconds, for your inference container to pass health check by SageMaker Hosting.
     *
     * For more information about health check, see [How Your Container Should Respond to Health Check (Ping) Requests](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-inference-code.html#your-algorithms-inference-algo-ping-requests) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-productionvariant.html#cfn-sagemaker-endpointconfig-productionvariant-containerstartuphealthchecktimeoutinseconds
     */
    readonly containerStartupHealthCheckTimeoutInSeconds?: number;

    /**
     * You can use this parameter to turn on native AWS Systems Manager (SSM) access for a production variant behind an endpoint.
     *
     * By default, SSM access is disabled for all production variants behind an endpoint. You can turn on or turn off SSM access for a production variant behind an existing endpoint by creating a new endpoint configuration and calling `UpdateEndpoint` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-productionvariant.html#cfn-sagemaker-endpointconfig-productionvariant-enablessmaccess
     */
    readonly enableSsmAccess?: boolean | cdk.IResolvable;

    /**
     * Number of instances to launch initially.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-productionvariant.html#cfn-sagemaker-endpointconfig-productionvariant-initialinstancecount
     */
    readonly initialInstanceCount?: number;

    /**
     * Determines initial traffic distribution among all of the models that you specify in the endpoint configuration.
     *
     * The traffic to a production variant is determined by the ratio of the `VariantWeight` to the sum of all `VariantWeight` values across all ProductionVariants. If unspecified, it defaults to 1.0.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-productionvariant.html#cfn-sagemaker-endpointconfig-productionvariant-initialvariantweight
     */
    readonly initialVariantWeight?: number;

    /**
     * The ML compute instance type.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-productionvariant.html#cfn-sagemaker-endpointconfig-productionvariant-instancetype
     */
    readonly instanceType?: string;

    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-productionvariant.html#cfn-sagemaker-endpointconfig-productionvariant-managedinstancescaling
     */
    readonly managedInstanceScaling?: cdk.IResolvable | CfnEndpointConfig.ManagedInstanceScalingProperty;

    /**
     * The timeout value, in seconds, to download and extract the model that you want to host from Amazon S3 to the individual inference instance associated with this production variant.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-productionvariant.html#cfn-sagemaker-endpointconfig-productionvariant-modeldatadownloadtimeoutinseconds
     */
    readonly modelDataDownloadTimeoutInSeconds?: number;

    /**
     * The name of the model that you want to host.
     *
     * This is the name that you specified when creating the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-productionvariant.html#cfn-sagemaker-endpointconfig-productionvariant-modelname
     */
    readonly modelName?: string;

    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-productionvariant.html#cfn-sagemaker-endpointconfig-productionvariant-routingconfig
     */
    readonly routingConfig?: cdk.IResolvable | CfnEndpointConfig.RoutingConfigProperty;

    /**
     * The serverless configuration for an endpoint.
     *
     * Specifies a serverless endpoint configuration instead of an instance-based endpoint configuration.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-productionvariant.html#cfn-sagemaker-endpointconfig-productionvariant-serverlessconfig
     */
    readonly serverlessConfig?: cdk.IResolvable | CfnEndpointConfig.ServerlessConfigProperty;

    /**
     * The name of the production variant.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-productionvariant.html#cfn-sagemaker-endpointconfig-productionvariant-variantname
     */
    readonly variantName: string;

    /**
     * The size, in GB, of the ML storage volume attached to individual inference instance associated with the production variant.
     *
     * Currently only Amazon EBS gp2 storage volumes are supported.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-productionvariant.html#cfn-sagemaker-endpointconfig-productionvariant-volumesizeingb
     */
    readonly volumeSizeInGb?: number;
  }

  /**
   * Specifies the serverless configuration for an endpoint variant.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-serverlessconfig.html
   */
  export interface ServerlessConfigProperty {
    /**
     * The maximum number of concurrent invocations your serverless endpoint can process.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-serverlessconfig.html#cfn-sagemaker-endpointconfig-serverlessconfig-maxconcurrency
     */
    readonly maxConcurrency: number;

    /**
     * The memory size of your serverless endpoint.
     *
     * Valid values are in 1 GB increments: 1024 MB, 2048 MB, 3072 MB, 4096 MB, 5120 MB, or 6144 MB.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-serverlessconfig.html#cfn-sagemaker-endpointconfig-serverlessconfig-memorysizeinmb
     */
    readonly memorySizeInMb: number;

    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-serverlessconfig.html#cfn-sagemaker-endpointconfig-serverlessconfig-provisionedconcurrency
     */
    readonly provisionedConcurrency?: number;
  }

  /**
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-managedinstancescaling.html
   */
  export interface ManagedInstanceScalingProperty {
    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-managedinstancescaling.html#cfn-sagemaker-endpointconfig-managedinstancescaling-maxinstancecount
     */
    readonly maxInstanceCount?: number;

    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-managedinstancescaling.html#cfn-sagemaker-endpointconfig-managedinstancescaling-mininstancecount
     */
    readonly minInstanceCount?: number;

    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-managedinstancescaling.html#cfn-sagemaker-endpointconfig-managedinstancescaling-status
     */
    readonly status?: string;
  }

  /**
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-routingconfig.html
   */
  export interface RoutingConfigProperty {
    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-routingconfig.html#cfn-sagemaker-endpointconfig-routingconfig-routingstrategy
     */
    readonly routingStrategy?: string;
  }

  /**
   * Specifies the configuration of your endpoint for model monitor data capture.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-datacaptureconfig.html
   */
  export interface DataCaptureConfigProperty {
    /**
     * A list of the JSON and CSV content type that the endpoint captures.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-datacaptureconfig.html#cfn-sagemaker-endpointconfig-datacaptureconfig-capturecontenttypeheader
     */
    readonly captureContentTypeHeader?: CfnEndpointConfig.CaptureContentTypeHeaderProperty | cdk.IResolvable;

    /**
     * Specifies whether the endpoint captures input data to your model, output data from your model, or both.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-datacaptureconfig.html#cfn-sagemaker-endpointconfig-datacaptureconfig-captureoptions
     */
    readonly captureOptions: Array<CfnEndpointConfig.CaptureOptionProperty | cdk.IResolvable> | cdk.IResolvable;

    /**
     * The S3 bucket where model monitor stores captured data.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-datacaptureconfig.html#cfn-sagemaker-endpointconfig-datacaptureconfig-destinations3uri
     */
    readonly destinationS3Uri: string;

    /**
     * Set to `True` to enable data capture.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-datacaptureconfig.html#cfn-sagemaker-endpointconfig-datacaptureconfig-enablecapture
     */
    readonly enableCapture?: boolean | cdk.IResolvable;

    /**
     * The percentage of data to capture.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-datacaptureconfig.html#cfn-sagemaker-endpointconfig-datacaptureconfig-initialsamplingpercentage
     */
    readonly initialSamplingPercentage: number;

    /**
     * The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt the captured data at rest using Amazon S3 server-side encryption.
     *
     * The KmsKeyId can be any of the following formats: Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab Key ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab Alias name: alias/ExampleAlias Alias name ARN: arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account. For more information, see KMS-Managed Encryption Keys (https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html) in the Amazon Simple Storage Service Developer Guide. The KMS key policy must grant permission to the IAM role that you specify in your CreateModel (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html) request. For more information, see Using Key Policies in AWS KMS (http://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html) in the AWS Key Management Service Developer Guide.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-datacaptureconfig.html#cfn-sagemaker-endpointconfig-datacaptureconfig-kmskeyid
     */
    readonly kmsKeyId?: string;
  }

  /**
   * Specifies whether the endpoint captures input data or output data.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-captureoption.html
   */
  export interface CaptureOptionProperty {
    /**
     * Specifies whether the endpoint captures input data or output data.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-captureoption.html#cfn-sagemaker-endpointconfig-captureoption-capturemode
     */
    readonly captureMode: string;
  }

  /**
   * Specifies the JSON and CSV content types of the data that the endpoint captures.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-capturecontenttypeheader.html
   */
  export interface CaptureContentTypeHeaderProperty {
    /**
     * A list of the CSV content types of the data that the endpoint captures.
     *
     * For the endpoint to capture the data, you must also specify the content type when you invoke the endpoint.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-capturecontenttypeheader.html#cfn-sagemaker-endpointconfig-capturecontenttypeheader-csvcontenttypes
     */
    readonly csvContentTypes?: Array<string>;

    /**
     * A list of the JSON content types of the data that the endpoint captures.
     *
     * For the endpoint to capture the data, you must also specify the content type when you invoke the endpoint.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-capturecontenttypeheader.html#cfn-sagemaker-endpointconfig-capturecontenttypeheader-jsoncontenttypes
     */
    readonly jsonContentTypes?: Array<string>;
  }

  /**
   * Specifies configuration for how an endpoint performs asynchronous inference.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-asyncinferenceconfig.html
   */
  export interface AsyncInferenceConfigProperty {
    /**
     * Configures the behavior of the client used by SageMaker to interact with the model container during asynchronous inference.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-asyncinferenceconfig.html#cfn-sagemaker-endpointconfig-asyncinferenceconfig-clientconfig
     */
    readonly clientConfig?: CfnEndpointConfig.AsyncInferenceClientConfigProperty | cdk.IResolvable;

    /**
     * Specifies the configuration for asynchronous inference invocation outputs.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-asyncinferenceconfig.html#cfn-sagemaker-endpointconfig-asyncinferenceconfig-outputconfig
     */
    readonly outputConfig: CfnEndpointConfig.AsyncInferenceOutputConfigProperty | cdk.IResolvable;
  }

  /**
   * Specifies the configuration for asynchronous inference invocation outputs.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-asyncinferenceoutputconfig.html
   */
  export interface AsyncInferenceOutputConfigProperty {
    /**
     * The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt the asynchronous inference output in Amazon S3.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-asyncinferenceoutputconfig.html#cfn-sagemaker-endpointconfig-asyncinferenceoutputconfig-kmskeyid
     */
    readonly kmsKeyId?: string;

    /**
     * Specifies the configuration for notifications of inference results for asynchronous inference.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-asyncinferenceoutputconfig.html#cfn-sagemaker-endpointconfig-asyncinferenceoutputconfig-notificationconfig
     */
    readonly notificationConfig?: CfnEndpointConfig.AsyncInferenceNotificationConfigProperty | cdk.IResolvable;

    /**
     * The Amazon S3 location to upload failure inference responses to.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-asyncinferenceoutputconfig.html#cfn-sagemaker-endpointconfig-asyncinferenceoutputconfig-s3failurepath
     */
    readonly s3FailurePath?: string;

    /**
     * The Amazon S3 location to upload inference responses to.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-asyncinferenceoutputconfig.html#cfn-sagemaker-endpointconfig-asyncinferenceoutputconfig-s3outputpath
     */
    readonly s3OutputPath?: string;
  }

  /**
   * Specifies the configuration for notifications of inference results for asynchronous inference.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-asyncinferencenotificationconfig.html
   */
  export interface AsyncInferenceNotificationConfigProperty {
    /**
     * Amazon SNS topic to post a notification to when an inference fails.
     *
     * If no topic is provided, no notification is sent on failure.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-asyncinferencenotificationconfig.html#cfn-sagemaker-endpointconfig-asyncinferencenotificationconfig-errortopic
     */
    readonly errorTopic?: string;

    /**
     * The Amazon SNS topics where you want the inference response to be included.
     *
     * > The inference response is included only if the response size is less than or equal to 128 KB.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-asyncinferencenotificationconfig.html#cfn-sagemaker-endpointconfig-asyncinferencenotificationconfig-includeinferenceresponsein
     */
    readonly includeInferenceResponseIn?: Array<string>;

    /**
     * Amazon SNS topic to post a notification to when an inference completes successfully.
     *
     * If no topic is provided, no notification is sent on success.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-asyncinferencenotificationconfig.html#cfn-sagemaker-endpointconfig-asyncinferencenotificationconfig-successtopic
     */
    readonly successTopic?: string;
  }

  /**
   * Configures the behavior of the client used by SageMaker to interact with the model container during asynchronous inference.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-asyncinferenceclientconfig.html
   */
  export interface AsyncInferenceClientConfigProperty {
    /**
     * The maximum number of concurrent requests sent by the SageMaker client to the model container.
     *
     * If no value is provided, SageMaker will choose an optimal value for you.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-asyncinferenceclientconfig.html#cfn-sagemaker-endpointconfig-asyncinferenceclientconfig-maxconcurrentinvocationsperinstance
     */
    readonly maxConcurrentInvocationsPerInstance?: number;
  }

  /**
   * A parameter to activate explainers.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-explainerconfig.html
   */
  export interface ExplainerConfigProperty {
    /**
     * A member of `ExplainerConfig` that contains configuration parameters for the SageMaker Clarify explainer.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-explainerconfig.html#cfn-sagemaker-endpointconfig-explainerconfig-clarifyexplainerconfig
     */
    readonly clarifyExplainerConfig?: CfnEndpointConfig.ClarifyExplainerConfigProperty | cdk.IResolvable;
  }

  /**
   * The configuration parameters for the SageMaker Clarify explainer.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyexplainerconfig.html
   */
  export interface ClarifyExplainerConfigProperty {
    /**
     * A JMESPath boolean expression used to filter which records to explain.
     *
     * Explanations are activated by default. See [`EnableExplanations`](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html#clarify-online-explainability-create-endpoint-enable) for additional information.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyexplainerconfig.html#cfn-sagemaker-endpointconfig-clarifyexplainerconfig-enableexplanations
     */
    readonly enableExplanations?: string;

    /**
     * The inference configuration parameter for the model container.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyexplainerconfig.html#cfn-sagemaker-endpointconfig-clarifyexplainerconfig-inferenceconfig
     */
    readonly inferenceConfig?: CfnEndpointConfig.ClarifyInferenceConfigProperty | cdk.IResolvable;

    /**
     * The configuration for SHAP analysis.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyexplainerconfig.html#cfn-sagemaker-endpointconfig-clarifyexplainerconfig-shapconfig
     */
    readonly shapConfig: CfnEndpointConfig.ClarifyShapConfigProperty | cdk.IResolvable;
  }

  /**
   * The inference configuration parameter for the model container.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyinferenceconfig.html
   */
  export interface ClarifyInferenceConfigProperty {
    /**
     * A template string used to format a JSON record into an acceptable model container input.
     *
     * For example, a `ContentTemplate` string `'{"myfeatures":$features}'` will format a list of features `[1,2,3]` into the record string `'{"myfeatures":[1,2,3]}'` . Required only when the model container input is in JSON Lines format.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyinferenceconfig.html#cfn-sagemaker-endpointconfig-clarifyinferenceconfig-contenttemplate
     */
    readonly contentTemplate?: string;

    /**
     * The names of the features.
     *
     * If provided, these are included in the endpoint response payload to help readability of the `InvokeEndpoint` output. See the [Response](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-invoke-endpoint.html#clarify-online-explainability-response) section under *Invoke the endpoint* in the Developer Guide for more information.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyinferenceconfig.html#cfn-sagemaker-endpointconfig-clarifyinferenceconfig-featureheaders
     */
    readonly featureHeaders?: Array<string>;

    /**
     * Provides the JMESPath expression to extract the features from a model container input in JSON Lines format.
     *
     * For example, if `FeaturesAttribute` is the JMESPath expression `'myfeatures'` , it extracts a list of features `[1,2,3]` from request data `'{"myfeatures":[1,2,3]}'` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyinferenceconfig.html#cfn-sagemaker-endpointconfig-clarifyinferenceconfig-featuresattribute
     */
    readonly featuresAttribute?: string;

    /**
     * A list of data types of the features (optional).
     *
     * Applicable only to NLP explainability. If provided, `FeatureTypes` must have at least one `'text'` string (for example, `['text']` ). If `FeatureTypes` is not provided, the explainer infers the feature types based on the baseline data. The feature types are included in the endpoint response payload. For additional information see the [response](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-invoke-endpoint.html#clarify-online-explainability-response) section under *Invoke the endpoint* in the Developer Guide for more information.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyinferenceconfig.html#cfn-sagemaker-endpointconfig-clarifyinferenceconfig-featuretypes
     */
    readonly featureTypes?: Array<string>;

    /**
     * A JMESPath expression used to locate the list of label headers in the model container output.
     *
     * *Example* : If the model container output of a batch request is `'{"labels":["cat","dog","fish"],"probability":[0.6,0.3,0.1]}'` , then set `LabelAttribute` to `'labels'` to extract the list of label headers `["cat","dog","fish"]`
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyinferenceconfig.html#cfn-sagemaker-endpointconfig-clarifyinferenceconfig-labelattribute
     */
    readonly labelAttribute?: string;

    /**
     * For multiclass classification problems, the label headers are the names of the classes.
     *
     * Otherwise, the label header is the name of the predicted label. These are used to help readability for the output of the `InvokeEndpoint` API. See the [response](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-invoke-endpoint.html#clarify-online-explainability-response) section under *Invoke the endpoint* in the Developer Guide for more information. If there are no label headers in the model container output, provide them manually using this parameter.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyinferenceconfig.html#cfn-sagemaker-endpointconfig-clarifyinferenceconfig-labelheaders
     */
    readonly labelHeaders?: Array<string>;

    /**
     * A zero-based index used to extract a label header or list of label headers from model container output in CSV format.
     *
     * *Example for a multiclass model:* If the model container output consists of label headers followed by probabilities: `'"[\'cat\',\'dog\',\'fish\']","[0.1,0.6,0.3]"'` , set `LabelIndex` to `0` to select the label headers `['cat','dog','fish']` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyinferenceconfig.html#cfn-sagemaker-endpointconfig-clarifyinferenceconfig-labelindex
     */
    readonly labelIndex?: number;

    /**
     * The maximum payload size (MB) allowed of a request from the explainer to the model container.
     *
     * Defaults to `6` MB.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyinferenceconfig.html#cfn-sagemaker-endpointconfig-clarifyinferenceconfig-maxpayloadinmb
     */
    readonly maxPayloadInMb?: number;

    /**
     * The maximum number of records in a request that the model container can process when querying the model container for the predictions of a [synthetic dataset](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html#clarify-online-explainability-create-endpoint-synthetic) . A record is a unit of input data that inference can be made on, for example, a single line in CSV data. If `MaxRecordCount` is `1` , the model container expects one record per request. A value of 2 or greater means that the model expects batch requests, which can reduce overhead and speed up the inferencing process. If this parameter is not provided, the explainer will tune the record count per request according to the model container's capacity at runtime.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyinferenceconfig.html#cfn-sagemaker-endpointconfig-clarifyinferenceconfig-maxrecordcount
     */
    readonly maxRecordCount?: number;

    /**
     * A JMESPath expression used to extract the probability (or score) from the model container output if the model container is in JSON Lines format.
     *
     * *Example* : If the model container output of a single request is `'{"predicted_label":1,"probability":0.6}'` , then set `ProbabilityAttribute` to `'probability'` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyinferenceconfig.html#cfn-sagemaker-endpointconfig-clarifyinferenceconfig-probabilityattribute
     */
    readonly probabilityAttribute?: string;

    /**
     * A zero-based index used to extract a probability value (score) or list from model container output in CSV format.
     *
     * If this value is not provided, the entire model container output will be treated as a probability value (score) or list.
     *
     * *Example for a single class model:* If the model container output consists of a string-formatted prediction label followed by its probability: `'1,0.6'` , set `ProbabilityIndex` to `1` to select the probability value `0.6` .
     *
     * *Example for a multiclass model:* If the model container output consists of a string-formatted prediction label followed by its probability: `'"[\'cat\',\'dog\',\'fish\']","[0.1,0.6,0.3]"'` , set `ProbabilityIndex` to `1` to select the probability values `[0.1,0.6,0.3]` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyinferenceconfig.html#cfn-sagemaker-endpointconfig-clarifyinferenceconfig-probabilityindex
     */
    readonly probabilityIndex?: number;
  }

  /**
   * The configuration for SHAP analysis using SageMaker Clarify Explainer.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyshapconfig.html
   */
  export interface ClarifyShapConfigProperty {
    /**
     * The number of samples to be used for analysis by the Kernal SHAP algorithm.
     *
     * > The number of samples determines the size of the synthetic dataset, which has an impact on latency of explainability requests. For more information, see the *Synthetic data* of [Configure and create an endpoint](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyshapconfig.html#cfn-sagemaker-endpointconfig-clarifyshapconfig-numberofsamples
     */
    readonly numberOfSamples?: number;

    /**
     * The starting value used to initialize the random number generator in the explainer.
     *
     * Provide a value for this parameter to obtain a deterministic SHAP result.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyshapconfig.html#cfn-sagemaker-endpointconfig-clarifyshapconfig-seed
     */
    readonly seed?: number;

    /**
     * The configuration for the SHAP baseline of the Kernal SHAP algorithm.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyshapconfig.html#cfn-sagemaker-endpointconfig-clarifyshapconfig-shapbaselineconfig
     */
    readonly shapBaselineConfig: CfnEndpointConfig.ClarifyShapBaselineConfigProperty | cdk.IResolvable;

    /**
     * A parameter that indicates if text features are treated as text and explanations are provided for individual units of text.
     *
     * Required for natural language processing (NLP) explainability only.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyshapconfig.html#cfn-sagemaker-endpointconfig-clarifyshapconfig-textconfig
     */
    readonly textConfig?: CfnEndpointConfig.ClarifyTextConfigProperty | cdk.IResolvable;

    /**
     * A Boolean toggle to indicate if you want to use the logit function (true) or log-odds units (false) for model predictions.
     *
     * Defaults to false.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyshapconfig.html#cfn-sagemaker-endpointconfig-clarifyshapconfig-uselogit
     */
    readonly useLogit?: boolean | cdk.IResolvable;
  }

  /**
   * A parameter used to configure the SageMaker Clarify explainer to treat text features as text so that explanations are provided for individual units of text.
   *
   * Required only for natural language processing (NLP) explainability.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifytextconfig.html
   */
  export interface ClarifyTextConfigProperty {
    /**
     * The unit of granularity for the analysis of text features.
     *
     * For example, if the unit is `'token'` , then each token (like a word in English) of the text is treated as a feature. SHAP values are computed for each unit/feature.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifytextconfig.html#cfn-sagemaker-endpointconfig-clarifytextconfig-granularity
     */
    readonly granularity: string;

    /**
     * Specifies the language of the text features in [ISO 639-1](https://docs.aws.amazon.com/ https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) or [ISO 639-3](https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/ISO_639-3) code of a supported language.
     *
     * > For a mix of multiple languages, use code `'xx'` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifytextconfig.html#cfn-sagemaker-endpointconfig-clarifytextconfig-language
     */
    readonly language: string;
  }

  /**
   * The configuration for the [SHAP baseline](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-feature-attribute-shap-baselines.html) (also called the background or reference dataset) of the Kernal SHAP algorithm.
   *
   * > - The number of records in the baseline data determines the size of the synthetic dataset, which has an impact on latency of explainability requests. For more information, see the *Synthetic data* of [Configure and create an endpoint](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html) .
   * > - `ShapBaseline` and `ShapBaselineUri` are mutually exclusive parameters. One or the either is required to configure a SHAP baseline.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyshapbaselineconfig.html
   */
  export interface ClarifyShapBaselineConfigProperty {
    /**
     * The MIME type of the baseline data.
     *
     * Choose from `'text/csv'` or `'application/jsonlines'` . Defaults to `'text/csv'` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyshapbaselineconfig.html#cfn-sagemaker-endpointconfig-clarifyshapbaselineconfig-mimetype
     */
    readonly mimeType?: string;

    /**
     * The inline SHAP baseline data in string format.
     *
     * `ShapBaseline` can have one or multiple records to be used as the baseline dataset. The format of the SHAP baseline file should be the same format as the training dataset. For example, if the training dataset is in CSV format and each record contains four features, and all features are numerical, then the format of the baseline data should also share these characteristics. For natural language processing (NLP) of text columns, the baseline value should be the value used to replace the unit of text specified by the `Granularity` of the `TextConfig` parameter. The size limit for `ShapBasline` is 4 KB. Use the `ShapBaselineUri` parameter if you want to provide more than 4 KB of baseline data.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyshapbaselineconfig.html#cfn-sagemaker-endpointconfig-clarifyshapbaselineconfig-shapbaseline
     */
    readonly shapBaseline?: string;

    /**
     * The uniform resource identifier (URI) of the S3 bucket where the SHAP baseline file is stored.
     *
     * The format of the SHAP baseline file should be the same format as the format of the training dataset. For example, if the training dataset is in CSV format, and each record in the training dataset has four features, and all features are numerical, then the baseline file should also have this same format. Each record should contain only the features. If you are using a virtual private cloud (VPC), the `ShapBaselineUri` should be accessible to the VPC. For more information about setting up endpoints with Amazon Virtual Private Cloud, see [Give SageMaker access to Resources in your Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyshapbaselineconfig.html#cfn-sagemaker-endpointconfig-clarifyshapbaselineconfig-shapbaselineuri
     */
    readonly shapBaselineUri?: string;
  }

  /**
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-vpcconfig.html
   */
  export interface VpcConfigProperty {
    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-vpcconfig.html#cfn-sagemaker-endpointconfig-vpcconfig-securitygroupids
     */
    readonly securityGroupIds: Array<string>;

    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-vpcconfig.html#cfn-sagemaker-endpointconfig-vpcconfig-subnets
     */
    readonly subnets: Array<string>;
  }
}

/**
 * Properties for defining a `CfnEndpointConfig`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html
 */
export interface CfnEndpointConfigProps {
  /**
   * Specifies configuration for how an endpoint performs asynchronous inference.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-asyncinferenceconfig
   */
  readonly asyncInferenceConfig?: CfnEndpointConfig.AsyncInferenceConfigProperty | cdk.IResolvable;

  /**
   * Specifies how to capture endpoint data for model monitor.
   *
   * The data capture configuration applies to all production variants hosted at the endpoint.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-datacaptureconfig
   */
  readonly dataCaptureConfig?: CfnEndpointConfig.DataCaptureConfigProperty | cdk.IResolvable;

  /**
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-enablenetworkisolation
   */
  readonly enableNetworkIsolation?: boolean | cdk.IResolvable;

  /**
   * The name of the endpoint configuration.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-endpointconfigname
   */
  readonly endpointConfigName?: string;

  /**
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-executionrolearn
   */
  readonly executionRoleArn?: string;

  /**
   * A parameter to activate explainers.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-explainerconfig
   */
  readonly explainerConfig?: CfnEndpointConfig.ExplainerConfigProperty | cdk.IResolvable;

  /**
   * The Amazon Resource Name (ARN) of an AWS Key Management Service key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint.
   *
   * - Key ID: `1234abcd-12ab-34cd-56ef-1234567890ab`
   * - Key ARN: `arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`
   * - Alias name: `alias/ExampleAlias`
   * - Alias name ARN: `arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias`
   *
   * The KMS key policy must grant permission to the IAM role that you specify in your `CreateEndpoint` , `UpdateEndpoint` requests. For more information, refer to the AWS Key Management Service section [Using Key Policies in AWS KMS](https://docs.aws.amazon.com//kms/latest/developerguide/key-policies.html)
   *
   * > Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a `KmsKeyId` when using an instance type with local storage. If any of the models that you specify in the `ProductionVariants` parameter use nitro-based instances with local storage, do not specify a value for the `KmsKeyId` parameter. If you specify a value for `KmsKeyId` when using any nitro-based instances with local storage, the call to `CreateEndpointConfig` fails.
   * >
   * > For a list of instance types that support local instance storage, see [Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes) .
   * >
   * > For more information about local instance storage encryption, see [SSD Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-kmskeyid
   */
  readonly kmsKeyId?: string;

  /**
   * A list of `ProductionVariant` objects, one for each model that you want to host at this endpoint.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-productionvariants
   */
  readonly productionVariants: Array<cdk.IResolvable | CfnEndpointConfig.ProductionVariantProperty> | cdk.IResolvable;

  /**
   * Array of `ProductionVariant` objects.
   *
   * There is one for each model that you want to host at this endpoint in shadow mode with production traffic replicated from the model specified on `ProductionVariants` . If you use this field, you can only specify one variant for `ProductionVariants` and one variant for `ShadowProductionVariants` .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-shadowproductionvariants
   */
  readonly shadowProductionVariants?: Array<cdk.IResolvable | CfnEndpointConfig.ProductionVariantProperty> | cdk.IResolvable;

  /**
   * A list of key-value pairs to apply to this resource.
   *
   * For more information, see [Resource Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) and [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-tags
   */
  readonly tags?: Array<cdk.CfnTag>;

  /**
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html#cfn-sagemaker-endpointconfig-vpcconfig
   */
  readonly vpcConfig?: cdk.IResolvable | CfnEndpointConfig.VpcConfigProperty;
}

/**
 * Determine whether the given properties match those of a `ServerlessConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ServerlessConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointConfigServerlessConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("maxConcurrency", cdk.requiredValidator)(properties.maxConcurrency));
  errors.collect(cdk.propertyValidator("maxConcurrency", cdk.validateNumber)(properties.maxConcurrency));
  errors.collect(cdk.propertyValidator("memorySizeInMb", cdk.requiredValidator)(properties.memorySizeInMb));
  errors.collect(cdk.propertyValidator("memorySizeInMb", cdk.validateNumber)(properties.memorySizeInMb));
  errors.collect(cdk.propertyValidator("provisionedConcurrency", cdk.validateNumber)(properties.provisionedConcurrency));
  return errors.wrap("supplied properties not correct for \"ServerlessConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointConfigServerlessConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointConfigServerlessConfigPropertyValidator(properties).assertSuccess();
  return {
    "MaxConcurrency": cdk.numberToCloudFormation(properties.maxConcurrency),
    "MemorySizeInMB": cdk.numberToCloudFormation(properties.memorySizeInMb),
    "ProvisionedConcurrency": cdk.numberToCloudFormation(properties.provisionedConcurrency)
  };
}

// @ts-ignore TS6133
function CfnEndpointConfigServerlessConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnEndpointConfig.ServerlessConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.ServerlessConfigProperty>();
  ret.addPropertyResult("maxConcurrency", "MaxConcurrency", (properties.MaxConcurrency != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxConcurrency) : undefined));
  ret.addPropertyResult("memorySizeInMb", "MemorySizeInMB", (properties.MemorySizeInMB != null ? cfn_parse.FromCloudFormation.getNumber(properties.MemorySizeInMB) : undefined));
  ret.addPropertyResult("provisionedConcurrency", "ProvisionedConcurrency", (properties.ProvisionedConcurrency != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProvisionedConcurrency) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ManagedInstanceScalingProperty`
 *
 * @param properties - the TypeScript properties of a `ManagedInstanceScalingProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointConfigManagedInstanceScalingPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("maxInstanceCount", cdk.validateNumber)(properties.maxInstanceCount));
  errors.collect(cdk.propertyValidator("minInstanceCount", cdk.validateNumber)(properties.minInstanceCount));
  errors.collect(cdk.propertyValidator("status", cdk.validateString)(properties.status));
  return errors.wrap("supplied properties not correct for \"ManagedInstanceScalingProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointConfigManagedInstanceScalingPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointConfigManagedInstanceScalingPropertyValidator(properties).assertSuccess();
  return {
    "MaxInstanceCount": cdk.numberToCloudFormation(properties.maxInstanceCount),
    "MinInstanceCount": cdk.numberToCloudFormation(properties.minInstanceCount),
    "Status": cdk.stringToCloudFormation(properties.status)
  };
}

// @ts-ignore TS6133
function CfnEndpointConfigManagedInstanceScalingPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnEndpointConfig.ManagedInstanceScalingProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.ManagedInstanceScalingProperty>();
  ret.addPropertyResult("maxInstanceCount", "MaxInstanceCount", (properties.MaxInstanceCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxInstanceCount) : undefined));
  ret.addPropertyResult("minInstanceCount", "MinInstanceCount", (properties.MinInstanceCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinInstanceCount) : undefined));
  ret.addPropertyResult("status", "Status", (properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `RoutingConfigProperty`
 *
 * @param properties - the TypeScript properties of a `RoutingConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointConfigRoutingConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("routingStrategy", cdk.validateString)(properties.routingStrategy));
  return errors.wrap("supplied properties not correct for \"RoutingConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointConfigRoutingConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointConfigRoutingConfigPropertyValidator(properties).assertSuccess();
  return {
    "RoutingStrategy": cdk.stringToCloudFormation(properties.routingStrategy)
  };
}

// @ts-ignore TS6133
function CfnEndpointConfigRoutingConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnEndpointConfig.RoutingConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.RoutingConfigProperty>();
  ret.addPropertyResult("routingStrategy", "RoutingStrategy", (properties.RoutingStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.RoutingStrategy) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ProductionVariantProperty`
 *
 * @param properties - the TypeScript properties of a `ProductionVariantProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointConfigProductionVariantPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("acceleratorType", cdk.validateString)(properties.acceleratorType));
  errors.collect(cdk.propertyValidator("containerStartupHealthCheckTimeoutInSeconds", cdk.validateNumber)(properties.containerStartupHealthCheckTimeoutInSeconds));
  errors.collect(cdk.propertyValidator("enableSsmAccess", cdk.validateBoolean)(properties.enableSsmAccess));
  errors.collect(cdk.propertyValidator("initialInstanceCount", cdk.validateNumber)(properties.initialInstanceCount));
  errors.collect(cdk.propertyValidator("initialVariantWeight", cdk.validateNumber)(properties.initialVariantWeight));
  errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
  errors.collect(cdk.propertyValidator("managedInstanceScaling", CfnEndpointConfigManagedInstanceScalingPropertyValidator)(properties.managedInstanceScaling));
  errors.collect(cdk.propertyValidator("modelDataDownloadTimeoutInSeconds", cdk.validateNumber)(properties.modelDataDownloadTimeoutInSeconds));
  errors.collect(cdk.propertyValidator("modelName", cdk.validateString)(properties.modelName));
  errors.collect(cdk.propertyValidator("routingConfig", CfnEndpointConfigRoutingConfigPropertyValidator)(properties.routingConfig));
  errors.collect(cdk.propertyValidator("serverlessConfig", CfnEndpointConfigServerlessConfigPropertyValidator)(properties.serverlessConfig));
  errors.collect(cdk.propertyValidator("variantName", cdk.requiredValidator)(properties.variantName));
  errors.collect(cdk.propertyValidator("variantName", cdk.validateString)(properties.variantName));
  errors.collect(cdk.propertyValidator("volumeSizeInGb", cdk.validateNumber)(properties.volumeSizeInGb));
  return errors.wrap("supplied properties not correct for \"ProductionVariantProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointConfigProductionVariantPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointConfigProductionVariantPropertyValidator(properties).assertSuccess();
  return {
    "AcceleratorType": cdk.stringToCloudFormation(properties.acceleratorType),
    "ContainerStartupHealthCheckTimeoutInSeconds": cdk.numberToCloudFormation(properties.containerStartupHealthCheckTimeoutInSeconds),
    "EnableSSMAccess": cdk.booleanToCloudFormation(properties.enableSsmAccess),
    "InitialInstanceCount": cdk.numberToCloudFormation(properties.initialInstanceCount),
    "InitialVariantWeight": cdk.numberToCloudFormation(properties.initialVariantWeight),
    "InstanceType": cdk.stringToCloudFormation(properties.instanceType),
    "ManagedInstanceScaling": convertCfnEndpointConfigManagedInstanceScalingPropertyToCloudFormation(properties.managedInstanceScaling),
    "ModelDataDownloadTimeoutInSeconds": cdk.numberToCloudFormation(properties.modelDataDownloadTimeoutInSeconds),
    "ModelName": cdk.stringToCloudFormation(properties.modelName),
    "RoutingConfig": convertCfnEndpointConfigRoutingConfigPropertyToCloudFormation(properties.routingConfig),
    "ServerlessConfig": convertCfnEndpointConfigServerlessConfigPropertyToCloudFormation(properties.serverlessConfig),
    "VariantName": cdk.stringToCloudFormation(properties.variantName),
    "VolumeSizeInGB": cdk.numberToCloudFormation(properties.volumeSizeInGb)
  };
}

// @ts-ignore TS6133
function CfnEndpointConfigProductionVariantPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnEndpointConfig.ProductionVariantProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.ProductionVariantProperty>();
  ret.addPropertyResult("acceleratorType", "AcceleratorType", (properties.AcceleratorType != null ? cfn_parse.FromCloudFormation.getString(properties.AcceleratorType) : undefined));
  ret.addPropertyResult("containerStartupHealthCheckTimeoutInSeconds", "ContainerStartupHealthCheckTimeoutInSeconds", (properties.ContainerStartupHealthCheckTimeoutInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.ContainerStartupHealthCheckTimeoutInSeconds) : undefined));
  ret.addPropertyResult("enableSsmAccess", "EnableSSMAccess", (properties.EnableSSMAccess != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableSSMAccess) : undefined));
  ret.addPropertyResult("initialInstanceCount", "InitialInstanceCount", (properties.InitialInstanceCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.InitialInstanceCount) : undefined));
  ret.addPropertyResult("initialVariantWeight", "InitialVariantWeight", (properties.InitialVariantWeight != null ? cfn_parse.FromCloudFormation.getNumber(properties.InitialVariantWeight) : undefined));
  ret.addPropertyResult("instanceType", "InstanceType", (properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined));
  ret.addPropertyResult("managedInstanceScaling", "ManagedInstanceScaling", (properties.ManagedInstanceScaling != null ? CfnEndpointConfigManagedInstanceScalingPropertyFromCloudFormation(properties.ManagedInstanceScaling) : undefined));
  ret.addPropertyResult("modelDataDownloadTimeoutInSeconds", "ModelDataDownloadTimeoutInSeconds", (properties.ModelDataDownloadTimeoutInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.ModelDataDownloadTimeoutInSeconds) : undefined));
  ret.addPropertyResult("modelName", "ModelName", (properties.ModelName != null ? cfn_parse.FromCloudFormation.getString(properties.ModelName) : undefined));
  ret.addPropertyResult("routingConfig", "RoutingConfig", (properties.RoutingConfig != null ? CfnEndpointConfigRoutingConfigPropertyFromCloudFormation(properties.RoutingConfig) : undefined));
  ret.addPropertyResult("serverlessConfig", "ServerlessConfig", (properties.ServerlessConfig != null ? CfnEndpointConfigServerlessConfigPropertyFromCloudFormation(properties.ServerlessConfig) : undefined));
  ret.addPropertyResult("variantName", "VariantName", (properties.VariantName != null ? cfn_parse.FromCloudFormation.getString(properties.VariantName) : undefined));
  ret.addPropertyResult("volumeSizeInGb", "VolumeSizeInGB", (properties.VolumeSizeInGB != null ? cfn_parse.FromCloudFormation.getNumber(properties.VolumeSizeInGB) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CaptureOptionProperty`
 *
 * @param properties - the TypeScript properties of a `CaptureOptionProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointConfigCaptureOptionPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("captureMode", cdk.requiredValidator)(properties.captureMode));
  errors.collect(cdk.propertyValidator("captureMode", cdk.validateString)(properties.captureMode));
  return errors.wrap("supplied properties not correct for \"CaptureOptionProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointConfigCaptureOptionPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointConfigCaptureOptionPropertyValidator(properties).assertSuccess();
  return {
    "CaptureMode": cdk.stringToCloudFormation(properties.captureMode)
  };
}

// @ts-ignore TS6133
function CfnEndpointConfigCaptureOptionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.CaptureOptionProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.CaptureOptionProperty>();
  ret.addPropertyResult("captureMode", "CaptureMode", (properties.CaptureMode != null ? cfn_parse.FromCloudFormation.getString(properties.CaptureMode) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CaptureContentTypeHeaderProperty`
 *
 * @param properties - the TypeScript properties of a `CaptureContentTypeHeaderProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointConfigCaptureContentTypeHeaderPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("csvContentTypes", cdk.listValidator(cdk.validateString))(properties.csvContentTypes));
  errors.collect(cdk.propertyValidator("jsonContentTypes", cdk.listValidator(cdk.validateString))(properties.jsonContentTypes));
  return errors.wrap("supplied properties not correct for \"CaptureContentTypeHeaderProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointConfigCaptureContentTypeHeaderPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointConfigCaptureContentTypeHeaderPropertyValidator(properties).assertSuccess();
  return {
    "CsvContentTypes": cdk.listMapper(cdk.stringToCloudFormation)(properties.csvContentTypes),
    "JsonContentTypes": cdk.listMapper(cdk.stringToCloudFormation)(properties.jsonContentTypes)
  };
}

// @ts-ignore TS6133
function CfnEndpointConfigCaptureContentTypeHeaderPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.CaptureContentTypeHeaderProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.CaptureContentTypeHeaderProperty>();
  ret.addPropertyResult("csvContentTypes", "CsvContentTypes", (properties.CsvContentTypes != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.CsvContentTypes) : undefined));
  ret.addPropertyResult("jsonContentTypes", "JsonContentTypes", (properties.JsonContentTypes != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.JsonContentTypes) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DataCaptureConfigProperty`
 *
 * @param properties - the TypeScript properties of a `DataCaptureConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointConfigDataCaptureConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("captureContentTypeHeader", CfnEndpointConfigCaptureContentTypeHeaderPropertyValidator)(properties.captureContentTypeHeader));
  errors.collect(cdk.propertyValidator("captureOptions", cdk.requiredValidator)(properties.captureOptions));
  errors.collect(cdk.propertyValidator("captureOptions", cdk.listValidator(CfnEndpointConfigCaptureOptionPropertyValidator))(properties.captureOptions));
  errors.collect(cdk.propertyValidator("destinationS3Uri", cdk.requiredValidator)(properties.destinationS3Uri));
  errors.collect(cdk.propertyValidator("destinationS3Uri", cdk.validateString)(properties.destinationS3Uri));
  errors.collect(cdk.propertyValidator("enableCapture", cdk.validateBoolean)(properties.enableCapture));
  errors.collect(cdk.propertyValidator("initialSamplingPercentage", cdk.requiredValidator)(properties.initialSamplingPercentage));
  errors.collect(cdk.propertyValidator("initialSamplingPercentage", cdk.validateNumber)(properties.initialSamplingPercentage));
  errors.collect(cdk.propertyValidator("kmsKeyId", cdk.validateString)(properties.kmsKeyId));
  return errors.wrap("supplied properties not correct for \"DataCaptureConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointConfigDataCaptureConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointConfigDataCaptureConfigPropertyValidator(properties).assertSuccess();
  return {
    "CaptureContentTypeHeader": convertCfnEndpointConfigCaptureContentTypeHeaderPropertyToCloudFormation(properties.captureContentTypeHeader),
    "CaptureOptions": cdk.listMapper(convertCfnEndpointConfigCaptureOptionPropertyToCloudFormation)(properties.captureOptions),
    "DestinationS3Uri": cdk.stringToCloudFormation(properties.destinationS3Uri),
    "EnableCapture": cdk.booleanToCloudFormation(properties.enableCapture),
    "InitialSamplingPercentage": cdk.numberToCloudFormation(properties.initialSamplingPercentage),
    "KmsKeyId": cdk.stringToCloudFormation(properties.kmsKeyId)
  };
}

// @ts-ignore TS6133
function CfnEndpointConfigDataCaptureConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.DataCaptureConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.DataCaptureConfigProperty>();
  ret.addPropertyResult("captureContentTypeHeader", "CaptureContentTypeHeader", (properties.CaptureContentTypeHeader != null ? CfnEndpointConfigCaptureContentTypeHeaderPropertyFromCloudFormation(properties.CaptureContentTypeHeader) : undefined));
  ret.addPropertyResult("captureOptions", "CaptureOptions", (properties.CaptureOptions != null ? cfn_parse.FromCloudFormation.getArray(CfnEndpointConfigCaptureOptionPropertyFromCloudFormation)(properties.CaptureOptions) : undefined));
  ret.addPropertyResult("destinationS3Uri", "DestinationS3Uri", (properties.DestinationS3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.DestinationS3Uri) : undefined));
  ret.addPropertyResult("enableCapture", "EnableCapture", (properties.EnableCapture != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableCapture) : undefined));
  ret.addPropertyResult("initialSamplingPercentage", "InitialSamplingPercentage", (properties.InitialSamplingPercentage != null ? cfn_parse.FromCloudFormation.getNumber(properties.InitialSamplingPercentage) : undefined));
  ret.addPropertyResult("kmsKeyId", "KmsKeyId", (properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `AsyncInferenceNotificationConfigProperty`
 *
 * @param properties - the TypeScript properties of a `AsyncInferenceNotificationConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointConfigAsyncInferenceNotificationConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("errorTopic", cdk.validateString)(properties.errorTopic));
  errors.collect(cdk.propertyValidator("includeInferenceResponseIn", cdk.listValidator(cdk.validateString))(properties.includeInferenceResponseIn));
  errors.collect(cdk.propertyValidator("successTopic", cdk.validateString)(properties.successTopic));
  return errors.wrap("supplied properties not correct for \"AsyncInferenceNotificationConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointConfigAsyncInferenceNotificationConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointConfigAsyncInferenceNotificationConfigPropertyValidator(properties).assertSuccess();
  return {
    "ErrorTopic": cdk.stringToCloudFormation(properties.errorTopic),
    "IncludeInferenceResponseIn": cdk.listMapper(cdk.stringToCloudFormation)(properties.includeInferenceResponseIn),
    "SuccessTopic": cdk.stringToCloudFormation(properties.successTopic)
  };
}

// @ts-ignore TS6133
function CfnEndpointConfigAsyncInferenceNotificationConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.AsyncInferenceNotificationConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.AsyncInferenceNotificationConfigProperty>();
  ret.addPropertyResult("errorTopic", "ErrorTopic", (properties.ErrorTopic != null ? cfn_parse.FromCloudFormation.getString(properties.ErrorTopic) : undefined));
  ret.addPropertyResult("includeInferenceResponseIn", "IncludeInferenceResponseIn", (properties.IncludeInferenceResponseIn != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.IncludeInferenceResponseIn) : undefined));
  ret.addPropertyResult("successTopic", "SuccessTopic", (properties.SuccessTopic != null ? cfn_parse.FromCloudFormation.getString(properties.SuccessTopic) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `AsyncInferenceOutputConfigProperty`
 *
 * @param properties - the TypeScript properties of a `AsyncInferenceOutputConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointConfigAsyncInferenceOutputConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("kmsKeyId", cdk.validateString)(properties.kmsKeyId));
  errors.collect(cdk.propertyValidator("notificationConfig", CfnEndpointConfigAsyncInferenceNotificationConfigPropertyValidator)(properties.notificationConfig));
  errors.collect(cdk.propertyValidator("s3FailurePath", cdk.validateString)(properties.s3FailurePath));
  errors.collect(cdk.propertyValidator("s3OutputPath", cdk.validateString)(properties.s3OutputPath));
  return errors.wrap("supplied properties not correct for \"AsyncInferenceOutputConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointConfigAsyncInferenceOutputConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointConfigAsyncInferenceOutputConfigPropertyValidator(properties).assertSuccess();
  return {
    "KmsKeyId": cdk.stringToCloudFormation(properties.kmsKeyId),
    "NotificationConfig": convertCfnEndpointConfigAsyncInferenceNotificationConfigPropertyToCloudFormation(properties.notificationConfig),
    "S3FailurePath": cdk.stringToCloudFormation(properties.s3FailurePath),
    "S3OutputPath": cdk.stringToCloudFormation(properties.s3OutputPath)
  };
}

// @ts-ignore TS6133
function CfnEndpointConfigAsyncInferenceOutputConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.AsyncInferenceOutputConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.AsyncInferenceOutputConfigProperty>();
  ret.addPropertyResult("kmsKeyId", "KmsKeyId", (properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined));
  ret.addPropertyResult("notificationConfig", "NotificationConfig", (properties.NotificationConfig != null ? CfnEndpointConfigAsyncInferenceNotificationConfigPropertyFromCloudFormation(properties.NotificationConfig) : undefined));
  ret.addPropertyResult("s3FailurePath", "S3FailurePath", (properties.S3FailurePath != null ? cfn_parse.FromCloudFormation.getString(properties.S3FailurePath) : undefined));
  ret.addPropertyResult("s3OutputPath", "S3OutputPath", (properties.S3OutputPath != null ? cfn_parse.FromCloudFormation.getString(properties.S3OutputPath) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `AsyncInferenceClientConfigProperty`
 *
 * @param properties - the TypeScript properties of a `AsyncInferenceClientConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointConfigAsyncInferenceClientConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("maxConcurrentInvocationsPerInstance", cdk.validateNumber)(properties.maxConcurrentInvocationsPerInstance));
  return errors.wrap("supplied properties not correct for \"AsyncInferenceClientConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointConfigAsyncInferenceClientConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointConfigAsyncInferenceClientConfigPropertyValidator(properties).assertSuccess();
  return {
    "MaxConcurrentInvocationsPerInstance": cdk.numberToCloudFormation(properties.maxConcurrentInvocationsPerInstance)
  };
}

// @ts-ignore TS6133
function CfnEndpointConfigAsyncInferenceClientConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.AsyncInferenceClientConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.AsyncInferenceClientConfigProperty>();
  ret.addPropertyResult("maxConcurrentInvocationsPerInstance", "MaxConcurrentInvocationsPerInstance", (properties.MaxConcurrentInvocationsPerInstance != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxConcurrentInvocationsPerInstance) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `AsyncInferenceConfigProperty`
 *
 * @param properties - the TypeScript properties of a `AsyncInferenceConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointConfigAsyncInferenceConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("clientConfig", CfnEndpointConfigAsyncInferenceClientConfigPropertyValidator)(properties.clientConfig));
  errors.collect(cdk.propertyValidator("outputConfig", cdk.requiredValidator)(properties.outputConfig));
  errors.collect(cdk.propertyValidator("outputConfig", CfnEndpointConfigAsyncInferenceOutputConfigPropertyValidator)(properties.outputConfig));
  return errors.wrap("supplied properties not correct for \"AsyncInferenceConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointConfigAsyncInferenceConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointConfigAsyncInferenceConfigPropertyValidator(properties).assertSuccess();
  return {
    "ClientConfig": convertCfnEndpointConfigAsyncInferenceClientConfigPropertyToCloudFormation(properties.clientConfig),
    "OutputConfig": convertCfnEndpointConfigAsyncInferenceOutputConfigPropertyToCloudFormation(properties.outputConfig)
  };
}

// @ts-ignore TS6133
function CfnEndpointConfigAsyncInferenceConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.AsyncInferenceConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.AsyncInferenceConfigProperty>();
  ret.addPropertyResult("clientConfig", "ClientConfig", (properties.ClientConfig != null ? CfnEndpointConfigAsyncInferenceClientConfigPropertyFromCloudFormation(properties.ClientConfig) : undefined));
  ret.addPropertyResult("outputConfig", "OutputConfig", (properties.OutputConfig != null ? CfnEndpointConfigAsyncInferenceOutputConfigPropertyFromCloudFormation(properties.OutputConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ClarifyInferenceConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ClarifyInferenceConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointConfigClarifyInferenceConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("contentTemplate", cdk.validateString)(properties.contentTemplate));
  errors.collect(cdk.propertyValidator("featureHeaders", cdk.listValidator(cdk.validateString))(properties.featureHeaders));
  errors.collect(cdk.propertyValidator("featureTypes", cdk.listValidator(cdk.validateString))(properties.featureTypes));
  errors.collect(cdk.propertyValidator("featuresAttribute", cdk.validateString)(properties.featuresAttribute));
  errors.collect(cdk.propertyValidator("labelAttribute", cdk.validateString)(properties.labelAttribute));
  errors.collect(cdk.propertyValidator("labelHeaders", cdk.listValidator(cdk.validateString))(properties.labelHeaders));
  errors.collect(cdk.propertyValidator("labelIndex", cdk.validateNumber)(properties.labelIndex));
  errors.collect(cdk.propertyValidator("maxPayloadInMb", cdk.validateNumber)(properties.maxPayloadInMb));
  errors.collect(cdk.propertyValidator("maxRecordCount", cdk.validateNumber)(properties.maxRecordCount));
  errors.collect(cdk.propertyValidator("probabilityAttribute", cdk.validateString)(properties.probabilityAttribute));
  errors.collect(cdk.propertyValidator("probabilityIndex", cdk.validateNumber)(properties.probabilityIndex));
  return errors.wrap("supplied properties not correct for \"ClarifyInferenceConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointConfigClarifyInferenceConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointConfigClarifyInferenceConfigPropertyValidator(properties).assertSuccess();
  return {
    "ContentTemplate": cdk.stringToCloudFormation(properties.contentTemplate),
    "FeatureHeaders": cdk.listMapper(cdk.stringToCloudFormation)(properties.featureHeaders),
    "FeatureTypes": cdk.listMapper(cdk.stringToCloudFormation)(properties.featureTypes),
    "FeaturesAttribute": cdk.stringToCloudFormation(properties.featuresAttribute),
    "LabelAttribute": cdk.stringToCloudFormation(properties.labelAttribute),
    "LabelHeaders": cdk.listMapper(cdk.stringToCloudFormation)(properties.labelHeaders),
    "LabelIndex": cdk.numberToCloudFormation(properties.labelIndex),
    "MaxPayloadInMB": cdk.numberToCloudFormation(properties.maxPayloadInMb),
    "MaxRecordCount": cdk.numberToCloudFormation(properties.maxRecordCount),
    "ProbabilityAttribute": cdk.stringToCloudFormation(properties.probabilityAttribute),
    "ProbabilityIndex": cdk.numberToCloudFormation(properties.probabilityIndex)
  };
}

// @ts-ignore TS6133
function CfnEndpointConfigClarifyInferenceConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.ClarifyInferenceConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.ClarifyInferenceConfigProperty>();
  ret.addPropertyResult("contentTemplate", "ContentTemplate", (properties.ContentTemplate != null ? cfn_parse.FromCloudFormation.getString(properties.ContentTemplate) : undefined));
  ret.addPropertyResult("featureHeaders", "FeatureHeaders", (properties.FeatureHeaders != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.FeatureHeaders) : undefined));
  ret.addPropertyResult("featuresAttribute", "FeaturesAttribute", (properties.FeaturesAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.FeaturesAttribute) : undefined));
  ret.addPropertyResult("featureTypes", "FeatureTypes", (properties.FeatureTypes != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.FeatureTypes) : undefined));
  ret.addPropertyResult("labelAttribute", "LabelAttribute", (properties.LabelAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.LabelAttribute) : undefined));
  ret.addPropertyResult("labelHeaders", "LabelHeaders", (properties.LabelHeaders != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.LabelHeaders) : undefined));
  ret.addPropertyResult("labelIndex", "LabelIndex", (properties.LabelIndex != null ? cfn_parse.FromCloudFormation.getNumber(properties.LabelIndex) : undefined));
  ret.addPropertyResult("maxPayloadInMb", "MaxPayloadInMB", (properties.MaxPayloadInMB != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxPayloadInMB) : undefined));
  ret.addPropertyResult("maxRecordCount", "MaxRecordCount", (properties.MaxRecordCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxRecordCount) : undefined));
  ret.addPropertyResult("probabilityAttribute", "ProbabilityAttribute", (properties.ProbabilityAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.ProbabilityAttribute) : undefined));
  ret.addPropertyResult("probabilityIndex", "ProbabilityIndex", (properties.ProbabilityIndex != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProbabilityIndex) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ClarifyTextConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ClarifyTextConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointConfigClarifyTextConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("granularity", cdk.requiredValidator)(properties.granularity));
  errors.collect(cdk.propertyValidator("granularity", cdk.validateString)(properties.granularity));
  errors.collect(cdk.propertyValidator("language", cdk.requiredValidator)(properties.language));
  errors.collect(cdk.propertyValidator("language", cdk.validateString)(properties.language));
  return errors.wrap("supplied properties not correct for \"ClarifyTextConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointConfigClarifyTextConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointConfigClarifyTextConfigPropertyValidator(properties).assertSuccess();
  return {
    "Granularity": cdk.stringToCloudFormation(properties.granularity),
    "Language": cdk.stringToCloudFormation(properties.language)
  };
}

// @ts-ignore TS6133
function CfnEndpointConfigClarifyTextConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.ClarifyTextConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.ClarifyTextConfigProperty>();
  ret.addPropertyResult("granularity", "Granularity", (properties.Granularity != null ? cfn_parse.FromCloudFormation.getString(properties.Granularity) : undefined));
  ret.addPropertyResult("language", "Language", (properties.Language != null ? cfn_parse.FromCloudFormation.getString(properties.Language) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ClarifyShapBaselineConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ClarifyShapBaselineConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointConfigClarifyShapBaselineConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("mimeType", cdk.validateString)(properties.mimeType));
  errors.collect(cdk.propertyValidator("shapBaseline", cdk.validateString)(properties.shapBaseline));
  errors.collect(cdk.propertyValidator("shapBaselineUri", cdk.validateString)(properties.shapBaselineUri));
  return errors.wrap("supplied properties not correct for \"ClarifyShapBaselineConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointConfigClarifyShapBaselineConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointConfigClarifyShapBaselineConfigPropertyValidator(properties).assertSuccess();
  return {
    "MimeType": cdk.stringToCloudFormation(properties.mimeType),
    "ShapBaseline": cdk.stringToCloudFormation(properties.shapBaseline),
    "ShapBaselineUri": cdk.stringToCloudFormation(properties.shapBaselineUri)
  };
}

// @ts-ignore TS6133
function CfnEndpointConfigClarifyShapBaselineConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.ClarifyShapBaselineConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.ClarifyShapBaselineConfigProperty>();
  ret.addPropertyResult("mimeType", "MimeType", (properties.MimeType != null ? cfn_parse.FromCloudFormation.getString(properties.MimeType) : undefined));
  ret.addPropertyResult("shapBaseline", "ShapBaseline", (properties.ShapBaseline != null ? cfn_parse.FromCloudFormation.getString(properties.ShapBaseline) : undefined));
  ret.addPropertyResult("shapBaselineUri", "ShapBaselineUri", (properties.ShapBaselineUri != null ? cfn_parse.FromCloudFormation.getString(properties.ShapBaselineUri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ClarifyShapConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ClarifyShapConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointConfigClarifyShapConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("numberOfSamples", cdk.validateNumber)(properties.numberOfSamples));
  errors.collect(cdk.propertyValidator("seed", cdk.validateNumber)(properties.seed));
  errors.collect(cdk.propertyValidator("shapBaselineConfig", cdk.requiredValidator)(properties.shapBaselineConfig));
  errors.collect(cdk.propertyValidator("shapBaselineConfig", CfnEndpointConfigClarifyShapBaselineConfigPropertyValidator)(properties.shapBaselineConfig));
  errors.collect(cdk.propertyValidator("textConfig", CfnEndpointConfigClarifyTextConfigPropertyValidator)(properties.textConfig));
  errors.collect(cdk.propertyValidator("useLogit", cdk.validateBoolean)(properties.useLogit));
  return errors.wrap("supplied properties not correct for \"ClarifyShapConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointConfigClarifyShapConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointConfigClarifyShapConfigPropertyValidator(properties).assertSuccess();
  return {
    "NumberOfSamples": cdk.numberToCloudFormation(properties.numberOfSamples),
    "Seed": cdk.numberToCloudFormation(properties.seed),
    "ShapBaselineConfig": convertCfnEndpointConfigClarifyShapBaselineConfigPropertyToCloudFormation(properties.shapBaselineConfig),
    "TextConfig": convertCfnEndpointConfigClarifyTextConfigPropertyToCloudFormation(properties.textConfig),
    "UseLogit": cdk.booleanToCloudFormation(properties.useLogit)
  };
}

// @ts-ignore TS6133
function CfnEndpointConfigClarifyShapConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.ClarifyShapConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.ClarifyShapConfigProperty>();
  ret.addPropertyResult("numberOfSamples", "NumberOfSamples", (properties.NumberOfSamples != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumberOfSamples) : undefined));
  ret.addPropertyResult("seed", "Seed", (properties.Seed != null ? cfn_parse.FromCloudFormation.getNumber(properties.Seed) : undefined));
  ret.addPropertyResult("shapBaselineConfig", "ShapBaselineConfig", (properties.ShapBaselineConfig != null ? CfnEndpointConfigClarifyShapBaselineConfigPropertyFromCloudFormation(properties.ShapBaselineConfig) : undefined));
  ret.addPropertyResult("textConfig", "TextConfig", (properties.TextConfig != null ? CfnEndpointConfigClarifyTextConfigPropertyFromCloudFormation(properties.TextConfig) : undefined));
  ret.addPropertyResult("useLogit", "UseLogit", (properties.UseLogit != null ? cfn_parse.FromCloudFormation.getBoolean(properties.UseLogit) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ClarifyExplainerConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ClarifyExplainerConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointConfigClarifyExplainerConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("enableExplanations", cdk.validateString)(properties.enableExplanations));
  errors.collect(cdk.propertyValidator("inferenceConfig", CfnEndpointConfigClarifyInferenceConfigPropertyValidator)(properties.inferenceConfig));
  errors.collect(cdk.propertyValidator("shapConfig", cdk.requiredValidator)(properties.shapConfig));
  errors.collect(cdk.propertyValidator("shapConfig", CfnEndpointConfigClarifyShapConfigPropertyValidator)(properties.shapConfig));
  return errors.wrap("supplied properties not correct for \"ClarifyExplainerConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointConfigClarifyExplainerConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointConfigClarifyExplainerConfigPropertyValidator(properties).assertSuccess();
  return {
    "EnableExplanations": cdk.stringToCloudFormation(properties.enableExplanations),
    "InferenceConfig": convertCfnEndpointConfigClarifyInferenceConfigPropertyToCloudFormation(properties.inferenceConfig),
    "ShapConfig": convertCfnEndpointConfigClarifyShapConfigPropertyToCloudFormation(properties.shapConfig)
  };
}

// @ts-ignore TS6133
function CfnEndpointConfigClarifyExplainerConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.ClarifyExplainerConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.ClarifyExplainerConfigProperty>();
  ret.addPropertyResult("enableExplanations", "EnableExplanations", (properties.EnableExplanations != null ? cfn_parse.FromCloudFormation.getString(properties.EnableExplanations) : undefined));
  ret.addPropertyResult("inferenceConfig", "InferenceConfig", (properties.InferenceConfig != null ? CfnEndpointConfigClarifyInferenceConfigPropertyFromCloudFormation(properties.InferenceConfig) : undefined));
  ret.addPropertyResult("shapConfig", "ShapConfig", (properties.ShapConfig != null ? CfnEndpointConfigClarifyShapConfigPropertyFromCloudFormation(properties.ShapConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ExplainerConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ExplainerConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointConfigExplainerConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("clarifyExplainerConfig", CfnEndpointConfigClarifyExplainerConfigPropertyValidator)(properties.clarifyExplainerConfig));
  return errors.wrap("supplied properties not correct for \"ExplainerConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointConfigExplainerConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointConfigExplainerConfigPropertyValidator(properties).assertSuccess();
  return {
    "ClarifyExplainerConfig": convertCfnEndpointConfigClarifyExplainerConfigPropertyToCloudFormation(properties.clarifyExplainerConfig)
  };
}

// @ts-ignore TS6133
function CfnEndpointConfigExplainerConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfig.ExplainerConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.ExplainerConfigProperty>();
  ret.addPropertyResult("clarifyExplainerConfig", "ClarifyExplainerConfig", (properties.ClarifyExplainerConfig != null ? CfnEndpointConfigClarifyExplainerConfigPropertyFromCloudFormation(properties.ClarifyExplainerConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `VpcConfigProperty`
 *
 * @param properties - the TypeScript properties of a `VpcConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointConfigVpcConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("securityGroupIds", cdk.requiredValidator)(properties.securityGroupIds));
  errors.collect(cdk.propertyValidator("securityGroupIds", cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
  errors.collect(cdk.propertyValidator("subnets", cdk.requiredValidator)(properties.subnets));
  errors.collect(cdk.propertyValidator("subnets", cdk.listValidator(cdk.validateString))(properties.subnets));
  return errors.wrap("supplied properties not correct for \"VpcConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnEndpointConfigVpcConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointConfigVpcConfigPropertyValidator(properties).assertSuccess();
  return {
    "SecurityGroupIds": cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
    "Subnets": cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets)
  };
}

// @ts-ignore TS6133
function CfnEndpointConfigVpcConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnEndpointConfig.VpcConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfig.VpcConfigProperty>();
  ret.addPropertyResult("securityGroupIds", "SecurityGroupIds", (properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SecurityGroupIds) : undefined));
  ret.addPropertyResult("subnets", "Subnets", (properties.Subnets != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.Subnets) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnEndpointConfigProps`
 *
 * @param properties - the TypeScript properties of a `CfnEndpointConfigProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnEndpointConfigPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("asyncInferenceConfig", CfnEndpointConfigAsyncInferenceConfigPropertyValidator)(properties.asyncInferenceConfig));
  errors.collect(cdk.propertyValidator("dataCaptureConfig", CfnEndpointConfigDataCaptureConfigPropertyValidator)(properties.dataCaptureConfig));
  errors.collect(cdk.propertyValidator("enableNetworkIsolation", cdk.validateBoolean)(properties.enableNetworkIsolation));
  errors.collect(cdk.propertyValidator("endpointConfigName", cdk.validateString)(properties.endpointConfigName));
  errors.collect(cdk.propertyValidator("executionRoleArn", cdk.validateString)(properties.executionRoleArn));
  errors.collect(cdk.propertyValidator("explainerConfig", CfnEndpointConfigExplainerConfigPropertyValidator)(properties.explainerConfig));
  errors.collect(cdk.propertyValidator("kmsKeyId", cdk.validateString)(properties.kmsKeyId));
  errors.collect(cdk.propertyValidator("productionVariants", cdk.requiredValidator)(properties.productionVariants));
  errors.collect(cdk.propertyValidator("productionVariants", cdk.listValidator(CfnEndpointConfigProductionVariantPropertyValidator))(properties.productionVariants));
  errors.collect(cdk.propertyValidator("shadowProductionVariants", cdk.listValidator(CfnEndpointConfigProductionVariantPropertyValidator))(properties.shadowProductionVariants));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  errors.collect(cdk.propertyValidator("vpcConfig", CfnEndpointConfigVpcConfigPropertyValidator)(properties.vpcConfig));
  return errors.wrap("supplied properties not correct for \"CfnEndpointConfigProps\"");
}

// @ts-ignore TS6133
function convertCfnEndpointConfigPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnEndpointConfigPropsValidator(properties).assertSuccess();
  return {
    "AsyncInferenceConfig": convertCfnEndpointConfigAsyncInferenceConfigPropertyToCloudFormation(properties.asyncInferenceConfig),
    "DataCaptureConfig": convertCfnEndpointConfigDataCaptureConfigPropertyToCloudFormation(properties.dataCaptureConfig),
    "EnableNetworkIsolation": cdk.booleanToCloudFormation(properties.enableNetworkIsolation),
    "EndpointConfigName": cdk.stringToCloudFormation(properties.endpointConfigName),
    "ExecutionRoleArn": cdk.stringToCloudFormation(properties.executionRoleArn),
    "ExplainerConfig": convertCfnEndpointConfigExplainerConfigPropertyToCloudFormation(properties.explainerConfig),
    "KmsKeyId": cdk.stringToCloudFormation(properties.kmsKeyId),
    "ProductionVariants": cdk.listMapper(convertCfnEndpointConfigProductionVariantPropertyToCloudFormation)(properties.productionVariants),
    "ShadowProductionVariants": cdk.listMapper(convertCfnEndpointConfigProductionVariantPropertyToCloudFormation)(properties.shadowProductionVariants),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
    "VpcConfig": convertCfnEndpointConfigVpcConfigPropertyToCloudFormation(properties.vpcConfig)
  };
}

// @ts-ignore TS6133
function CfnEndpointConfigPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnEndpointConfigProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnEndpointConfigProps>();
  ret.addPropertyResult("asyncInferenceConfig", "AsyncInferenceConfig", (properties.AsyncInferenceConfig != null ? CfnEndpointConfigAsyncInferenceConfigPropertyFromCloudFormation(properties.AsyncInferenceConfig) : undefined));
  ret.addPropertyResult("dataCaptureConfig", "DataCaptureConfig", (properties.DataCaptureConfig != null ? CfnEndpointConfigDataCaptureConfigPropertyFromCloudFormation(properties.DataCaptureConfig) : undefined));
  ret.addPropertyResult("enableNetworkIsolation", "EnableNetworkIsolation", (properties.EnableNetworkIsolation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableNetworkIsolation) : undefined));
  ret.addPropertyResult("endpointConfigName", "EndpointConfigName", (properties.EndpointConfigName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointConfigName) : undefined));
  ret.addPropertyResult("executionRoleArn", "ExecutionRoleArn", (properties.ExecutionRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.ExecutionRoleArn) : undefined));
  ret.addPropertyResult("explainerConfig", "ExplainerConfig", (properties.ExplainerConfig != null ? CfnEndpointConfigExplainerConfigPropertyFromCloudFormation(properties.ExplainerConfig) : undefined));
  ret.addPropertyResult("kmsKeyId", "KmsKeyId", (properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined));
  ret.addPropertyResult("productionVariants", "ProductionVariants", (properties.ProductionVariants != null ? cfn_parse.FromCloudFormation.getArray(CfnEndpointConfigProductionVariantPropertyFromCloudFormation)(properties.ProductionVariants) : undefined));
  ret.addPropertyResult("shadowProductionVariants", "ShadowProductionVariants", (properties.ShadowProductionVariants != null ? cfn_parse.FromCloudFormation.getArray(CfnEndpointConfigProductionVariantPropertyFromCloudFormation)(properties.ShadowProductionVariants) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addPropertyResult("vpcConfig", "VpcConfig", (properties.VpcConfig != null ? CfnEndpointConfigVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Create a new `FeatureGroup` .
 *
 * A `FeatureGroup` is a group of `Features` defined in the `FeatureStore` to describe a `Record` .
 *
 * The `FeatureGroup` defines the schema and features contained in the FeatureGroup. A `FeatureGroup` definition is composed of a list of `Features` , a `RecordIdentifierFeatureName` , an `EventTimeFeatureName` and configurations for its `OnlineStore` and `OfflineStore` . Check [AWS service quotas](https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html) to see the `FeatureGroup` s quota for your AWS account.
 *
 * > You must include at least one of `OnlineStoreConfig` and `OfflineStoreConfig` to create a `FeatureGroup` .
 *
 * @cloudformationResource AWS::SageMaker::FeatureGroup
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-featuregroup.html
 */
export class CfnFeatureGroup extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::FeatureGroup";

  /**
   * Build a CfnFeatureGroup from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnFeatureGroup {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnFeatureGroupPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnFeatureGroup(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The time a `FeatureGroup` was created.
   *
   * @cloudformationAttribute CreationTime
   */
  public readonly attrCreationTime: string;

  /**
   * A `FeatureGroup` status.
   *
   * @cloudformationAttribute FeatureGroupStatus
   */
  public readonly attrFeatureGroupStatus: string;

  /**
   * A free form description of a `FeatureGroup` .
   */
  public description?: string;

  /**
   * The name of the feature that stores the `EventTime` of a Record in a `FeatureGroup` .
   */
  public eventTimeFeatureName: string;

  /**
   * A list of `Feature` s. Each `Feature` must include a `FeatureName` and a `FeatureType` .
   */
  public featureDefinitions: Array<CfnFeatureGroup.FeatureDefinitionProperty | cdk.IResolvable> | cdk.IResolvable;

  /**
   * The name of the `FeatureGroup` .
   */
  public featureGroupName: string;

  /**
   * The configuration of an `OfflineStore` .
   */
  public offlineStoreConfig?: any | cdk.IResolvable;

  /**
   * The configuration of an `OnlineStore` .
   */
  public onlineStoreConfig?: any | cdk.IResolvable;

  /**
   * The name of the `Feature` whose value uniquely identifies a `Record` defined in the `FeatureGroup` `FeatureDefinitions` .
   */
  public recordIdentifierFeatureName: string;

  /**
   * The Amazon Resource Name (ARN) of the IAM execution role used to create the feature group.
   */
  public roleArn?: string;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * Tags used to define a `FeatureGroup` .
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * Used to set feature group throughput configuration.
   */
  public throughputConfig?: cdk.IResolvable | CfnFeatureGroup.ThroughputConfigProperty;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnFeatureGroupProps) {
    super(scope, id, {
      "type": CfnFeatureGroup.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "eventTimeFeatureName", this);
    cdk.requireProperty(props, "featureDefinitions", this);
    cdk.requireProperty(props, "featureGroupName", this);
    cdk.requireProperty(props, "recordIdentifierFeatureName", this);

    this.attrCreationTime = cdk.Token.asString(this.getAtt("CreationTime", cdk.ResolutionTypeHint.STRING));
    this.attrFeatureGroupStatus = cdk.Token.asString(this.getAtt("FeatureGroupStatus", cdk.ResolutionTypeHint.STRING));
    this.description = props.description;
    this.eventTimeFeatureName = props.eventTimeFeatureName;
    this.featureDefinitions = props.featureDefinitions;
    this.featureGroupName = props.featureGroupName;
    this.offlineStoreConfig = props.offlineStoreConfig;
    this.onlineStoreConfig = props.onlineStoreConfig;
    this.recordIdentifierFeatureName = props.recordIdentifierFeatureName;
    this.roleArn = props.roleArn;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::FeatureGroup", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
    this.throughputConfig = props.throughputConfig;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "description": this.description,
      "eventTimeFeatureName": this.eventTimeFeatureName,
      "featureDefinitions": this.featureDefinitions,
      "featureGroupName": this.featureGroupName,
      "offlineStoreConfig": this.offlineStoreConfig,
      "onlineStoreConfig": this.onlineStoreConfig,
      "recordIdentifierFeatureName": this.recordIdentifierFeatureName,
      "roleArn": this.roleArn,
      "tags": this.tags.renderTags(),
      "throughputConfig": this.throughputConfig
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnFeatureGroup.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnFeatureGroupPropsToCloudFormation(props);
  }
}

export namespace CfnFeatureGroup {
  /**
   * The configuration of an `OfflineStore` .
   *
   * Provide an `OfflineStoreConfig` in a request to `CreateFeatureGroup` to create an `OfflineStore` .
   *
   * To encrypt an `OfflineStore` using at rest data encryption, specify AWS Key Management Service (KMS) key ID, or `KMSKeyId` , in `S3StorageConfig` .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-offlinestoreconfig.html
   */
  export interface OfflineStoreConfigProperty {
    /**
     * The meta data of the Glue table that is autogenerated when an `OfflineStore` is created.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-offlinestoreconfig.html#cfn-sagemaker-featuregroup-offlinestoreconfig-datacatalogconfig
     */
    readonly dataCatalogConfig?: CfnFeatureGroup.DataCatalogConfigProperty | cdk.IResolvable;

    /**
     * Set to `True` to disable the automatic creation of an AWS Glue table when configuring an `OfflineStore` .
     *
     * If set to `False` , Feature Store will name the `OfflineStore` Glue table following [Athena's naming recommendations](https://docs.aws.amazon.com/athena/latest/ug/tables-databases-columns-names.html) .
     *
     * The default value is `False` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-offlinestoreconfig.html#cfn-sagemaker-featuregroup-offlinestoreconfig-disablegluetablecreation
     */
    readonly disableGlueTableCreation?: boolean | cdk.IResolvable;

    /**
     * The Amazon Simple Storage (Amazon S3) location of `OfflineStore` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-offlinestoreconfig.html#cfn-sagemaker-featuregroup-offlinestoreconfig-s3storageconfig
     */
    readonly s3StorageConfig: cdk.IResolvable | CfnFeatureGroup.S3StorageConfigProperty;

    /**
     * Format for the offline store table.
     *
     * Supported formats are Glue (Default) and [Apache Iceberg](https://docs.aws.amazon.com/https://iceberg.apache.org/) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-offlinestoreconfig.html#cfn-sagemaker-featuregroup-offlinestoreconfig-tableformat
     */
    readonly tableFormat?: string;
  }

  /**
   * The meta data of the Glue table which serves as data catalog for the `OfflineStore` .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-datacatalogconfig.html
   */
  export interface DataCatalogConfigProperty {
    /**
     * The name of the Glue table catalog.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-datacatalogconfig.html#cfn-sagemaker-featuregroup-datacatalogconfig-catalog
     */
    readonly catalog: string;

    /**
     * The name of the Glue table database.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-datacatalogconfig.html#cfn-sagemaker-featuregroup-datacatalogconfig-database
     */
    readonly database: string;

    /**
     * The name of the Glue table.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-datacatalogconfig.html#cfn-sagemaker-featuregroup-datacatalogconfig-tablename
     */
    readonly tableName: string;
  }

  /**
   * The Amazon Simple Storage (Amazon S3) location and and security configuration for `OfflineStore` .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-s3storageconfig.html
   */
  export interface S3StorageConfigProperty {
    /**
     * The AWS Key Management Service (KMS) key ARN of the key used to encrypt any objects written into the `OfflineStore` S3 location.
     *
     * The IAM `roleARN` that is passed as a parameter to `CreateFeatureGroup` must have below permissions to the `KmsKeyId` :
     *
     * - `"kms:GenerateDataKey"`
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-s3storageconfig.html#cfn-sagemaker-featuregroup-s3storageconfig-kmskeyid
     */
    readonly kmsKeyId?: string;

    /**
     * The S3 URI, or location in Amazon S3, of `OfflineStore` .
     *
     * S3 URIs have a format similar to the following: `s3://example-bucket/prefix/` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-s3storageconfig.html#cfn-sagemaker-featuregroup-s3storageconfig-s3uri
     */
    readonly s3Uri: string;
  }

  /**
   * A list of features.
   *
   * You must include `FeatureName` and `FeatureType` . Valid feature `FeatureType` s are `Integral` , `Fractional` and `String` .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-featuredefinition.html
   */
  export interface FeatureDefinitionProperty {
    /**
     * The name of a feature.
     *
     * The type must be a string. `FeatureName` cannot be any of the following: `is_deleted` , `write_time` , `api_invocation_time` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-featuredefinition.html#cfn-sagemaker-featuregroup-featuredefinition-featurename
     */
    readonly featureName: string;

    /**
     * The value type of a feature.
     *
     * Valid values are Integral, Fractional, or String.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-featuredefinition.html#cfn-sagemaker-featuregroup-featuredefinition-featuretype
     */
    readonly featureType: string;
  }

  /**
   * Use this to specify the AWS Key Management Service (KMS) Key ID, or `KMSKeyId` , for at rest data encryption.
   *
   * You can turn `OnlineStore` on or off by specifying the `EnableOnlineStore` flag at General Assembly.
   *
   * The default value is `False` .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-onlinestoreconfig.html
   */
  export interface OnlineStoreConfigProperty {
    /**
     * Turn `OnlineStore` off by specifying `False` for the `EnableOnlineStore` flag.
     *
     * Turn `OnlineStore` on by specifying `True` for the `EnableOnlineStore` flag.
     *
     * The default value is `False` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-onlinestoreconfig.html#cfn-sagemaker-featuregroup-onlinestoreconfig-enableonlinestore
     */
    readonly enableOnlineStore?: boolean | cdk.IResolvable;

    /**
     * Use to specify KMS Key ID ( `KMSKeyId` ) for at-rest encryption of your `OnlineStore` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-onlinestoreconfig.html#cfn-sagemaker-featuregroup-onlinestoreconfig-securityconfig
     */
    readonly securityConfig?: cdk.IResolvable | CfnFeatureGroup.OnlineStoreSecurityConfigProperty;

    /**
     * Option for different tiers of low latency storage for real-time data retrieval.
     *
     * - `Standard` : A managed low latency data store for feature groups.
     * - `InMemory` : A managed data store for feature groups that supports very low latency retrieval.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-onlinestoreconfig.html#cfn-sagemaker-featuregroup-onlinestoreconfig-storagetype
     */
    readonly storageType?: string;
  }

  /**
   * The security configuration for `OnlineStore` .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-onlinestoresecurityconfig.html
   */
  export interface OnlineStoreSecurityConfigProperty {
    /**
     * The AWS Key Management Service (KMS) key ARN that SageMaker Feature Store uses to encrypt the Amazon S3 objects at rest using Amazon S3 server-side encryption.
     *
     * The caller (either user or IAM role) of `CreateFeatureGroup` must have below permissions to the `OnlineStore` `KmsKeyId` :
     *
     * - `"kms:Encrypt"`
     * - `"kms:Decrypt"`
     * - `"kms:DescribeKey"`
     * - `"kms:CreateGrant"`
     * - `"kms:RetireGrant"`
     * - `"kms:ReEncryptFrom"`
     * - `"kms:ReEncryptTo"`
     * - `"kms:GenerateDataKey"`
     * - `"kms:ListAliases"`
     * - `"kms:ListGrants"`
     * - `"kms:RevokeGrant"`
     *
     * The caller (either user or IAM role) to all DataPlane operations ( `PutRecord` , `GetRecord` , `DeleteRecord` ) must have the following permissions to the `KmsKeyId` :
     *
     * - `"kms:Decrypt"`
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-onlinestoresecurityconfig.html#cfn-sagemaker-featuregroup-onlinestoresecurityconfig-kmskeyid
     */
    readonly kmsKeyId?: string;
  }

  /**
   * Used to set feature group throughput configuration.
   *
   * There are two modes: `ON_DEMAND` and `PROVISIONED` . With on-demand mode, you are charged for data reads and writes that your application performs on your feature group. You do not need to specify read and write throughput because Feature Store accommodates your workloads as they ramp up and down. You can switch a feature group to on-demand only once in a 24 hour period. With provisioned throughput mode, you specify the read and write capacity per second that you expect your application to require, and you are billed based on those limits. Exceeding provisioned throughput will result in your requests being throttled.
   *
   * Note: `PROVISIONED` throughput mode is supported only for feature groups that are offline-only, or use the [`Standard`](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OnlineStoreConfig.html#sagemaker-Type-OnlineStoreConfig-StorageType) tier online store.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-throughputconfig.html
   */
  export interface ThroughputConfigProperty {
    /**
     * For provisioned feature groups with online store enabled, this indicates the read throughput you are billed for and can consume without throttling.
     *
     * This field is not applicable for on-demand feature groups.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-throughputconfig.html#cfn-sagemaker-featuregroup-throughputconfig-provisionedreadcapacityunits
     */
    readonly provisionedReadCapacityUnits?: number;

    /**
     * For provisioned feature groups, this indicates the write throughput you are billed for and can consume without throttling.
     *
     * This field is not applicable for on-demand feature groups.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-throughputconfig.html#cfn-sagemaker-featuregroup-throughputconfig-provisionedwritecapacityunits
     */
    readonly provisionedWriteCapacityUnits?: number;

    /**
     * The mode used for your feature group throughput: `ON_DEMAND` or `PROVISIONED` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-throughputconfig.html#cfn-sagemaker-featuregroup-throughputconfig-throughputmode
     */
    readonly throughputMode: string;
  }
}

/**
 * Properties for defining a `CfnFeatureGroup`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-featuregroup.html
 */
export interface CfnFeatureGroupProps {
  /**
   * A free form description of a `FeatureGroup` .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-featuregroup.html#cfn-sagemaker-featuregroup-description
   */
  readonly description?: string;

  /**
   * The name of the feature that stores the `EventTime` of a Record in a `FeatureGroup` .
   *
   * A `EventTime` is point in time when a new event occurs that corresponds to the creation or update of a `Record` in `FeatureGroup` . All `Records` in the `FeatureGroup` must have a corresponding `EventTime` .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-featuregroup.html#cfn-sagemaker-featuregroup-eventtimefeaturename
   */
  readonly eventTimeFeatureName: string;

  /**
   * A list of `Feature` s. Each `Feature` must include a `FeatureName` and a `FeatureType` .
   *
   * Valid `FeatureType` s are `Integral` , `Fractional` and `String` .
   *
   * `FeatureName` s cannot be any of the following: `is_deleted` , `write_time` , `api_invocation_time` .
   *
   * You can create up to 2,500 `FeatureDefinition` s per `FeatureGroup` .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-featuregroup.html#cfn-sagemaker-featuregroup-featuredefinitions
   */
  readonly featureDefinitions: Array<CfnFeatureGroup.FeatureDefinitionProperty | cdk.IResolvable> | cdk.IResolvable;

  /**
   * The name of the `FeatureGroup` .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-featuregroup.html#cfn-sagemaker-featuregroup-featuregroupname
   */
  readonly featureGroupName: string;

  /**
   * The configuration of an `OfflineStore` .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-featuregroup.html#cfn-sagemaker-featuregroup-offlinestoreconfig
   */
  readonly offlineStoreConfig?: any | cdk.IResolvable;

  /**
   * The configuration of an `OnlineStore` .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-featuregroup.html#cfn-sagemaker-featuregroup-onlinestoreconfig
   */
  readonly onlineStoreConfig?: any | cdk.IResolvable;

  /**
   * The name of the `Feature` whose value uniquely identifies a `Record` defined in the `FeatureGroup` `FeatureDefinitions` .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-featuregroup.html#cfn-sagemaker-featuregroup-recordidentifierfeaturename
   */
  readonly recordIdentifierFeatureName: string;

  /**
   * The Amazon Resource Name (ARN) of the IAM execution role used to create the feature group.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-featuregroup.html#cfn-sagemaker-featuregroup-rolearn
   */
  readonly roleArn?: string;

  /**
   * Tags used to define a `FeatureGroup` .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-featuregroup.html#cfn-sagemaker-featuregroup-tags
   */
  readonly tags?: Array<cdk.CfnTag>;

  /**
   * Used to set feature group throughput configuration.
   *
   * There are two modes: `ON_DEMAND` and `PROVISIONED` . With on-demand mode, you are charged for data reads and writes that your application performs on your feature group. You do not need to specify read and write throughput because Feature Store accommodates your workloads as they ramp up and down. You can switch a feature group to on-demand only once in a 24 hour period. With provisioned throughput mode, you specify the read and write capacity per second that you expect your application to require, and you are billed based on those limits. Exceeding provisioned throughput will result in your requests being throttled.
   *
   * Note: `PROVISIONED` throughput mode is supported only for feature groups that are offline-only, or use the [`Standard`](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OnlineStoreConfig.html#sagemaker-Type-OnlineStoreConfig-StorageType) tier online store.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-featuregroup.html#cfn-sagemaker-featuregroup-throughputconfig
   */
  readonly throughputConfig?: cdk.IResolvable | CfnFeatureGroup.ThroughputConfigProperty;
}

/**
 * Determine whether the given properties match those of a `DataCatalogConfigProperty`
 *
 * @param properties - the TypeScript properties of a `DataCatalogConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnFeatureGroupDataCatalogConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("catalog", cdk.requiredValidator)(properties.catalog));
  errors.collect(cdk.propertyValidator("catalog", cdk.validateString)(properties.catalog));
  errors.collect(cdk.propertyValidator("database", cdk.requiredValidator)(properties.database));
  errors.collect(cdk.propertyValidator("database", cdk.validateString)(properties.database));
  errors.collect(cdk.propertyValidator("tableName", cdk.requiredValidator)(properties.tableName));
  errors.collect(cdk.propertyValidator("tableName", cdk.validateString)(properties.tableName));
  return errors.wrap("supplied properties not correct for \"DataCatalogConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnFeatureGroupDataCatalogConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnFeatureGroupDataCatalogConfigPropertyValidator(properties).assertSuccess();
  return {
    "Catalog": cdk.stringToCloudFormation(properties.catalog),
    "Database": cdk.stringToCloudFormation(properties.database),
    "TableName": cdk.stringToCloudFormation(properties.tableName)
  };
}

// @ts-ignore TS6133
function CfnFeatureGroupDataCatalogConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFeatureGroup.DataCatalogConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFeatureGroup.DataCatalogConfigProperty>();
  ret.addPropertyResult("catalog", "Catalog", (properties.Catalog != null ? cfn_parse.FromCloudFormation.getString(properties.Catalog) : undefined));
  ret.addPropertyResult("database", "Database", (properties.Database != null ? cfn_parse.FromCloudFormation.getString(properties.Database) : undefined));
  ret.addPropertyResult("tableName", "TableName", (properties.TableName != null ? cfn_parse.FromCloudFormation.getString(properties.TableName) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `S3StorageConfigProperty`
 *
 * @param properties - the TypeScript properties of a `S3StorageConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnFeatureGroupS3StorageConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("kmsKeyId", cdk.validateString)(properties.kmsKeyId));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.requiredValidator)(properties.s3Uri));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.validateString)(properties.s3Uri));
  return errors.wrap("supplied properties not correct for \"S3StorageConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnFeatureGroupS3StorageConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnFeatureGroupS3StorageConfigPropertyValidator(properties).assertSuccess();
  return {
    "KmsKeyId": cdk.stringToCloudFormation(properties.kmsKeyId),
    "S3Uri": cdk.stringToCloudFormation(properties.s3Uri)
  };
}

// @ts-ignore TS6133
function CfnFeatureGroupS3StorageConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnFeatureGroup.S3StorageConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFeatureGroup.S3StorageConfigProperty>();
  ret.addPropertyResult("kmsKeyId", "KmsKeyId", (properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined));
  ret.addPropertyResult("s3Uri", "S3Uri", (properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `OfflineStoreConfigProperty`
 *
 * @param properties - the TypeScript properties of a `OfflineStoreConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnFeatureGroupOfflineStoreConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("dataCatalogConfig", CfnFeatureGroupDataCatalogConfigPropertyValidator)(properties.dataCatalogConfig));
  errors.collect(cdk.propertyValidator("disableGlueTableCreation", cdk.validateBoolean)(properties.disableGlueTableCreation));
  errors.collect(cdk.propertyValidator("s3StorageConfig", cdk.requiredValidator)(properties.s3StorageConfig));
  errors.collect(cdk.propertyValidator("s3StorageConfig", CfnFeatureGroupS3StorageConfigPropertyValidator)(properties.s3StorageConfig));
  errors.collect(cdk.propertyValidator("tableFormat", cdk.validateString)(properties.tableFormat));
  return errors.wrap("supplied properties not correct for \"OfflineStoreConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnFeatureGroupOfflineStoreConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnFeatureGroupOfflineStoreConfigPropertyValidator(properties).assertSuccess();
  return {
    "DataCatalogConfig": convertCfnFeatureGroupDataCatalogConfigPropertyToCloudFormation(properties.dataCatalogConfig),
    "DisableGlueTableCreation": cdk.booleanToCloudFormation(properties.disableGlueTableCreation),
    "S3StorageConfig": convertCfnFeatureGroupS3StorageConfigPropertyToCloudFormation(properties.s3StorageConfig),
    "TableFormat": cdk.stringToCloudFormation(properties.tableFormat)
  };
}

// @ts-ignore TS6133
function CfnFeatureGroupOfflineStoreConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnFeatureGroup.OfflineStoreConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFeatureGroup.OfflineStoreConfigProperty>();
  ret.addPropertyResult("dataCatalogConfig", "DataCatalogConfig", (properties.DataCatalogConfig != null ? CfnFeatureGroupDataCatalogConfigPropertyFromCloudFormation(properties.DataCatalogConfig) : undefined));
  ret.addPropertyResult("disableGlueTableCreation", "DisableGlueTableCreation", (properties.DisableGlueTableCreation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.DisableGlueTableCreation) : undefined));
  ret.addPropertyResult("s3StorageConfig", "S3StorageConfig", (properties.S3StorageConfig != null ? CfnFeatureGroupS3StorageConfigPropertyFromCloudFormation(properties.S3StorageConfig) : undefined));
  ret.addPropertyResult("tableFormat", "TableFormat", (properties.TableFormat != null ? cfn_parse.FromCloudFormation.getString(properties.TableFormat) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `FeatureDefinitionProperty`
 *
 * @param properties - the TypeScript properties of a `FeatureDefinitionProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnFeatureGroupFeatureDefinitionPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("featureName", cdk.requiredValidator)(properties.featureName));
  errors.collect(cdk.propertyValidator("featureName", cdk.validateString)(properties.featureName));
  errors.collect(cdk.propertyValidator("featureType", cdk.requiredValidator)(properties.featureType));
  errors.collect(cdk.propertyValidator("featureType", cdk.validateString)(properties.featureType));
  return errors.wrap("supplied properties not correct for \"FeatureDefinitionProperty\"");
}

// @ts-ignore TS6133
function convertCfnFeatureGroupFeatureDefinitionPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnFeatureGroupFeatureDefinitionPropertyValidator(properties).assertSuccess();
  return {
    "FeatureName": cdk.stringToCloudFormation(properties.featureName),
    "FeatureType": cdk.stringToCloudFormation(properties.featureType)
  };
}

// @ts-ignore TS6133
function CfnFeatureGroupFeatureDefinitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFeatureGroup.FeatureDefinitionProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFeatureGroup.FeatureDefinitionProperty>();
  ret.addPropertyResult("featureName", "FeatureName", (properties.FeatureName != null ? cfn_parse.FromCloudFormation.getString(properties.FeatureName) : undefined));
  ret.addPropertyResult("featureType", "FeatureType", (properties.FeatureType != null ? cfn_parse.FromCloudFormation.getString(properties.FeatureType) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `OnlineStoreSecurityConfigProperty`
 *
 * @param properties - the TypeScript properties of a `OnlineStoreSecurityConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnFeatureGroupOnlineStoreSecurityConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("kmsKeyId", cdk.validateString)(properties.kmsKeyId));
  return errors.wrap("supplied properties not correct for \"OnlineStoreSecurityConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnFeatureGroupOnlineStoreSecurityConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnFeatureGroupOnlineStoreSecurityConfigPropertyValidator(properties).assertSuccess();
  return {
    "KmsKeyId": cdk.stringToCloudFormation(properties.kmsKeyId)
  };
}

// @ts-ignore TS6133
function CfnFeatureGroupOnlineStoreSecurityConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnFeatureGroup.OnlineStoreSecurityConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFeatureGroup.OnlineStoreSecurityConfigProperty>();
  ret.addPropertyResult("kmsKeyId", "KmsKeyId", (properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `OnlineStoreConfigProperty`
 *
 * @param properties - the TypeScript properties of a `OnlineStoreConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnFeatureGroupOnlineStoreConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("enableOnlineStore", cdk.validateBoolean)(properties.enableOnlineStore));
  errors.collect(cdk.propertyValidator("securityConfig", CfnFeatureGroupOnlineStoreSecurityConfigPropertyValidator)(properties.securityConfig));
  errors.collect(cdk.propertyValidator("storageType", cdk.validateString)(properties.storageType));
  return errors.wrap("supplied properties not correct for \"OnlineStoreConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnFeatureGroupOnlineStoreConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnFeatureGroupOnlineStoreConfigPropertyValidator(properties).assertSuccess();
  return {
    "EnableOnlineStore": cdk.booleanToCloudFormation(properties.enableOnlineStore),
    "SecurityConfig": convertCfnFeatureGroupOnlineStoreSecurityConfigPropertyToCloudFormation(properties.securityConfig),
    "StorageType": cdk.stringToCloudFormation(properties.storageType)
  };
}

// @ts-ignore TS6133
function CfnFeatureGroupOnlineStoreConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnFeatureGroup.OnlineStoreConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFeatureGroup.OnlineStoreConfigProperty>();
  ret.addPropertyResult("enableOnlineStore", "EnableOnlineStore", (properties.EnableOnlineStore != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableOnlineStore) : undefined));
  ret.addPropertyResult("securityConfig", "SecurityConfig", (properties.SecurityConfig != null ? CfnFeatureGroupOnlineStoreSecurityConfigPropertyFromCloudFormation(properties.SecurityConfig) : undefined));
  ret.addPropertyResult("storageType", "StorageType", (properties.StorageType != null ? cfn_parse.FromCloudFormation.getString(properties.StorageType) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ThroughputConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ThroughputConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnFeatureGroupThroughputConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("provisionedReadCapacityUnits", cdk.validateNumber)(properties.provisionedReadCapacityUnits));
  errors.collect(cdk.propertyValidator("provisionedWriteCapacityUnits", cdk.validateNumber)(properties.provisionedWriteCapacityUnits));
  errors.collect(cdk.propertyValidator("throughputMode", cdk.requiredValidator)(properties.throughputMode));
  errors.collect(cdk.propertyValidator("throughputMode", cdk.validateString)(properties.throughputMode));
  return errors.wrap("supplied properties not correct for \"ThroughputConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnFeatureGroupThroughputConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnFeatureGroupThroughputConfigPropertyValidator(properties).assertSuccess();
  return {
    "ProvisionedReadCapacityUnits": cdk.numberToCloudFormation(properties.provisionedReadCapacityUnits),
    "ProvisionedWriteCapacityUnits": cdk.numberToCloudFormation(properties.provisionedWriteCapacityUnits),
    "ThroughputMode": cdk.stringToCloudFormation(properties.throughputMode)
  };
}

// @ts-ignore TS6133
function CfnFeatureGroupThroughputConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnFeatureGroup.ThroughputConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFeatureGroup.ThroughputConfigProperty>();
  ret.addPropertyResult("provisionedReadCapacityUnits", "ProvisionedReadCapacityUnits", (properties.ProvisionedReadCapacityUnits != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProvisionedReadCapacityUnits) : undefined));
  ret.addPropertyResult("provisionedWriteCapacityUnits", "ProvisionedWriteCapacityUnits", (properties.ProvisionedWriteCapacityUnits != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProvisionedWriteCapacityUnits) : undefined));
  ret.addPropertyResult("throughputMode", "ThroughputMode", (properties.ThroughputMode != null ? cfn_parse.FromCloudFormation.getString(properties.ThroughputMode) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnFeatureGroupProps`
 *
 * @param properties - the TypeScript properties of a `CfnFeatureGroupProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnFeatureGroupPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
  errors.collect(cdk.propertyValidator("eventTimeFeatureName", cdk.requiredValidator)(properties.eventTimeFeatureName));
  errors.collect(cdk.propertyValidator("eventTimeFeatureName", cdk.validateString)(properties.eventTimeFeatureName));
  errors.collect(cdk.propertyValidator("featureDefinitions", cdk.requiredValidator)(properties.featureDefinitions));
  errors.collect(cdk.propertyValidator("featureDefinitions", cdk.listValidator(CfnFeatureGroupFeatureDefinitionPropertyValidator))(properties.featureDefinitions));
  errors.collect(cdk.propertyValidator("featureGroupName", cdk.requiredValidator)(properties.featureGroupName));
  errors.collect(cdk.propertyValidator("featureGroupName", cdk.validateString)(properties.featureGroupName));
  errors.collect(cdk.propertyValidator("offlineStoreConfig", cdk.validateObject)(properties.offlineStoreConfig));
  errors.collect(cdk.propertyValidator("onlineStoreConfig", cdk.validateObject)(properties.onlineStoreConfig));
  errors.collect(cdk.propertyValidator("recordIdentifierFeatureName", cdk.requiredValidator)(properties.recordIdentifierFeatureName));
  errors.collect(cdk.propertyValidator("recordIdentifierFeatureName", cdk.validateString)(properties.recordIdentifierFeatureName));
  errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  errors.collect(cdk.propertyValidator("throughputConfig", CfnFeatureGroupThroughputConfigPropertyValidator)(properties.throughputConfig));
  return errors.wrap("supplied properties not correct for \"CfnFeatureGroupProps\"");
}

// @ts-ignore TS6133
function convertCfnFeatureGroupPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnFeatureGroupPropsValidator(properties).assertSuccess();
  return {
    "Description": cdk.stringToCloudFormation(properties.description),
    "EventTimeFeatureName": cdk.stringToCloudFormation(properties.eventTimeFeatureName),
    "FeatureDefinitions": cdk.listMapper(convertCfnFeatureGroupFeatureDefinitionPropertyToCloudFormation)(properties.featureDefinitions),
    "FeatureGroupName": cdk.stringToCloudFormation(properties.featureGroupName),
    "OfflineStoreConfig": cdk.objectToCloudFormation(properties.offlineStoreConfig),
    "OnlineStoreConfig": cdk.objectToCloudFormation(properties.onlineStoreConfig),
    "RecordIdentifierFeatureName": cdk.stringToCloudFormation(properties.recordIdentifierFeatureName),
    "RoleArn": cdk.stringToCloudFormation(properties.roleArn),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
    "ThroughputConfig": convertCfnFeatureGroupThroughputConfigPropertyToCloudFormation(properties.throughputConfig)
  };
}

// @ts-ignore TS6133
function CfnFeatureGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnFeatureGroupProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnFeatureGroupProps>();
  ret.addPropertyResult("description", "Description", (properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined));
  ret.addPropertyResult("eventTimeFeatureName", "EventTimeFeatureName", (properties.EventTimeFeatureName != null ? cfn_parse.FromCloudFormation.getString(properties.EventTimeFeatureName) : undefined));
  ret.addPropertyResult("featureDefinitions", "FeatureDefinitions", (properties.FeatureDefinitions != null ? cfn_parse.FromCloudFormation.getArray(CfnFeatureGroupFeatureDefinitionPropertyFromCloudFormation)(properties.FeatureDefinitions) : undefined));
  ret.addPropertyResult("featureGroupName", "FeatureGroupName", (properties.FeatureGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.FeatureGroupName) : undefined));
  ret.addPropertyResult("offlineStoreConfig", "OfflineStoreConfig", (properties.OfflineStoreConfig != null ? cfn_parse.FromCloudFormation.getAny(properties.OfflineStoreConfig) : undefined));
  ret.addPropertyResult("onlineStoreConfig", "OnlineStoreConfig", (properties.OnlineStoreConfig != null ? cfn_parse.FromCloudFormation.getAny(properties.OnlineStoreConfig) : undefined));
  ret.addPropertyResult("recordIdentifierFeatureName", "RecordIdentifierFeatureName", (properties.RecordIdentifierFeatureName != null ? cfn_parse.FromCloudFormation.getString(properties.RecordIdentifierFeatureName) : undefined));
  ret.addPropertyResult("roleArn", "RoleArn", (properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addPropertyResult("throughputConfig", "ThroughputConfig", (properties.ThroughputConfig != null ? CfnFeatureGroupThroughputConfigPropertyFromCloudFormation(properties.ThroughputConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Creates a custom SageMaker image.
 *
 * A SageMaker image is a set of image versions. Each image version represents a container image stored in Amazon Elastic Container Registry (ECR). For more information, see [Bring your own SageMaker image](https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html) .
 *
 * @cloudformationResource AWS::SageMaker::Image
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-image.html
 */
export class CfnImage extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::Image";

  /**
   * Build a CfnImage from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnImage {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnImagePropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnImage(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The Amazon Resource Name (ARN) of the image.
   *
   * *Type* : String
   *
   * *Length Constraints* : Maximum length of 256.
   *
   * *Pattern* : `^arn:aws(-[\w]+)*:sagemaker:.+:[0-9]{12}:image/[a-z0-9]([-.]?[a-z0-9])*$`
   *
   * @cloudformationAttribute ImageArn
   */
  public readonly attrImageArn: string;

  /**
   * The description of the image.
   */
  public imageDescription?: string;

  /**
   * The display name of the image.
   */
  public imageDisplayName?: string;

  /**
   * The name of the Image. Must be unique by region in your account.
   */
  public imageName: string;

  /**
   * The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.
   */
  public imageRoleArn: string;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * A list of key-value pairs to apply to this resource.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnImageProps) {
    super(scope, id, {
      "type": CfnImage.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "imageName", this);
    cdk.requireProperty(props, "imageRoleArn", this);

    this.attrImageArn = cdk.Token.asString(this.getAtt("ImageArn", cdk.ResolutionTypeHint.STRING));
    this.imageDescription = props.imageDescription;
    this.imageDisplayName = props.imageDisplayName;
    this.imageName = props.imageName;
    this.imageRoleArn = props.imageRoleArn;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::Image", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "imageDescription": this.imageDescription,
      "imageDisplayName": this.imageDisplayName,
      "imageName": this.imageName,
      "imageRoleArn": this.imageRoleArn,
      "tags": this.tags.renderTags()
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnImage.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnImagePropsToCloudFormation(props);
  }
}

/**
 * Properties for defining a `CfnImage`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-image.html
 */
export interface CfnImageProps {
  /**
   * The description of the image.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-image.html#cfn-sagemaker-image-imagedescription
   */
  readonly imageDescription?: string;

  /**
   * The display name of the image.
   *
   * *Length Constraints* : Minimum length of 1. Maximum length of 128.
   *
   * *Pattern* : `^\S(.*\S)?$`
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-image.html#cfn-sagemaker-image-imagedisplayname
   */
  readonly imageDisplayName?: string;

  /**
   * The name of the Image. Must be unique by region in your account.
   *
   * *Length Constraints* : Minimum length of 1. Maximum length of 63.
   *
   * *Pattern* : `^[a-zA-Z0-9]([-.]?[a-zA-Z0-9]){0,62}$`
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-image.html#cfn-sagemaker-image-imagename
   */
  readonly imageName: string;

  /**
   * The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.
   *
   * *Length Constraints* : Minimum length of 20. Maximum length of 2048.
   *
   * *Pattern* : `^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$`
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-image.html#cfn-sagemaker-image-imagerolearn
   */
  readonly imageRoleArn: string;

  /**
   * A list of key-value pairs to apply to this resource.
   *
   * *Array Members* : Minimum number of 0 items. Maximum number of 50 items.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-image.html#cfn-sagemaker-image-tags
   */
  readonly tags?: Array<cdk.CfnTag>;
}

/**
 * Determine whether the given properties match those of a `CfnImageProps`
 *
 * @param properties - the TypeScript properties of a `CfnImageProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnImagePropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("imageDescription", cdk.validateString)(properties.imageDescription));
  errors.collect(cdk.propertyValidator("imageDisplayName", cdk.validateString)(properties.imageDisplayName));
  errors.collect(cdk.propertyValidator("imageName", cdk.requiredValidator)(properties.imageName));
  errors.collect(cdk.propertyValidator("imageName", cdk.validateString)(properties.imageName));
  errors.collect(cdk.propertyValidator("imageRoleArn", cdk.requiredValidator)(properties.imageRoleArn));
  errors.collect(cdk.propertyValidator("imageRoleArn", cdk.validateString)(properties.imageRoleArn));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  return errors.wrap("supplied properties not correct for \"CfnImageProps\"");
}

// @ts-ignore TS6133
function convertCfnImagePropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnImagePropsValidator(properties).assertSuccess();
  return {
    "ImageDescription": cdk.stringToCloudFormation(properties.imageDescription),
    "ImageDisplayName": cdk.stringToCloudFormation(properties.imageDisplayName),
    "ImageName": cdk.stringToCloudFormation(properties.imageName),
    "ImageRoleArn": cdk.stringToCloudFormation(properties.imageRoleArn),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
  };
}

// @ts-ignore TS6133
function CfnImagePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImageProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImageProps>();
  ret.addPropertyResult("imageDescription", "ImageDescription", (properties.ImageDescription != null ? cfn_parse.FromCloudFormation.getString(properties.ImageDescription) : undefined));
  ret.addPropertyResult("imageDisplayName", "ImageDisplayName", (properties.ImageDisplayName != null ? cfn_parse.FromCloudFormation.getString(properties.ImageDisplayName) : undefined));
  ret.addPropertyResult("imageName", "ImageName", (properties.ImageName != null ? cfn_parse.FromCloudFormation.getString(properties.ImageName) : undefined));
  ret.addPropertyResult("imageRoleArn", "ImageRoleArn", (properties.ImageRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.ImageRoleArn) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Creates a version of the SageMaker image specified by `ImageName` .
 *
 * The version represents the Amazon Container Registry (ECR) container image specified by `BaseImage` .
 *
 * > You can use the `DependsOn` attribute to specify that the creation of a specific resource follows another. You can use it for the following use cases. For more information, see [`DependsOn` attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html) .
 * >
 * > 1. `DependsOn` can be used to establish a parent/child relationship between `ImageVersion` and `Image` where the `ImageVersion` `DependsOn` the `Image` .
 * >
 * > 2. `DependsOn` can be used to establish order among `ImageVersion` s within the same `Image` namespace. For example, if ImageVersionB `DependsOn` ImageVersionA and both share the same parent `Image` , then ImageVersionA is version N and ImageVersionB is N+1.
 *
 * @cloudformationResource AWS::SageMaker::ImageVersion
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-imageversion.html
 */
export class CfnImageVersion extends cdk.CfnResource implements cdk.IInspectable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::ImageVersion";

  /**
   * Build a CfnImageVersion from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnImageVersion {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnImageVersionPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnImageVersion(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The URI of the container image version referenced by ImageVersion.
   *
   * @cloudformationAttribute ContainerImage
   */
  public readonly attrContainerImage: string;

  /**
   * The Amazon Resource Name (ARN) of the parent Image.
   *
   * @cloudformationAttribute ImageArn
   */
  public readonly attrImageArn: string;

  /**
   * The Amazon Resource Name (ARN) of the image version.
   *
   * *Type* : String
   *
   * *Length Constraints* : Maximum length of 256.
   *
   * *Pattern* : `^arn:aws(-[\w]+)*:sagemaker:.+:[0-9]{12}:image-version/[a-z0-9]([-.]?[a-z0-9])* /[0-9]+$`
   *
   * @cloudformationAttribute ImageVersionArn
   */
  public readonly attrImageVersionArn: string;

  /**
   * The version of the image.
   *
   * @cloudformationAttribute Version
   */
  public readonly attrVersion: number;

  /**
   * The alias of the image version.
   */
  public alias?: string;

  /**
   * List of aliases for the image version.
   */
  public aliases?: Array<string>;

  /**
   * The container image that the SageMaker image version is based on.
   */
  public baseImage: string;

  /**
   * Indicates Horovod compatibility.
   */
  public horovod?: boolean | cdk.IResolvable;

  /**
   * The name of the parent image.
   */
  public imageName: string;

  /**
   * Indicates SageMaker job type compatibility.
   */
  public jobType?: string;

  /**
   * The machine learning framework vended in the image version.
   */
  public mlFramework?: string;

  /**
   * Indicates CPU or GPU compatibility.
   */
  public processor?: string;

  /**
   * The supported programming language and its version.
   */
  public programmingLang?: string;

  /**
   * The maintainer description of the image version.
   */
  public releaseNotes?: string;

  /**
   * The availability of the image version specified by the maintainer.
   */
  public vendorGuidance?: string;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnImageVersionProps) {
    super(scope, id, {
      "type": CfnImageVersion.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "baseImage", this);
    cdk.requireProperty(props, "imageName", this);

    this.attrContainerImage = cdk.Token.asString(this.getAtt("ContainerImage", cdk.ResolutionTypeHint.STRING));
    this.attrImageArn = cdk.Token.asString(this.getAtt("ImageArn", cdk.ResolutionTypeHint.STRING));
    this.attrImageVersionArn = cdk.Token.asString(this.getAtt("ImageVersionArn", cdk.ResolutionTypeHint.STRING));
    this.attrVersion = cdk.Token.asNumber(this.getAtt("Version", cdk.ResolutionTypeHint.NUMBER));
    this.alias = props.alias;
    this.aliases = props.aliases;
    this.baseImage = props.baseImage;
    this.horovod = props.horovod;
    this.imageName = props.imageName;
    this.jobType = props.jobType;
    this.mlFramework = props.mlFramework;
    this.processor = props.processor;
    this.programmingLang = props.programmingLang;
    this.releaseNotes = props.releaseNotes;
    this.vendorGuidance = props.vendorGuidance;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "alias": this.alias,
      "aliases": this.aliases,
      "baseImage": this.baseImage,
      "horovod": this.horovod,
      "imageName": this.imageName,
      "jobType": this.jobType,
      "mlFramework": this.mlFramework,
      "processor": this.processor,
      "programmingLang": this.programmingLang,
      "releaseNotes": this.releaseNotes,
      "vendorGuidance": this.vendorGuidance
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnImageVersion.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnImageVersionPropsToCloudFormation(props);
  }
}

/**
 * Properties for defining a `CfnImageVersion`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-imageversion.html
 */
export interface CfnImageVersionProps {
  /**
   * The alias of the image version.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-imageversion.html#cfn-sagemaker-imageversion-alias
   */
  readonly alias?: string;

  /**
   * List of aliases for the image version.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-imageversion.html#cfn-sagemaker-imageversion-aliases
   */
  readonly aliases?: Array<string>;

  /**
   * The container image that the SageMaker image version is based on.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-imageversion.html#cfn-sagemaker-imageversion-baseimage
   */
  readonly baseImage: string;

  /**
   * Indicates Horovod compatibility.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-imageversion.html#cfn-sagemaker-imageversion-horovod
   */
  readonly horovod?: boolean | cdk.IResolvable;

  /**
   * The name of the parent image.
   *
   * *Length Constraints* : Minimum length of 1. Maximum length of 63.
   *
   * *Pattern* : `^[a-zA-Z0-9]([-.]?[a-zA-Z0-9]){0,62}$`
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-imageversion.html#cfn-sagemaker-imageversion-imagename
   */
  readonly imageName: string;

  /**
   * Indicates SageMaker job type compatibility.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-imageversion.html#cfn-sagemaker-imageversion-jobtype
   */
  readonly jobType?: string;

  /**
   * The machine learning framework vended in the image version.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-imageversion.html#cfn-sagemaker-imageversion-mlframework
   */
  readonly mlFramework?: string;

  /**
   * Indicates CPU or GPU compatibility.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-imageversion.html#cfn-sagemaker-imageversion-processor
   */
  readonly processor?: string;

  /**
   * The supported programming language and its version.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-imageversion.html#cfn-sagemaker-imageversion-programminglang
   */
  readonly programmingLang?: string;

  /**
   * The maintainer description of the image version.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-imageversion.html#cfn-sagemaker-imageversion-releasenotes
   */
  readonly releaseNotes?: string;

  /**
   * The availability of the image version specified by the maintainer.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-imageversion.html#cfn-sagemaker-imageversion-vendorguidance
   */
  readonly vendorGuidance?: string;
}

/**
 * Determine whether the given properties match those of a `CfnImageVersionProps`
 *
 * @param properties - the TypeScript properties of a `CfnImageVersionProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnImageVersionPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("alias", cdk.validateString)(properties.alias));
  errors.collect(cdk.propertyValidator("aliases", cdk.listValidator(cdk.validateString))(properties.aliases));
  errors.collect(cdk.propertyValidator("baseImage", cdk.requiredValidator)(properties.baseImage));
  errors.collect(cdk.propertyValidator("baseImage", cdk.validateString)(properties.baseImage));
  errors.collect(cdk.propertyValidator("horovod", cdk.validateBoolean)(properties.horovod));
  errors.collect(cdk.propertyValidator("imageName", cdk.requiredValidator)(properties.imageName));
  errors.collect(cdk.propertyValidator("imageName", cdk.validateString)(properties.imageName));
  errors.collect(cdk.propertyValidator("jobType", cdk.validateString)(properties.jobType));
  errors.collect(cdk.propertyValidator("mlFramework", cdk.validateString)(properties.mlFramework));
  errors.collect(cdk.propertyValidator("processor", cdk.validateString)(properties.processor));
  errors.collect(cdk.propertyValidator("programmingLang", cdk.validateString)(properties.programmingLang));
  errors.collect(cdk.propertyValidator("releaseNotes", cdk.validateString)(properties.releaseNotes));
  errors.collect(cdk.propertyValidator("vendorGuidance", cdk.validateString)(properties.vendorGuidance));
  return errors.wrap("supplied properties not correct for \"CfnImageVersionProps\"");
}

// @ts-ignore TS6133
function convertCfnImageVersionPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnImageVersionPropsValidator(properties).assertSuccess();
  return {
    "Alias": cdk.stringToCloudFormation(properties.alias),
    "Aliases": cdk.listMapper(cdk.stringToCloudFormation)(properties.aliases),
    "BaseImage": cdk.stringToCloudFormation(properties.baseImage),
    "Horovod": cdk.booleanToCloudFormation(properties.horovod),
    "ImageName": cdk.stringToCloudFormation(properties.imageName),
    "JobType": cdk.stringToCloudFormation(properties.jobType),
    "MLFramework": cdk.stringToCloudFormation(properties.mlFramework),
    "Processor": cdk.stringToCloudFormation(properties.processor),
    "ProgrammingLang": cdk.stringToCloudFormation(properties.programmingLang),
    "ReleaseNotes": cdk.stringToCloudFormation(properties.releaseNotes),
    "VendorGuidance": cdk.stringToCloudFormation(properties.vendorGuidance)
  };
}

// @ts-ignore TS6133
function CfnImageVersionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnImageVersionProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnImageVersionProps>();
  ret.addPropertyResult("alias", "Alias", (properties.Alias != null ? cfn_parse.FromCloudFormation.getString(properties.Alias) : undefined));
  ret.addPropertyResult("aliases", "Aliases", (properties.Aliases != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.Aliases) : undefined));
  ret.addPropertyResult("baseImage", "BaseImage", (properties.BaseImage != null ? cfn_parse.FromCloudFormation.getString(properties.BaseImage) : undefined));
  ret.addPropertyResult("horovod", "Horovod", (properties.Horovod != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Horovod) : undefined));
  ret.addPropertyResult("imageName", "ImageName", (properties.ImageName != null ? cfn_parse.FromCloudFormation.getString(properties.ImageName) : undefined));
  ret.addPropertyResult("jobType", "JobType", (properties.JobType != null ? cfn_parse.FromCloudFormation.getString(properties.JobType) : undefined));
  ret.addPropertyResult("mlFramework", "MLFramework", (properties.MLFramework != null ? cfn_parse.FromCloudFormation.getString(properties.MLFramework) : undefined));
  ret.addPropertyResult("processor", "Processor", (properties.Processor != null ? cfn_parse.FromCloudFormation.getString(properties.Processor) : undefined));
  ret.addPropertyResult("programmingLang", "ProgrammingLang", (properties.ProgrammingLang != null ? cfn_parse.FromCloudFormation.getString(properties.ProgrammingLang) : undefined));
  ret.addPropertyResult("releaseNotes", "ReleaseNotes", (properties.ReleaseNotes != null ? cfn_parse.FromCloudFormation.getString(properties.ReleaseNotes) : undefined));
  ret.addPropertyResult("vendorGuidance", "VendorGuidance", (properties.VendorGuidance != null ? cfn_parse.FromCloudFormation.getString(properties.VendorGuidance) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Creates an inference experiment using the configurations specified in the request.
 *
 * Use this API to setup and schedule an experiment to compare model variants on a Amazon SageMaker inference endpoint. For more information about inference experiments, see [Shadow tests](https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests.html) .
 *
 * Amazon SageMaker begins your experiment at the scheduled time and routes traffic to your endpoint's model variants based on your specified configuration.
 *
 * While the experiment is in progress or after it has concluded, you can view metrics that compare your model variants. For more information, see [View, monitor, and edit shadow tests](https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests-view-monitor-edit.html) .
 *
 * @cloudformationResource AWS::SageMaker::InferenceExperiment
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferenceexperiment.html
 */
export class CfnInferenceExperiment extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::InferenceExperiment";

  /**
   * Build a CfnInferenceExperiment from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnInferenceExperiment {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnInferenceExperimentPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnInferenceExperiment(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The Amazon Resource Name (ARN) of the inference experiment.
   *
   * @cloudformationAttribute Arn
   */
  public readonly attrArn: string;

  /**
   * The timestamp at which you created the inference experiment.
   *
   * @cloudformationAttribute CreationTime
   */
  public readonly attrCreationTime: string;

  /**
   * The metadata of the endpoint on which the inference experiment ran.
   *
   * @cloudformationAttribute EndpointMetadata
   */
  public readonly attrEndpointMetadata: cdk.IResolvable;

  /**
   * @cloudformationAttribute EndpointMetadata.EndpointConfigName
   */
  public readonly attrEndpointMetadataEndpointConfigName: string;

  /**
   * @cloudformationAttribute EndpointMetadata.EndpointName
   */
  public readonly attrEndpointMetadataEndpointName: string;

  /**
   * @cloudformationAttribute EndpointMetadata.EndpointStatus
   */
  public readonly attrEndpointMetadataEndpointStatus: string;

  /**
   * The timestamp at which you last modified the inference experiment.
   *
   * @cloudformationAttribute LastModifiedTime
   */
  public readonly attrLastModifiedTime: string;

  /**
   * The status of the inference experiment.
   *
   * @cloudformationAttribute Status
   */
  public readonly attrStatus: string;

  /**
   * The Amazon S3 location and configuration for storing inference request and response data.
   */
  public dataStorageConfig?: CfnInferenceExperiment.DataStorageConfigProperty | cdk.IResolvable;

  /**
   * The description of the inference experiment.
   */
  public description?: string;

  /**
   * The desired state of the experiment after stopping. The possible states are the following:.
   */
  public desiredState?: string;

  /**
   * The name of the endpoint.
   */
  public endpointName: string;

  /**
   * The AWS Key Management Service key that Amazon SageMaker uses to encrypt captured data at rest using Amazon S3 server-side encryption.
   */
  public kmsKey?: string;

  /**
   * An array of `ModelVariantConfigSummary` objects.
   */
  public modelVariants: Array<cdk.IResolvable | CfnInferenceExperiment.ModelVariantConfigProperty> | cdk.IResolvable;

  /**
   * The name of the inference experiment.
   */
  public name: string;

  /**
   * The ARN of the IAM role that Amazon SageMaker can assume to access model artifacts and container images, and manage Amazon SageMaker Inference endpoints for model deployment.
   */
  public roleArn: string;

  /**
   * The duration for which the inference experiment ran or will run.
   */
  public schedule?: CfnInferenceExperiment.InferenceExperimentScheduleProperty | cdk.IResolvable;

  /**
   * The configuration of `ShadowMode` inference experiment type, which shows the production variant that takes all the inference requests, and the shadow variant to which Amazon SageMaker replicates a percentage of the inference requests.
   */
  public shadowModeConfig?: cdk.IResolvable | CfnInferenceExperiment.ShadowModeConfigProperty;

  /**
   * The error message for the inference experiment status result.
   */
  public statusReason?: string;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * An array of key-value pairs to apply to this resource.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * The type of the inference experiment.
   */
  public type: string;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnInferenceExperimentProps) {
    super(scope, id, {
      "type": CfnInferenceExperiment.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "endpointName", this);
    cdk.requireProperty(props, "modelVariants", this);
    cdk.requireProperty(props, "name", this);
    cdk.requireProperty(props, "roleArn", this);
    cdk.requireProperty(props, "type", this);

    this.attrArn = cdk.Token.asString(this.getAtt("Arn", cdk.ResolutionTypeHint.STRING));
    this.attrCreationTime = cdk.Token.asString(this.getAtt("CreationTime", cdk.ResolutionTypeHint.STRING));
    this.attrEndpointMetadata = this.getAtt("EndpointMetadata");
    this.attrEndpointMetadataEndpointConfigName = cdk.Token.asString(this.getAtt("EndpointMetadata.EndpointConfigName", cdk.ResolutionTypeHint.STRING));
    this.attrEndpointMetadataEndpointName = cdk.Token.asString(this.getAtt("EndpointMetadata.EndpointName", cdk.ResolutionTypeHint.STRING));
    this.attrEndpointMetadataEndpointStatus = cdk.Token.asString(this.getAtt("EndpointMetadata.EndpointStatus", cdk.ResolutionTypeHint.STRING));
    this.attrLastModifiedTime = cdk.Token.asString(this.getAtt("LastModifiedTime", cdk.ResolutionTypeHint.STRING));
    this.attrStatus = cdk.Token.asString(this.getAtt("Status", cdk.ResolutionTypeHint.STRING));
    this.dataStorageConfig = props.dataStorageConfig;
    this.description = props.description;
    this.desiredState = props.desiredState;
    this.endpointName = props.endpointName;
    this.kmsKey = props.kmsKey;
    this.modelVariants = props.modelVariants;
    this.name = props.name;
    this.roleArn = props.roleArn;
    this.schedule = props.schedule;
    this.shadowModeConfig = props.shadowModeConfig;
    this.statusReason = props.statusReason;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::InferenceExperiment", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
    this.type = props.type;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "dataStorageConfig": this.dataStorageConfig,
      "description": this.description,
      "desiredState": this.desiredState,
      "endpointName": this.endpointName,
      "kmsKey": this.kmsKey,
      "modelVariants": this.modelVariants,
      "name": this.name,
      "roleArn": this.roleArn,
      "schedule": this.schedule,
      "shadowModeConfig": this.shadowModeConfig,
      "statusReason": this.statusReason,
      "tags": this.tags.renderTags(),
      "type": this.type
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnInferenceExperiment.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnInferenceExperimentPropsToCloudFormation(props);
  }
}

export namespace CfnInferenceExperiment {
  /**
   * The Amazon S3 location and configuration for storing inference request and response data.
   *
   * This is an optional parameter that you can use for data capture. For more information, see [Capture data](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-data-capture.html) .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-datastorageconfig.html
   */
  export interface DataStorageConfigProperty {
    /**
     * Configuration specifying how to treat different headers.
     *
     * If no headers are specified SageMaker will by default base64 encode when capturing the data.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-datastorageconfig.html#cfn-sagemaker-inferenceexperiment-datastorageconfig-contenttype
     */
    readonly contentType?: CfnInferenceExperiment.CaptureContentTypeHeaderProperty | cdk.IResolvable;

    /**
     * The Amazon S3 bucket where the inference request and response data is stored.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-datastorageconfig.html#cfn-sagemaker-inferenceexperiment-datastorageconfig-destination
     */
    readonly destination: string;

    /**
     * The AWS Key Management Service key that Amazon SageMaker uses to encrypt captured data at rest using Amazon S3 server-side encryption.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-datastorageconfig.html#cfn-sagemaker-inferenceexperiment-datastorageconfig-kmskey
     */
    readonly kmsKey?: string;
  }

  /**
   * Configuration specifying how to treat different headers.
   *
   * If no headers are specified Amazon SageMaker will by default base64 encode when capturing the data.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-capturecontenttypeheader.html
   */
  export interface CaptureContentTypeHeaderProperty {
    /**
     * The list of all content type headers that Amazon SageMaker will treat as CSV and capture accordingly.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-capturecontenttypeheader.html#cfn-sagemaker-inferenceexperiment-capturecontenttypeheader-csvcontenttypes
     */
    readonly csvContentTypes?: Array<string>;

    /**
     * The list of all content type headers that SageMaker will treat as JSON and capture accordingly.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-capturecontenttypeheader.html#cfn-sagemaker-inferenceexperiment-capturecontenttypeheader-jsoncontenttypes
     */
    readonly jsonContentTypes?: Array<string>;
  }

  /**
   * Contains information about the deployment options of a model.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-modelvariantconfig.html
   */
  export interface ModelVariantConfigProperty {
    /**
     * The configuration for the infrastructure that the model will be deployed to.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-modelvariantconfig.html#cfn-sagemaker-inferenceexperiment-modelvariantconfig-infrastructureconfig
     */
    readonly infrastructureConfig: cdk.IResolvable | CfnInferenceExperiment.ModelInfrastructureConfigProperty;

    /**
     * The name of the Amazon SageMaker Model entity.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-modelvariantconfig.html#cfn-sagemaker-inferenceexperiment-modelvariantconfig-modelname
     */
    readonly modelName: string;

    /**
     * The name of the variant.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-modelvariantconfig.html#cfn-sagemaker-inferenceexperiment-modelvariantconfig-variantname
     */
    readonly variantName: string;
  }

  /**
   * The configuration for the infrastructure that the model will be deployed to.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-modelinfrastructureconfig.html
   */
  export interface ModelInfrastructureConfigProperty {
    /**
     * The inference option to which to deploy your model. Possible values are the following:.
     *
     * - `RealTime` : Deploy to real-time inference.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-modelinfrastructureconfig.html#cfn-sagemaker-inferenceexperiment-modelinfrastructureconfig-infrastructuretype
     */
    readonly infrastructureType: string;

    /**
     * The infrastructure configuration for deploying the model to real-time inference.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-modelinfrastructureconfig.html#cfn-sagemaker-inferenceexperiment-modelinfrastructureconfig-realtimeinferenceconfig
     */
    readonly realTimeInferenceConfig: cdk.IResolvable | CfnInferenceExperiment.RealTimeInferenceConfigProperty;
  }

  /**
   * The infrastructure configuration for deploying the model to a real-time inference endpoint.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-realtimeinferenceconfig.html
   */
  export interface RealTimeInferenceConfigProperty {
    /**
     * The number of instances of the type specified by `InstanceType` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-realtimeinferenceconfig.html#cfn-sagemaker-inferenceexperiment-realtimeinferenceconfig-instancecount
     */
    readonly instanceCount: number;

    /**
     * The instance type the model is deployed to.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-realtimeinferenceconfig.html#cfn-sagemaker-inferenceexperiment-realtimeinferenceconfig-instancetype
     */
    readonly instanceType: string;
  }

  /**
   * The configuration of `ShadowMode` inference experiment type, which specifies a production variant to take all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests.
   *
   * For the shadow variant it also specifies the percentage of requests that Amazon SageMaker replicates.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-shadowmodeconfig.html
   */
  export interface ShadowModeConfigProperty {
    /**
     * List of shadow variant configurations.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-shadowmodeconfig.html#cfn-sagemaker-inferenceexperiment-shadowmodeconfig-shadowmodelvariants
     */
    readonly shadowModelVariants: Array<cdk.IResolvable | CfnInferenceExperiment.ShadowModelVariantConfigProperty> | cdk.IResolvable;

    /**
     * The name of the production variant, which takes all the inference requests.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-shadowmodeconfig.html#cfn-sagemaker-inferenceexperiment-shadowmodeconfig-sourcemodelvariantname
     */
    readonly sourceModelVariantName: string;
  }

  /**
   * The name and sampling percentage of a shadow variant.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-shadowmodelvariantconfig.html
   */
  export interface ShadowModelVariantConfigProperty {
    /**
     * The percentage of inference requests that Amazon SageMaker replicates from the production variant to the shadow variant.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-shadowmodelvariantconfig.html#cfn-sagemaker-inferenceexperiment-shadowmodelvariantconfig-samplingpercentage
     */
    readonly samplingPercentage: number;

    /**
     * The name of the shadow variant.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-shadowmodelvariantconfig.html#cfn-sagemaker-inferenceexperiment-shadowmodelvariantconfig-shadowmodelvariantname
     */
    readonly shadowModelVariantName: string;
  }

  /**
   * The start and end times of an inference experiment.
   *
   * The maximum duration that you can set for an inference experiment is 30 days.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-inferenceexperimentschedule.html
   */
  export interface InferenceExperimentScheduleProperty {
    /**
     * The timestamp at which the inference experiment ended or will end.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-inferenceexperimentschedule.html#cfn-sagemaker-inferenceexperiment-inferenceexperimentschedule-endtime
     */
    readonly endTime?: string;

    /**
     * The timestamp at which the inference experiment started or will start.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-inferenceexperimentschedule.html#cfn-sagemaker-inferenceexperiment-inferenceexperimentschedule-starttime
     */
    readonly startTime?: string;
  }

  /**
   * The metadata of the endpoint.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-endpointmetadata.html
   */
  export interface EndpointMetadataProperty {
    /**
     * The name of the endpoint configuration.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-endpointmetadata.html#cfn-sagemaker-inferenceexperiment-endpointmetadata-endpointconfigname
     */
    readonly endpointConfigName?: string;

    /**
     * The name of the endpoint.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-endpointmetadata.html#cfn-sagemaker-inferenceexperiment-endpointmetadata-endpointname
     */
    readonly endpointName: string;

    /**
     * The status of the endpoint.
     *
     * For possible values of the status of an endpoint, see [](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-endpointmetadata.html#cfn-sagemaker-inferenceexperiment-endpointmetadata-endpointstatus) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-endpointmetadata.html#cfn-sagemaker-inferenceexperiment-endpointmetadata-endpointstatus
     */
    readonly endpointStatus?: string;
  }
}

/**
 * Properties for defining a `CfnInferenceExperiment`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferenceexperiment.html
 */
export interface CfnInferenceExperimentProps {
  /**
   * The Amazon S3 location and configuration for storing inference request and response data.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferenceexperiment.html#cfn-sagemaker-inferenceexperiment-datastorageconfig
   */
  readonly dataStorageConfig?: CfnInferenceExperiment.DataStorageConfigProperty | cdk.IResolvable;

  /**
   * The description of the inference experiment.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferenceexperiment.html#cfn-sagemaker-inferenceexperiment-description
   */
  readonly description?: string;

  /**
   * The desired state of the experiment after stopping. The possible states are the following:.
   *
   * - `Completed` : The experiment completed successfully
   * - `Cancelled` : The experiment was canceled
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferenceexperiment.html#cfn-sagemaker-inferenceexperiment-desiredstate
   */
  readonly desiredState?: string;

  /**
   * The name of the endpoint.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferenceexperiment.html#cfn-sagemaker-inferenceexperiment-endpointname
   */
  readonly endpointName: string;

  /**
   * The AWS Key Management Service key that Amazon SageMaker uses to encrypt captured data at rest using Amazon S3 server-side encryption.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferenceexperiment.html#cfn-sagemaker-inferenceexperiment-kmskey
   */
  readonly kmsKey?: string;

  /**
   * An array of `ModelVariantConfigSummary` objects.
   *
   * There is one for each variant in the inference experiment. Each `ModelVariantConfigSummary` object in the array describes the infrastructure configuration for deploying the corresponding variant.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferenceexperiment.html#cfn-sagemaker-inferenceexperiment-modelvariants
   */
  readonly modelVariants: Array<cdk.IResolvable | CfnInferenceExperiment.ModelVariantConfigProperty> | cdk.IResolvable;

  /**
   * The name of the inference experiment.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferenceexperiment.html#cfn-sagemaker-inferenceexperiment-name
   */
  readonly name: string;

  /**
   * The ARN of the IAM role that Amazon SageMaker can assume to access model artifacts and container images, and manage Amazon SageMaker Inference endpoints for model deployment.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferenceexperiment.html#cfn-sagemaker-inferenceexperiment-rolearn
   */
  readonly roleArn: string;

  /**
   * The duration for which the inference experiment ran or will run.
   *
   * The maximum duration that you can set for an inference experiment is 30 days.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferenceexperiment.html#cfn-sagemaker-inferenceexperiment-schedule
   */
  readonly schedule?: CfnInferenceExperiment.InferenceExperimentScheduleProperty | cdk.IResolvable;

  /**
   * The configuration of `ShadowMode` inference experiment type, which shows the production variant that takes all the inference requests, and the shadow variant to which Amazon SageMaker replicates a percentage of the inference requests.
   *
   * For the shadow variant it also shows the percentage of requests that Amazon SageMaker replicates.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferenceexperiment.html#cfn-sagemaker-inferenceexperiment-shadowmodeconfig
   */
  readonly shadowModeConfig?: cdk.IResolvable | CfnInferenceExperiment.ShadowModeConfigProperty;

  /**
   * The error message for the inference experiment status result.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferenceexperiment.html#cfn-sagemaker-inferenceexperiment-statusreason
   */
  readonly statusReason?: string;

  /**
   * An array of key-value pairs to apply to this resource.
   *
   * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferenceexperiment.html#cfn-sagemaker-inferenceexperiment-tags
   */
  readonly tags?: Array<cdk.CfnTag>;

  /**
   * The type of the inference experiment.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferenceexperiment.html#cfn-sagemaker-inferenceexperiment-type
   */
  readonly type: string;
}

/**
 * Determine whether the given properties match those of a `CaptureContentTypeHeaderProperty`
 *
 * @param properties - the TypeScript properties of a `CaptureContentTypeHeaderProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnInferenceExperimentCaptureContentTypeHeaderPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("csvContentTypes", cdk.listValidator(cdk.validateString))(properties.csvContentTypes));
  errors.collect(cdk.propertyValidator("jsonContentTypes", cdk.listValidator(cdk.validateString))(properties.jsonContentTypes));
  return errors.wrap("supplied properties not correct for \"CaptureContentTypeHeaderProperty\"");
}

// @ts-ignore TS6133
function convertCfnInferenceExperimentCaptureContentTypeHeaderPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnInferenceExperimentCaptureContentTypeHeaderPropertyValidator(properties).assertSuccess();
  return {
    "CsvContentTypes": cdk.listMapper(cdk.stringToCloudFormation)(properties.csvContentTypes),
    "JsonContentTypes": cdk.listMapper(cdk.stringToCloudFormation)(properties.jsonContentTypes)
  };
}

// @ts-ignore TS6133
function CfnInferenceExperimentCaptureContentTypeHeaderPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInferenceExperiment.CaptureContentTypeHeaderProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInferenceExperiment.CaptureContentTypeHeaderProperty>();
  ret.addPropertyResult("csvContentTypes", "CsvContentTypes", (properties.CsvContentTypes != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.CsvContentTypes) : undefined));
  ret.addPropertyResult("jsonContentTypes", "JsonContentTypes", (properties.JsonContentTypes != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.JsonContentTypes) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DataStorageConfigProperty`
 *
 * @param properties - the TypeScript properties of a `DataStorageConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnInferenceExperimentDataStorageConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("contentType", CfnInferenceExperimentCaptureContentTypeHeaderPropertyValidator)(properties.contentType));
  errors.collect(cdk.propertyValidator("destination", cdk.requiredValidator)(properties.destination));
  errors.collect(cdk.propertyValidator("destination", cdk.validateString)(properties.destination));
  errors.collect(cdk.propertyValidator("kmsKey", cdk.validateString)(properties.kmsKey));
  return errors.wrap("supplied properties not correct for \"DataStorageConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnInferenceExperimentDataStorageConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnInferenceExperimentDataStorageConfigPropertyValidator(properties).assertSuccess();
  return {
    "ContentType": convertCfnInferenceExperimentCaptureContentTypeHeaderPropertyToCloudFormation(properties.contentType),
    "Destination": cdk.stringToCloudFormation(properties.destination),
    "KmsKey": cdk.stringToCloudFormation(properties.kmsKey)
  };
}

// @ts-ignore TS6133
function CfnInferenceExperimentDataStorageConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInferenceExperiment.DataStorageConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInferenceExperiment.DataStorageConfigProperty>();
  ret.addPropertyResult("contentType", "ContentType", (properties.ContentType != null ? CfnInferenceExperimentCaptureContentTypeHeaderPropertyFromCloudFormation(properties.ContentType) : undefined));
  ret.addPropertyResult("destination", "Destination", (properties.Destination != null ? cfn_parse.FromCloudFormation.getString(properties.Destination) : undefined));
  ret.addPropertyResult("kmsKey", "KmsKey", (properties.KmsKey != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKey) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `RealTimeInferenceConfigProperty`
 *
 * @param properties - the TypeScript properties of a `RealTimeInferenceConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnInferenceExperimentRealTimeInferenceConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("instanceCount", cdk.requiredValidator)(properties.instanceCount));
  errors.collect(cdk.propertyValidator("instanceCount", cdk.validateNumber)(properties.instanceCount));
  errors.collect(cdk.propertyValidator("instanceType", cdk.requiredValidator)(properties.instanceType));
  errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
  return errors.wrap("supplied properties not correct for \"RealTimeInferenceConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnInferenceExperimentRealTimeInferenceConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnInferenceExperimentRealTimeInferenceConfigPropertyValidator(properties).assertSuccess();
  return {
    "InstanceCount": cdk.numberToCloudFormation(properties.instanceCount),
    "InstanceType": cdk.stringToCloudFormation(properties.instanceType)
  };
}

// @ts-ignore TS6133
function CfnInferenceExperimentRealTimeInferenceConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnInferenceExperiment.RealTimeInferenceConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInferenceExperiment.RealTimeInferenceConfigProperty>();
  ret.addPropertyResult("instanceCount", "InstanceCount", (properties.InstanceCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.InstanceCount) : undefined));
  ret.addPropertyResult("instanceType", "InstanceType", (properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelInfrastructureConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ModelInfrastructureConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnInferenceExperimentModelInfrastructureConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("infrastructureType", cdk.requiredValidator)(properties.infrastructureType));
  errors.collect(cdk.propertyValidator("infrastructureType", cdk.validateString)(properties.infrastructureType));
  errors.collect(cdk.propertyValidator("realTimeInferenceConfig", cdk.requiredValidator)(properties.realTimeInferenceConfig));
  errors.collect(cdk.propertyValidator("realTimeInferenceConfig", CfnInferenceExperimentRealTimeInferenceConfigPropertyValidator)(properties.realTimeInferenceConfig));
  return errors.wrap("supplied properties not correct for \"ModelInfrastructureConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnInferenceExperimentModelInfrastructureConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnInferenceExperimentModelInfrastructureConfigPropertyValidator(properties).assertSuccess();
  return {
    "InfrastructureType": cdk.stringToCloudFormation(properties.infrastructureType),
    "RealTimeInferenceConfig": convertCfnInferenceExperimentRealTimeInferenceConfigPropertyToCloudFormation(properties.realTimeInferenceConfig)
  };
}

// @ts-ignore TS6133
function CfnInferenceExperimentModelInfrastructureConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnInferenceExperiment.ModelInfrastructureConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInferenceExperiment.ModelInfrastructureConfigProperty>();
  ret.addPropertyResult("infrastructureType", "InfrastructureType", (properties.InfrastructureType != null ? cfn_parse.FromCloudFormation.getString(properties.InfrastructureType) : undefined));
  ret.addPropertyResult("realTimeInferenceConfig", "RealTimeInferenceConfig", (properties.RealTimeInferenceConfig != null ? CfnInferenceExperimentRealTimeInferenceConfigPropertyFromCloudFormation(properties.RealTimeInferenceConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelVariantConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ModelVariantConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnInferenceExperimentModelVariantConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("infrastructureConfig", cdk.requiredValidator)(properties.infrastructureConfig));
  errors.collect(cdk.propertyValidator("infrastructureConfig", CfnInferenceExperimentModelInfrastructureConfigPropertyValidator)(properties.infrastructureConfig));
  errors.collect(cdk.propertyValidator("modelName", cdk.requiredValidator)(properties.modelName));
  errors.collect(cdk.propertyValidator("modelName", cdk.validateString)(properties.modelName));
  errors.collect(cdk.propertyValidator("variantName", cdk.requiredValidator)(properties.variantName));
  errors.collect(cdk.propertyValidator("variantName", cdk.validateString)(properties.variantName));
  return errors.wrap("supplied properties not correct for \"ModelVariantConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnInferenceExperimentModelVariantConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnInferenceExperimentModelVariantConfigPropertyValidator(properties).assertSuccess();
  return {
    "InfrastructureConfig": convertCfnInferenceExperimentModelInfrastructureConfigPropertyToCloudFormation(properties.infrastructureConfig),
    "ModelName": cdk.stringToCloudFormation(properties.modelName),
    "VariantName": cdk.stringToCloudFormation(properties.variantName)
  };
}

// @ts-ignore TS6133
function CfnInferenceExperimentModelVariantConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnInferenceExperiment.ModelVariantConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInferenceExperiment.ModelVariantConfigProperty>();
  ret.addPropertyResult("infrastructureConfig", "InfrastructureConfig", (properties.InfrastructureConfig != null ? CfnInferenceExperimentModelInfrastructureConfigPropertyFromCloudFormation(properties.InfrastructureConfig) : undefined));
  ret.addPropertyResult("modelName", "ModelName", (properties.ModelName != null ? cfn_parse.FromCloudFormation.getString(properties.ModelName) : undefined));
  ret.addPropertyResult("variantName", "VariantName", (properties.VariantName != null ? cfn_parse.FromCloudFormation.getString(properties.VariantName) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ShadowModelVariantConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ShadowModelVariantConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnInferenceExperimentShadowModelVariantConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("samplingPercentage", cdk.requiredValidator)(properties.samplingPercentage));
  errors.collect(cdk.propertyValidator("samplingPercentage", cdk.validateNumber)(properties.samplingPercentage));
  errors.collect(cdk.propertyValidator("shadowModelVariantName", cdk.requiredValidator)(properties.shadowModelVariantName));
  errors.collect(cdk.propertyValidator("shadowModelVariantName", cdk.validateString)(properties.shadowModelVariantName));
  return errors.wrap("supplied properties not correct for \"ShadowModelVariantConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnInferenceExperimentShadowModelVariantConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnInferenceExperimentShadowModelVariantConfigPropertyValidator(properties).assertSuccess();
  return {
    "SamplingPercentage": cdk.numberToCloudFormation(properties.samplingPercentage),
    "ShadowModelVariantName": cdk.stringToCloudFormation(properties.shadowModelVariantName)
  };
}

// @ts-ignore TS6133
function CfnInferenceExperimentShadowModelVariantConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnInferenceExperiment.ShadowModelVariantConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInferenceExperiment.ShadowModelVariantConfigProperty>();
  ret.addPropertyResult("samplingPercentage", "SamplingPercentage", (properties.SamplingPercentage != null ? cfn_parse.FromCloudFormation.getNumber(properties.SamplingPercentage) : undefined));
  ret.addPropertyResult("shadowModelVariantName", "ShadowModelVariantName", (properties.ShadowModelVariantName != null ? cfn_parse.FromCloudFormation.getString(properties.ShadowModelVariantName) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ShadowModeConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ShadowModeConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnInferenceExperimentShadowModeConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("shadowModelVariants", cdk.requiredValidator)(properties.shadowModelVariants));
  errors.collect(cdk.propertyValidator("shadowModelVariants", cdk.listValidator(CfnInferenceExperimentShadowModelVariantConfigPropertyValidator))(properties.shadowModelVariants));
  errors.collect(cdk.propertyValidator("sourceModelVariantName", cdk.requiredValidator)(properties.sourceModelVariantName));
  errors.collect(cdk.propertyValidator("sourceModelVariantName", cdk.validateString)(properties.sourceModelVariantName));
  return errors.wrap("supplied properties not correct for \"ShadowModeConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnInferenceExperimentShadowModeConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnInferenceExperimentShadowModeConfigPropertyValidator(properties).assertSuccess();
  return {
    "ShadowModelVariants": cdk.listMapper(convertCfnInferenceExperimentShadowModelVariantConfigPropertyToCloudFormation)(properties.shadowModelVariants),
    "SourceModelVariantName": cdk.stringToCloudFormation(properties.sourceModelVariantName)
  };
}

// @ts-ignore TS6133
function CfnInferenceExperimentShadowModeConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnInferenceExperiment.ShadowModeConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInferenceExperiment.ShadowModeConfigProperty>();
  ret.addPropertyResult("shadowModelVariants", "ShadowModelVariants", (properties.ShadowModelVariants != null ? cfn_parse.FromCloudFormation.getArray(CfnInferenceExperimentShadowModelVariantConfigPropertyFromCloudFormation)(properties.ShadowModelVariants) : undefined));
  ret.addPropertyResult("sourceModelVariantName", "SourceModelVariantName", (properties.SourceModelVariantName != null ? cfn_parse.FromCloudFormation.getString(properties.SourceModelVariantName) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `InferenceExperimentScheduleProperty`
 *
 * @param properties - the TypeScript properties of a `InferenceExperimentScheduleProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnInferenceExperimentInferenceExperimentSchedulePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("endTime", cdk.validateString)(properties.endTime));
  errors.collect(cdk.propertyValidator("startTime", cdk.validateString)(properties.startTime));
  return errors.wrap("supplied properties not correct for \"InferenceExperimentScheduleProperty\"");
}

// @ts-ignore TS6133
function convertCfnInferenceExperimentInferenceExperimentSchedulePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnInferenceExperimentInferenceExperimentSchedulePropertyValidator(properties).assertSuccess();
  return {
    "EndTime": cdk.stringToCloudFormation(properties.endTime),
    "StartTime": cdk.stringToCloudFormation(properties.startTime)
  };
}

// @ts-ignore TS6133
function CfnInferenceExperimentInferenceExperimentSchedulePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInferenceExperiment.InferenceExperimentScheduleProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInferenceExperiment.InferenceExperimentScheduleProperty>();
  ret.addPropertyResult("endTime", "EndTime", (properties.EndTime != null ? cfn_parse.FromCloudFormation.getString(properties.EndTime) : undefined));
  ret.addPropertyResult("startTime", "StartTime", (properties.StartTime != null ? cfn_parse.FromCloudFormation.getString(properties.StartTime) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `EndpointMetadataProperty`
 *
 * @param properties - the TypeScript properties of a `EndpointMetadataProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnInferenceExperimentEndpointMetadataPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("endpointConfigName", cdk.validateString)(properties.endpointConfigName));
  errors.collect(cdk.propertyValidator("endpointName", cdk.requiredValidator)(properties.endpointName));
  errors.collect(cdk.propertyValidator("endpointName", cdk.validateString)(properties.endpointName));
  errors.collect(cdk.propertyValidator("endpointStatus", cdk.validateString)(properties.endpointStatus));
  return errors.wrap("supplied properties not correct for \"EndpointMetadataProperty\"");
}

// @ts-ignore TS6133
function convertCfnInferenceExperimentEndpointMetadataPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnInferenceExperimentEndpointMetadataPropertyValidator(properties).assertSuccess();
  return {
    "EndpointConfigName": cdk.stringToCloudFormation(properties.endpointConfigName),
    "EndpointName": cdk.stringToCloudFormation(properties.endpointName),
    "EndpointStatus": cdk.stringToCloudFormation(properties.endpointStatus)
  };
}

// @ts-ignore TS6133
function CfnInferenceExperimentEndpointMetadataPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInferenceExperiment.EndpointMetadataProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInferenceExperiment.EndpointMetadataProperty>();
  ret.addPropertyResult("endpointConfigName", "EndpointConfigName", (properties.EndpointConfigName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointConfigName) : undefined));
  ret.addPropertyResult("endpointName", "EndpointName", (properties.EndpointName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointName) : undefined));
  ret.addPropertyResult("endpointStatus", "EndpointStatus", (properties.EndpointStatus != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointStatus) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnInferenceExperimentProps`
 *
 * @param properties - the TypeScript properties of a `CfnInferenceExperimentProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnInferenceExperimentPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("dataStorageConfig", CfnInferenceExperimentDataStorageConfigPropertyValidator)(properties.dataStorageConfig));
  errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
  errors.collect(cdk.propertyValidator("desiredState", cdk.validateString)(properties.desiredState));
  errors.collect(cdk.propertyValidator("endpointName", cdk.requiredValidator)(properties.endpointName));
  errors.collect(cdk.propertyValidator("endpointName", cdk.validateString)(properties.endpointName));
  errors.collect(cdk.propertyValidator("kmsKey", cdk.validateString)(properties.kmsKey));
  errors.collect(cdk.propertyValidator("modelVariants", cdk.requiredValidator)(properties.modelVariants));
  errors.collect(cdk.propertyValidator("modelVariants", cdk.listValidator(CfnInferenceExperimentModelVariantConfigPropertyValidator))(properties.modelVariants));
  errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
  errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
  errors.collect(cdk.propertyValidator("roleArn", cdk.requiredValidator)(properties.roleArn));
  errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
  errors.collect(cdk.propertyValidator("schedule", CfnInferenceExperimentInferenceExperimentSchedulePropertyValidator)(properties.schedule));
  errors.collect(cdk.propertyValidator("shadowModeConfig", CfnInferenceExperimentShadowModeConfigPropertyValidator)(properties.shadowModeConfig));
  errors.collect(cdk.propertyValidator("statusReason", cdk.validateString)(properties.statusReason));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  errors.collect(cdk.propertyValidator("type", cdk.requiredValidator)(properties.type));
  errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
  return errors.wrap("supplied properties not correct for \"CfnInferenceExperimentProps\"");
}

// @ts-ignore TS6133
function convertCfnInferenceExperimentPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnInferenceExperimentPropsValidator(properties).assertSuccess();
  return {
    "DataStorageConfig": convertCfnInferenceExperimentDataStorageConfigPropertyToCloudFormation(properties.dataStorageConfig),
    "Description": cdk.stringToCloudFormation(properties.description),
    "DesiredState": cdk.stringToCloudFormation(properties.desiredState),
    "EndpointName": cdk.stringToCloudFormation(properties.endpointName),
    "KmsKey": cdk.stringToCloudFormation(properties.kmsKey),
    "ModelVariants": cdk.listMapper(convertCfnInferenceExperimentModelVariantConfigPropertyToCloudFormation)(properties.modelVariants),
    "Name": cdk.stringToCloudFormation(properties.name),
    "RoleArn": cdk.stringToCloudFormation(properties.roleArn),
    "Schedule": convertCfnInferenceExperimentInferenceExperimentSchedulePropertyToCloudFormation(properties.schedule),
    "ShadowModeConfig": convertCfnInferenceExperimentShadowModeConfigPropertyToCloudFormation(properties.shadowModeConfig),
    "StatusReason": cdk.stringToCloudFormation(properties.statusReason),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
    "Type": cdk.stringToCloudFormation(properties.type)
  };
}

// @ts-ignore TS6133
function CfnInferenceExperimentPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInferenceExperimentProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInferenceExperimentProps>();
  ret.addPropertyResult("dataStorageConfig", "DataStorageConfig", (properties.DataStorageConfig != null ? CfnInferenceExperimentDataStorageConfigPropertyFromCloudFormation(properties.DataStorageConfig) : undefined));
  ret.addPropertyResult("description", "Description", (properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined));
  ret.addPropertyResult("desiredState", "DesiredState", (properties.DesiredState != null ? cfn_parse.FromCloudFormation.getString(properties.DesiredState) : undefined));
  ret.addPropertyResult("endpointName", "EndpointName", (properties.EndpointName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointName) : undefined));
  ret.addPropertyResult("kmsKey", "KmsKey", (properties.KmsKey != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKey) : undefined));
  ret.addPropertyResult("modelVariants", "ModelVariants", (properties.ModelVariants != null ? cfn_parse.FromCloudFormation.getArray(CfnInferenceExperimentModelVariantConfigPropertyFromCloudFormation)(properties.ModelVariants) : undefined));
  ret.addPropertyResult("name", "Name", (properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined));
  ret.addPropertyResult("roleArn", "RoleArn", (properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined));
  ret.addPropertyResult("schedule", "Schedule", (properties.Schedule != null ? CfnInferenceExperimentInferenceExperimentSchedulePropertyFromCloudFormation(properties.Schedule) : undefined));
  ret.addPropertyResult("shadowModeConfig", "ShadowModeConfig", (properties.ShadowModeConfig != null ? CfnInferenceExperimentShadowModeConfigPropertyFromCloudFormation(properties.ShadowModeConfig) : undefined));
  ret.addPropertyResult("statusReason", "StatusReason", (properties.StatusReason != null ? cfn_parse.FromCloudFormation.getString(properties.StatusReason) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addPropertyResult("type", "Type", (properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * The `AWS::SageMaker::Model` resource to create a model to host at an Amazon SageMaker endpoint.
 *
 * For more information, see [Deploying a Model on Amazon SageMaker Hosting Services](https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works-hosting.html) in the *Amazon SageMaker Developer Guide* .
 *
 * @cloudformationResource AWS::SageMaker::Model
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-model.html
 */
export class CfnModel extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::Model";

  /**
   * Build a CfnModel from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnModel {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnModelPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnModel(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * @cloudformationAttribute Id
   */
  public readonly attrId: string;

  /**
   * The name of the model, such as `MyModel` .
   *
   * @cloudformationAttribute ModelName
   */
  public readonly attrModelName: string;

  /**
   * Specifies the containers in the inference pipeline.
   */
  public containers?: Array<CfnModel.ContainerDefinitionProperty | cdk.IResolvable> | cdk.IResolvable;

  /**
   * Isolates the model container.
   */
  public enableNetworkIsolation?: boolean | cdk.IResolvable;

  /**
   * The Amazon Resource Name (ARN) of the IAM role that SageMaker can assume to access model artifacts and docker image for deployment on ML compute instances or for batch transform jobs.
   */
  public executionRoleArn?: string;

  /**
   * Specifies details of how containers in a multi-container endpoint are called.
   */
  public inferenceExecutionConfig?: CfnModel.InferenceExecutionConfigProperty | cdk.IResolvable;

  /**
   * The name of the new model.
   */
  public modelName?: string;

  /**
   * The location of the primary docker image containing inference code, associated artifacts, and custom environment map that the inference code uses when the model is deployed for predictions.
   */
  public primaryContainer?: CfnModel.ContainerDefinitionProperty | cdk.IResolvable;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * A list of key-value pairs to apply to this resource.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * A [VpcConfig](https://docs.aws.amazon.com/sagemaker/latest/dg/API_VpcConfig.html) object that specifies the VPC that you want your model to connect to. Control access to and from your model container by configuring the VPC. `VpcConfig` is used in hosting services and in batch transform. For more information, see [Protect Endpoints by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html) and [Protect Data in Batch Transform Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-vpc.html) .
   */
  public vpcConfig?: cdk.IResolvable | CfnModel.VpcConfigProperty;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnModelProps = {}) {
    super(scope, id, {
      "type": CfnModel.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    this.attrId = cdk.Token.asString(this.getAtt("Id", cdk.ResolutionTypeHint.STRING));
    this.attrModelName = cdk.Token.asString(this.getAtt("ModelName", cdk.ResolutionTypeHint.STRING));
    this.containers = props.containers;
    this.enableNetworkIsolation = props.enableNetworkIsolation;
    this.executionRoleArn = props.executionRoleArn;
    this.inferenceExecutionConfig = props.inferenceExecutionConfig;
    this.modelName = props.modelName;
    this.primaryContainer = props.primaryContainer;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::Model", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
    this.vpcConfig = props.vpcConfig;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "containers": this.containers,
      "enableNetworkIsolation": this.enableNetworkIsolation,
      "executionRoleArn": this.executionRoleArn,
      "inferenceExecutionConfig": this.inferenceExecutionConfig,
      "modelName": this.modelName,
      "primaryContainer": this.primaryContainer,
      "tags": this.tags.renderTags(),
      "vpcConfig": this.vpcConfig
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnModel.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnModelPropsToCloudFormation(props);
  }
}

export namespace CfnModel {
  /**
   * Describes the container, as part of model definition.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-containerdefinition.html
   */
  export interface ContainerDefinitionProperty {
    /**
     * This parameter is ignored for models that contain only a `PrimaryContainer` .
     *
     * When a `ContainerDefinition` is part of an inference pipeline, the value of the parameter uniquely identifies the container for the purposes of logging and metrics. For information, see [Use Logs and Metrics to Monitor an Inference Pipeline](https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-logs-metrics.html) . If you don't specify a value for this parameter for a `ContainerDefinition` that is part of an inference pipeline, a unique name is automatically assigned based on the position of the `ContainerDefinition` in the pipeline. If you specify a value for the `ContainerHostName` for any `ContainerDefinition` that is part of an inference pipeline, you must specify a value for the `ContainerHostName` parameter of every `ContainerDefinition` in that pipeline.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-containerdefinition.html#cfn-sagemaker-model-containerdefinition-containerhostname
     */
    readonly containerHostname?: string;

    /**
     * The environment variables to set in the Docker container.
     *
     * Each key and value in the `Environment` string to string map can have length of up to 1024. We support up to 16 entries in the map.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-containerdefinition.html#cfn-sagemaker-model-containerdefinition-environment
     */
    readonly environment?: any | cdk.IResolvable;

    /**
     * The path where inference code is stored.
     *
     * This can be either in Amazon EC2 Container Registry or in a Docker registry that is accessible from the same VPC that you configure for your endpoint. If you are using your own custom algorithm instead of an algorithm provided by SageMaker, the inference code must meet SageMaker requirements. SageMaker supports both `registry/repository[:tag]` and `registry/repository[@digest]` image path formats. For more information, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html) .
     *
     * > The model artifacts in an Amazon S3 bucket and the Docker image for inference container in Amazon EC2 Container Registry must be in the same region as the model or endpoint you are creating.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-containerdefinition.html#cfn-sagemaker-model-containerdefinition-image
     */
    readonly image?: string;

    /**
     * Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC).
     *
     * For information about storing containers in a private Docker registry, see [Use a Private Docker Registry for Real-Time Inference Containers](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html) .
     *
     * > The model artifacts in an Amazon S3 bucket and the Docker image for inference container in Amazon EC2 Container Registry must be in the same region as the model or endpoint you are creating.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-containerdefinition.html#cfn-sagemaker-model-containerdefinition-imageconfig
     */
    readonly imageConfig?: CfnModel.ImageConfigProperty | cdk.IResolvable;

    /**
     * The inference specification name in the model package version.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-containerdefinition.html#cfn-sagemaker-model-containerdefinition-inferencespecificationname
     */
    readonly inferenceSpecificationName?: string;

    /**
     * Whether the container hosts a single model or multiple models.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-containerdefinition.html#cfn-sagemaker-model-containerdefinition-mode
     */
    readonly mode?: string;

    /**
     * Specifies the location of ML model data to deploy.
     *
     * > Currently you cannot use `ModelDataSource` in conjunction with SageMaker batch transform, SageMaker serverless endpoints, SageMaker multi-model endpoints, and SageMaker Marketplace.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-containerdefinition.html#cfn-sagemaker-model-containerdefinition-modeldatasource
     */
    readonly modelDataSource?: cdk.IResolvable | CfnModel.ModelDataSourceProperty;

    /**
     * The S3 path where the model artifacts, which result from model training, are stored.
     *
     * This path must point to a single gzip compressed tar archive (.tar.gz suffix). The S3 path is required for SageMaker built-in algorithms, but not if you use your own algorithms. For more information on built-in algorithms, see [Common Parameters](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html) .
     *
     * > The model artifacts must be in an S3 bucket that is in the same region as the model or endpoint you are creating.
     *
     * If you provide a value for this parameter, SageMaker uses AWS Security Token Service to download model artifacts from the S3 path you provide. AWS STS is activated in your AWS account by default. If you previously deactivated AWS STS for a region, you need to reactivate AWS STS for that region. For more information, see [Activating and Deactivating AWS STS in an AWS Region](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html) in the *AWS Identity and Access Management User Guide* .
     *
     * > If you use a built-in algorithm to create a model, SageMaker requires that you provide a S3 path to the model artifacts in `ModelDataUrl` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-containerdefinition.html#cfn-sagemaker-model-containerdefinition-modeldataurl
     */
    readonly modelDataUrl?: string;

    /**
     * The name or Amazon Resource Name (ARN) of the model package to use to create the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-containerdefinition.html#cfn-sagemaker-model-containerdefinition-modelpackagename
     */
    readonly modelPackageName?: string;

    /**
     * Specifies additional configuration for multi-model endpoints.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-containerdefinition.html#cfn-sagemaker-model-containerdefinition-multimodelconfig
     */
    readonly multiModelConfig?: cdk.IResolvable | CfnModel.MultiModelConfigProperty;
  }

  /**
   * Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC).
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-imageconfig.html
   */
  export interface ImageConfigProperty {
    /**
     * Set this to one of the following values:.
     *
     * - `Platform` - The model image is hosted in Amazon ECR.
     * - `Vpc` - The model image is hosted in a private Docker registry in your VPC.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-imageconfig.html#cfn-sagemaker-model-imageconfig-repositoryaccessmode
     */
    readonly repositoryAccessMode: string;

    /**
     * (Optional) Specifies an authentication configuration for the private docker registry where your model image is hosted.
     *
     * Specify a value for this property only if you specified `Vpc` as the value for the `RepositoryAccessMode` field, and the private Docker registry where the model image is hosted requires authentication.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-imageconfig.html#cfn-sagemaker-model-imageconfig-repositoryauthconfig
     */
    readonly repositoryAuthConfig?: cdk.IResolvable | CfnModel.RepositoryAuthConfigProperty;
  }

  /**
   * Specifies an authentication configuration for the private docker registry where your model image is hosted.
   *
   * Specify a value for this property only if you specified `Vpc` as the value for the `RepositoryAccessMode` field of the `ImageConfig` object that you passed to a call to `CreateModel` and the private Docker registry where the model image is hosted requires authentication.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-repositoryauthconfig.html
   */
  export interface RepositoryAuthConfigProperty {
    /**
     * The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted.
     *
     * For information about how to create an AWS Lambda function, see [Create a Lambda function with the console](https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html) in the *AWS Lambda Developer Guide* .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-repositoryauthconfig.html#cfn-sagemaker-model-repositoryauthconfig-repositorycredentialsproviderarn
     */
    readonly repositoryCredentialsProviderArn: string;
  }

  /**
   * Specifies additional configuration for hosting multi-model endpoints.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-multimodelconfig.html
   */
  export interface MultiModelConfigProperty {
    /**
     * Whether to cache models for a multi-model endpoint.
     *
     * By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to Disabled.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-multimodelconfig.html#cfn-sagemaker-model-multimodelconfig-modelcachesetting
     */
    readonly modelCacheSetting?: string;
  }

  /**
   * Specifies the location of ML model data to deploy.
   *
   * If specified, you must specify one and only one of the available data sources.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-modeldatasource.html
   */
  export interface ModelDataSourceProperty {
    /**
     * Specifies the S3 location of ML model data to deploy.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-modeldatasource.html#cfn-sagemaker-model-modeldatasource-s3datasource
     */
    readonly s3DataSource: cdk.IResolvable | CfnModel.S3DataSourceProperty;
  }

  /**
   * Describes the S3 data source.
   *
   * Your input bucket must be in the same AWS region as your training job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-s3datasource.html
   */
  export interface S3DataSourceProperty {
    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-s3datasource.html#cfn-sagemaker-model-s3datasource-compressiontype
     */
    readonly compressionType: string;

    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-s3datasource.html#cfn-sagemaker-model-s3datasource-modelaccessconfig
     */
    readonly modelAccessConfig?: cdk.IResolvable | CfnModel.ModelAccessConfigProperty;

    /**
     * If you choose `S3Prefix` , `S3Uri` identifies a key name prefix.
     *
     * SageMaker uses all objects that match the specified key name prefix for model training.
     *
     * If you choose `ManifestFile` , `S3Uri` identifies an object that is a manifest file containing a list of object keys that you want SageMaker to use for model training.
     *
     * If you choose `AugmentedManifestFile` , S3Uri identifies an object that is an augmented manifest file in JSON lines format. This file contains the data you want to use for model training. `AugmentedManifestFile` can only be used if the Channel's input mode is `Pipe` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-s3datasource.html#cfn-sagemaker-model-s3datasource-s3datatype
     */
    readonly s3DataType: string;

    /**
     * Depending on the value specified for the `S3DataType` , identifies either a key name prefix or a manifest.
     *
     * For example:
     *
     * - A key name prefix might look like this: `s3://bucketname/exampleprefix/`
     * - A manifest might look like this: `s3://bucketname/example.manifest`
     *
     * A manifest is an S3 object which is a JSON file consisting of an array of elements. The first element is a prefix which is followed by one or more suffixes. SageMaker appends the suffix elements to the prefix to get a full set of `S3Uri` . Note that the prefix must be a valid non-empty `S3Uri` that precludes users from specifying a manifest whose individual `S3Uri` is sourced from different S3 buckets.
     *
     * The following code example shows a valid manifest format:
     *
     * `[ {"prefix": "s3://customer_bucket/some/prefix/"},`
     *
     * `"relative/path/to/custdata-1",`
     *
     * `"relative/path/custdata-2",`
     *
     * `...`
     *
     * `"relative/path/custdata-N"`
     *
     * `]`
     *
     * This JSON is equivalent to the following `S3Uri` list:
     *
     * `s3://customer_bucket/some/prefix/relative/path/to/custdata-1`
     *
     * `s3://customer_bucket/some/prefix/relative/path/custdata-2`
     *
     * `...`
     *
     * `s3://customer_bucket/some/prefix/relative/path/custdata-N`
     *
     * The complete set of `S3Uri` in this manifest is the input data for the channel for this data source. The object that each `S3Uri` points to must be readable by the IAM role that SageMaker uses to perform tasks on your behalf.
     *
     * Your input bucket must be located in same AWS region as your training job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-s3datasource.html#cfn-sagemaker-model-s3datasource-s3uri
     */
    readonly s3Uri: string;
  }

  /**
   * The access configuration file for the ML model.
   *
   * You can explicitly accept the model end-user license agreement (EULA) within the `ModelAccessConfig` . For more information, see [End-user license agreements](https://docs.aws.amazon.com/sagemaker/latest/dg/jumpstart-foundation-models-choose.html#jumpstart-foundation-models-choose-eula) .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-modelaccessconfig.html
   */
  export interface ModelAccessConfigProperty {
    /**
     * Specifies agreement to the model end-user license agreement (EULA).
     *
     * The `AcceptEula` value must be explicitly defined as `True` in order to accept the EULA that this model requires. You are responsible for reviewing and complying with any applicable license terms and making sure they are acceptable for your use case before downloading or using a model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-modelaccessconfig.html#cfn-sagemaker-model-modelaccessconfig-accepteula
     */
    readonly acceptEula: boolean | cdk.IResolvable;
  }

  /**
   * Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to.
   *
   * You can control access to and from your resources by configuring a VPC. For more information, see [Give SageMaker Access to Resources in your Amazon VPC](https://docs.aws.amazon.com/https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html) .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-vpcconfig.html
   */
  export interface VpcConfigProperty {
    /**
     * The VPC security group IDs, in the form `sg-xxxxxxxx` .
     *
     * Specify the security groups for the VPC that is specified in the `Subnets` field.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-vpcconfig.html#cfn-sagemaker-model-vpcconfig-securitygroupids
     */
    readonly securityGroupIds: Array<string>;

    /**
     * The ID of the subnets in the VPC to which you want to connect your training job or model.
     *
     * For information about the availability of specific instance types, see [Supported Instance Types and Availability Zones](https://docs.aws.amazon.com/sagemaker/latest/dg/instance-types-az.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-vpcconfig.html#cfn-sagemaker-model-vpcconfig-subnets
     */
    readonly subnets: Array<string>;
  }

  /**
   * Specifies details about how containers in a multi-container endpoint are run.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-inferenceexecutionconfig.html
   */
  export interface InferenceExecutionConfigProperty {
    /**
     * How containers in a multi-container are run. The following values are valid.
     *
     * - `Serial` - Containers run as a serial pipeline.
     * - `Direct` - Only the individual container that you specify is run.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-inferenceexecutionconfig.html#cfn-sagemaker-model-inferenceexecutionconfig-mode
     */
    readonly mode: string;
  }
}

/**
 * Properties for defining a `CfnModel`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-model.html
 */
export interface CfnModelProps {
  /**
   * Specifies the containers in the inference pipeline.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-model.html#cfn-sagemaker-model-containers
   */
  readonly containers?: Array<CfnModel.ContainerDefinitionProperty | cdk.IResolvable> | cdk.IResolvable;

  /**
   * Isolates the model container.
   *
   * No inbound or outbound network calls can be made to or from the model container.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-model.html#cfn-sagemaker-model-enablenetworkisolation
   */
  readonly enableNetworkIsolation?: boolean | cdk.IResolvable;

  /**
   * The Amazon Resource Name (ARN) of the IAM role that SageMaker can assume to access model artifacts and docker image for deployment on ML compute instances or for batch transform jobs.
   *
   * Deploying on ML compute instances is part of model hosting. For more information, see [SageMaker Roles](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html) .
   *
   * > To be able to pass this role to SageMaker, the caller of this API must have the `iam:PassRole` permission.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-model.html#cfn-sagemaker-model-executionrolearn
   */
  readonly executionRoleArn?: string;

  /**
   * Specifies details of how containers in a multi-container endpoint are called.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-model.html#cfn-sagemaker-model-inferenceexecutionconfig
   */
  readonly inferenceExecutionConfig?: CfnModel.InferenceExecutionConfigProperty | cdk.IResolvable;

  /**
   * The name of the new model.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-model.html#cfn-sagemaker-model-modelname
   */
  readonly modelName?: string;

  /**
   * The location of the primary docker image containing inference code, associated artifacts, and custom environment map that the inference code uses when the model is deployed for predictions.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-model.html#cfn-sagemaker-model-primarycontainer
   */
  readonly primaryContainer?: CfnModel.ContainerDefinitionProperty | cdk.IResolvable;

  /**
   * A list of key-value pairs to apply to this resource.
   *
   * For more information, see [Resource Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) and [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what) in the *AWS Billing and Cost Management User Guide* .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-model.html#cfn-sagemaker-model-tags
   */
  readonly tags?: Array<cdk.CfnTag>;

  /**
   * A [VpcConfig](https://docs.aws.amazon.com/sagemaker/latest/dg/API_VpcConfig.html) object that specifies the VPC that you want your model to connect to. Control access to and from your model container by configuring the VPC. `VpcConfig` is used in hosting services and in batch transform. For more information, see [Protect Endpoints by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html) and [Protect Data in Batch Transform Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-vpc.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-model.html#cfn-sagemaker-model-vpcconfig
   */
  readonly vpcConfig?: cdk.IResolvable | CfnModel.VpcConfigProperty;
}

/**
 * Determine whether the given properties match those of a `RepositoryAuthConfigProperty`
 *
 * @param properties - the TypeScript properties of a `RepositoryAuthConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelRepositoryAuthConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("repositoryCredentialsProviderArn", cdk.requiredValidator)(properties.repositoryCredentialsProviderArn));
  errors.collect(cdk.propertyValidator("repositoryCredentialsProviderArn", cdk.validateString)(properties.repositoryCredentialsProviderArn));
  return errors.wrap("supplied properties not correct for \"RepositoryAuthConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelRepositoryAuthConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelRepositoryAuthConfigPropertyValidator(properties).assertSuccess();
  return {
    "RepositoryCredentialsProviderArn": cdk.stringToCloudFormation(properties.repositoryCredentialsProviderArn)
  };
}

// @ts-ignore TS6133
function CfnModelRepositoryAuthConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModel.RepositoryAuthConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModel.RepositoryAuthConfigProperty>();
  ret.addPropertyResult("repositoryCredentialsProviderArn", "RepositoryCredentialsProviderArn", (properties.RepositoryCredentialsProviderArn != null ? cfn_parse.FromCloudFormation.getString(properties.RepositoryCredentialsProviderArn) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ImageConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ImageConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelImageConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("repositoryAccessMode", cdk.requiredValidator)(properties.repositoryAccessMode));
  errors.collect(cdk.propertyValidator("repositoryAccessMode", cdk.validateString)(properties.repositoryAccessMode));
  errors.collect(cdk.propertyValidator("repositoryAuthConfig", CfnModelRepositoryAuthConfigPropertyValidator)(properties.repositoryAuthConfig));
  return errors.wrap("supplied properties not correct for \"ImageConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelImageConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelImageConfigPropertyValidator(properties).assertSuccess();
  return {
    "RepositoryAccessMode": cdk.stringToCloudFormation(properties.repositoryAccessMode),
    "RepositoryAuthConfig": convertCfnModelRepositoryAuthConfigPropertyToCloudFormation(properties.repositoryAuthConfig)
  };
}

// @ts-ignore TS6133
function CfnModelImageConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModel.ImageConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModel.ImageConfigProperty>();
  ret.addPropertyResult("repositoryAccessMode", "RepositoryAccessMode", (properties.RepositoryAccessMode != null ? cfn_parse.FromCloudFormation.getString(properties.RepositoryAccessMode) : undefined));
  ret.addPropertyResult("repositoryAuthConfig", "RepositoryAuthConfig", (properties.RepositoryAuthConfig != null ? CfnModelRepositoryAuthConfigPropertyFromCloudFormation(properties.RepositoryAuthConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MultiModelConfigProperty`
 *
 * @param properties - the TypeScript properties of a `MultiModelConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelMultiModelConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("modelCacheSetting", cdk.validateString)(properties.modelCacheSetting));
  return errors.wrap("supplied properties not correct for \"MultiModelConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelMultiModelConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelMultiModelConfigPropertyValidator(properties).assertSuccess();
  return {
    "ModelCacheSetting": cdk.stringToCloudFormation(properties.modelCacheSetting)
  };
}

// @ts-ignore TS6133
function CfnModelMultiModelConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModel.MultiModelConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModel.MultiModelConfigProperty>();
  ret.addPropertyResult("modelCacheSetting", "ModelCacheSetting", (properties.ModelCacheSetting != null ? cfn_parse.FromCloudFormation.getString(properties.ModelCacheSetting) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelAccessConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ModelAccessConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelModelAccessConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("acceptEula", cdk.requiredValidator)(properties.acceptEula));
  errors.collect(cdk.propertyValidator("acceptEula", cdk.validateBoolean)(properties.acceptEula));
  return errors.wrap("supplied properties not correct for \"ModelAccessConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelModelAccessConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelModelAccessConfigPropertyValidator(properties).assertSuccess();
  return {
    "AcceptEula": cdk.booleanToCloudFormation(properties.acceptEula)
  };
}

// @ts-ignore TS6133
function CfnModelModelAccessConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModel.ModelAccessConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModel.ModelAccessConfigProperty>();
  ret.addPropertyResult("acceptEula", "AcceptEula", (properties.AcceptEula != null ? cfn_parse.FromCloudFormation.getBoolean(properties.AcceptEula) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `S3DataSourceProperty`
 *
 * @param properties - the TypeScript properties of a `S3DataSourceProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelS3DataSourcePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("compressionType", cdk.requiredValidator)(properties.compressionType));
  errors.collect(cdk.propertyValidator("compressionType", cdk.validateString)(properties.compressionType));
  errors.collect(cdk.propertyValidator("modelAccessConfig", CfnModelModelAccessConfigPropertyValidator)(properties.modelAccessConfig));
  errors.collect(cdk.propertyValidator("s3DataType", cdk.requiredValidator)(properties.s3DataType));
  errors.collect(cdk.propertyValidator("s3DataType", cdk.validateString)(properties.s3DataType));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.requiredValidator)(properties.s3Uri));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.validateString)(properties.s3Uri));
  return errors.wrap("supplied properties not correct for \"S3DataSourceProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelS3DataSourcePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelS3DataSourcePropertyValidator(properties).assertSuccess();
  return {
    "CompressionType": cdk.stringToCloudFormation(properties.compressionType),
    "ModelAccessConfig": convertCfnModelModelAccessConfigPropertyToCloudFormation(properties.modelAccessConfig),
    "S3DataType": cdk.stringToCloudFormation(properties.s3DataType),
    "S3Uri": cdk.stringToCloudFormation(properties.s3Uri)
  };
}

// @ts-ignore TS6133
function CfnModelS3DataSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModel.S3DataSourceProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModel.S3DataSourceProperty>();
  ret.addPropertyResult("compressionType", "CompressionType", (properties.CompressionType != null ? cfn_parse.FromCloudFormation.getString(properties.CompressionType) : undefined));
  ret.addPropertyResult("modelAccessConfig", "ModelAccessConfig", (properties.ModelAccessConfig != null ? CfnModelModelAccessConfigPropertyFromCloudFormation(properties.ModelAccessConfig) : undefined));
  ret.addPropertyResult("s3DataType", "S3DataType", (properties.S3DataType != null ? cfn_parse.FromCloudFormation.getString(properties.S3DataType) : undefined));
  ret.addPropertyResult("s3Uri", "S3Uri", (properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelDataSourceProperty`
 *
 * @param properties - the TypeScript properties of a `ModelDataSourceProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelModelDataSourcePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("s3DataSource", cdk.requiredValidator)(properties.s3DataSource));
  errors.collect(cdk.propertyValidator("s3DataSource", CfnModelS3DataSourcePropertyValidator)(properties.s3DataSource));
  return errors.wrap("supplied properties not correct for \"ModelDataSourceProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelModelDataSourcePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelModelDataSourcePropertyValidator(properties).assertSuccess();
  return {
    "S3DataSource": convertCfnModelS3DataSourcePropertyToCloudFormation(properties.s3DataSource)
  };
}

// @ts-ignore TS6133
function CfnModelModelDataSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModel.ModelDataSourceProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModel.ModelDataSourceProperty>();
  ret.addPropertyResult("s3DataSource", "S3DataSource", (properties.S3DataSource != null ? CfnModelS3DataSourcePropertyFromCloudFormation(properties.S3DataSource) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ContainerDefinitionProperty`
 *
 * @param properties - the TypeScript properties of a `ContainerDefinitionProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelContainerDefinitionPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("containerHostname", cdk.validateString)(properties.containerHostname));
  errors.collect(cdk.propertyValidator("environment", cdk.validateObject)(properties.environment));
  errors.collect(cdk.propertyValidator("image", cdk.validateString)(properties.image));
  errors.collect(cdk.propertyValidator("imageConfig", CfnModelImageConfigPropertyValidator)(properties.imageConfig));
  errors.collect(cdk.propertyValidator("inferenceSpecificationName", cdk.validateString)(properties.inferenceSpecificationName));
  errors.collect(cdk.propertyValidator("mode", cdk.validateString)(properties.mode));
  errors.collect(cdk.propertyValidator("modelDataSource", CfnModelModelDataSourcePropertyValidator)(properties.modelDataSource));
  errors.collect(cdk.propertyValidator("modelDataUrl", cdk.validateString)(properties.modelDataUrl));
  errors.collect(cdk.propertyValidator("modelPackageName", cdk.validateString)(properties.modelPackageName));
  errors.collect(cdk.propertyValidator("multiModelConfig", CfnModelMultiModelConfigPropertyValidator)(properties.multiModelConfig));
  return errors.wrap("supplied properties not correct for \"ContainerDefinitionProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelContainerDefinitionPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelContainerDefinitionPropertyValidator(properties).assertSuccess();
  return {
    "ContainerHostname": cdk.stringToCloudFormation(properties.containerHostname),
    "Environment": cdk.objectToCloudFormation(properties.environment),
    "Image": cdk.stringToCloudFormation(properties.image),
    "ImageConfig": convertCfnModelImageConfigPropertyToCloudFormation(properties.imageConfig),
    "InferenceSpecificationName": cdk.stringToCloudFormation(properties.inferenceSpecificationName),
    "Mode": cdk.stringToCloudFormation(properties.mode),
    "ModelDataSource": convertCfnModelModelDataSourcePropertyToCloudFormation(properties.modelDataSource),
    "ModelDataUrl": cdk.stringToCloudFormation(properties.modelDataUrl),
    "ModelPackageName": cdk.stringToCloudFormation(properties.modelPackageName),
    "MultiModelConfig": convertCfnModelMultiModelConfigPropertyToCloudFormation(properties.multiModelConfig)
  };
}

// @ts-ignore TS6133
function CfnModelContainerDefinitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModel.ContainerDefinitionProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModel.ContainerDefinitionProperty>();
  ret.addPropertyResult("containerHostname", "ContainerHostname", (properties.ContainerHostname != null ? cfn_parse.FromCloudFormation.getString(properties.ContainerHostname) : undefined));
  ret.addPropertyResult("environment", "Environment", (properties.Environment != null ? cfn_parse.FromCloudFormation.getAny(properties.Environment) : undefined));
  ret.addPropertyResult("image", "Image", (properties.Image != null ? cfn_parse.FromCloudFormation.getString(properties.Image) : undefined));
  ret.addPropertyResult("imageConfig", "ImageConfig", (properties.ImageConfig != null ? CfnModelImageConfigPropertyFromCloudFormation(properties.ImageConfig) : undefined));
  ret.addPropertyResult("inferenceSpecificationName", "InferenceSpecificationName", (properties.InferenceSpecificationName != null ? cfn_parse.FromCloudFormation.getString(properties.InferenceSpecificationName) : undefined));
  ret.addPropertyResult("mode", "Mode", (properties.Mode != null ? cfn_parse.FromCloudFormation.getString(properties.Mode) : undefined));
  ret.addPropertyResult("modelDataSource", "ModelDataSource", (properties.ModelDataSource != null ? CfnModelModelDataSourcePropertyFromCloudFormation(properties.ModelDataSource) : undefined));
  ret.addPropertyResult("modelDataUrl", "ModelDataUrl", (properties.ModelDataUrl != null ? cfn_parse.FromCloudFormation.getString(properties.ModelDataUrl) : undefined));
  ret.addPropertyResult("modelPackageName", "ModelPackageName", (properties.ModelPackageName != null ? cfn_parse.FromCloudFormation.getString(properties.ModelPackageName) : undefined));
  ret.addPropertyResult("multiModelConfig", "MultiModelConfig", (properties.MultiModelConfig != null ? CfnModelMultiModelConfigPropertyFromCloudFormation(properties.MultiModelConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `VpcConfigProperty`
 *
 * @param properties - the TypeScript properties of a `VpcConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelVpcConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("securityGroupIds", cdk.requiredValidator)(properties.securityGroupIds));
  errors.collect(cdk.propertyValidator("securityGroupIds", cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
  errors.collect(cdk.propertyValidator("subnets", cdk.requiredValidator)(properties.subnets));
  errors.collect(cdk.propertyValidator("subnets", cdk.listValidator(cdk.validateString))(properties.subnets));
  return errors.wrap("supplied properties not correct for \"VpcConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelVpcConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelVpcConfigPropertyValidator(properties).assertSuccess();
  return {
    "SecurityGroupIds": cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
    "Subnets": cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets)
  };
}

// @ts-ignore TS6133
function CfnModelVpcConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModel.VpcConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModel.VpcConfigProperty>();
  ret.addPropertyResult("securityGroupIds", "SecurityGroupIds", (properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SecurityGroupIds) : undefined));
  ret.addPropertyResult("subnets", "Subnets", (properties.Subnets != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.Subnets) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `InferenceExecutionConfigProperty`
 *
 * @param properties - the TypeScript properties of a `InferenceExecutionConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelInferenceExecutionConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("mode", cdk.requiredValidator)(properties.mode));
  errors.collect(cdk.propertyValidator("mode", cdk.validateString)(properties.mode));
  return errors.wrap("supplied properties not correct for \"InferenceExecutionConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelInferenceExecutionConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelInferenceExecutionConfigPropertyValidator(properties).assertSuccess();
  return {
    "Mode": cdk.stringToCloudFormation(properties.mode)
  };
}

// @ts-ignore TS6133
function CfnModelInferenceExecutionConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModel.InferenceExecutionConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModel.InferenceExecutionConfigProperty>();
  ret.addPropertyResult("mode", "Mode", (properties.Mode != null ? cfn_parse.FromCloudFormation.getString(properties.Mode) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnModelProps`
 *
 * @param properties - the TypeScript properties of a `CfnModelProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("containers", cdk.listValidator(CfnModelContainerDefinitionPropertyValidator))(properties.containers));
  errors.collect(cdk.propertyValidator("enableNetworkIsolation", cdk.validateBoolean)(properties.enableNetworkIsolation));
  errors.collect(cdk.propertyValidator("executionRoleArn", cdk.validateString)(properties.executionRoleArn));
  errors.collect(cdk.propertyValidator("inferenceExecutionConfig", CfnModelInferenceExecutionConfigPropertyValidator)(properties.inferenceExecutionConfig));
  errors.collect(cdk.propertyValidator("modelName", cdk.validateString)(properties.modelName));
  errors.collect(cdk.propertyValidator("primaryContainer", CfnModelContainerDefinitionPropertyValidator)(properties.primaryContainer));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  errors.collect(cdk.propertyValidator("vpcConfig", CfnModelVpcConfigPropertyValidator)(properties.vpcConfig));
  return errors.wrap("supplied properties not correct for \"CfnModelProps\"");
}

// @ts-ignore TS6133
function convertCfnModelPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPropsValidator(properties).assertSuccess();
  return {
    "Containers": cdk.listMapper(convertCfnModelContainerDefinitionPropertyToCloudFormation)(properties.containers),
    "EnableNetworkIsolation": cdk.booleanToCloudFormation(properties.enableNetworkIsolation),
    "ExecutionRoleArn": cdk.stringToCloudFormation(properties.executionRoleArn),
    "InferenceExecutionConfig": convertCfnModelInferenceExecutionConfigPropertyToCloudFormation(properties.inferenceExecutionConfig),
    "ModelName": cdk.stringToCloudFormation(properties.modelName),
    "PrimaryContainer": convertCfnModelContainerDefinitionPropertyToCloudFormation(properties.primaryContainer),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
    "VpcConfig": convertCfnModelVpcConfigPropertyToCloudFormation(properties.vpcConfig)
  };
}

// @ts-ignore TS6133
function CfnModelPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelProps>();
  ret.addPropertyResult("containers", "Containers", (properties.Containers != null ? cfn_parse.FromCloudFormation.getArray(CfnModelContainerDefinitionPropertyFromCloudFormation)(properties.Containers) : undefined));
  ret.addPropertyResult("enableNetworkIsolation", "EnableNetworkIsolation", (properties.EnableNetworkIsolation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableNetworkIsolation) : undefined));
  ret.addPropertyResult("executionRoleArn", "ExecutionRoleArn", (properties.ExecutionRoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.ExecutionRoleArn) : undefined));
  ret.addPropertyResult("inferenceExecutionConfig", "InferenceExecutionConfig", (properties.InferenceExecutionConfig != null ? CfnModelInferenceExecutionConfigPropertyFromCloudFormation(properties.InferenceExecutionConfig) : undefined));
  ret.addPropertyResult("modelName", "ModelName", (properties.ModelName != null ? cfn_parse.FromCloudFormation.getString(properties.ModelName) : undefined));
  ret.addPropertyResult("primaryContainer", "PrimaryContainer", (properties.PrimaryContainer != null ? CfnModelContainerDefinitionPropertyFromCloudFormation(properties.PrimaryContainer) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addPropertyResult("vpcConfig", "VpcConfig", (properties.VpcConfig != null ? CfnModelVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Creates the definition for a model bias job.
 *
 * @cloudformationResource AWS::SageMaker::ModelBiasJobDefinition
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelbiasjobdefinition.html
 */
export class CfnModelBiasJobDefinition extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::ModelBiasJobDefinition";

  /**
   * Build a CfnModelBiasJobDefinition from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnModelBiasJobDefinition {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnModelBiasJobDefinitionPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnModelBiasJobDefinition(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The time when the job definition was created.
   *
   * @cloudformationAttribute CreationTime
   */
  public readonly attrCreationTime: string;

  /**
   * The Amazon Resource Name (ARN) of the job definition.
   *
   * @cloudformationAttribute JobDefinitionArn
   */
  public readonly attrJobDefinitionArn: string;

  /**
   * The name of the endpoint used to run the monitoring job.
   */
  public endpointName?: string;

  /**
   * The name of the bias job definition.
   */
  public jobDefinitionName?: string;

  /**
   * Identifies the resources to deploy for a monitoring job.
   */
  public jobResources: cdk.IResolvable | CfnModelBiasJobDefinition.MonitoringResourcesProperty;

  /**
   * Configures the model bias job to run a specified Docker container image.
   */
  public modelBiasAppSpecification: cdk.IResolvable | CfnModelBiasJobDefinition.ModelBiasAppSpecificationProperty;

  /**
   * The baseline configuration for a model bias job.
   */
  public modelBiasBaselineConfig?: cdk.IResolvable | CfnModelBiasJobDefinition.ModelBiasBaselineConfigProperty;

  /**
   * Inputs for the model bias job.
   */
  public modelBiasJobInput: cdk.IResolvable | CfnModelBiasJobDefinition.ModelBiasJobInputProperty;

  /**
   * The output configuration for monitoring jobs.
   */
  public modelBiasJobOutputConfig: cdk.IResolvable | CfnModelBiasJobDefinition.MonitoringOutputConfigProperty;

  /**
   * Networking options for a model bias job.
   */
  public networkConfig?: cdk.IResolvable | CfnModelBiasJobDefinition.NetworkConfigProperty;

  /**
   * The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
   */
  public roleArn: string;

  /**
   * A time limit for how long the monitoring job is allowed to run before stopping.
   */
  public stoppingCondition?: cdk.IResolvable | CfnModelBiasJobDefinition.StoppingConditionProperty;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * An array of key-value pairs to apply to this resource.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnModelBiasJobDefinitionProps) {
    super(scope, id, {
      "type": CfnModelBiasJobDefinition.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "jobResources", this);
    cdk.requireProperty(props, "modelBiasAppSpecification", this);
    cdk.requireProperty(props, "modelBiasJobInput", this);
    cdk.requireProperty(props, "modelBiasJobOutputConfig", this);
    cdk.requireProperty(props, "roleArn", this);

    this.attrCreationTime = cdk.Token.asString(this.getAtt("CreationTime", cdk.ResolutionTypeHint.STRING));
    this.attrJobDefinitionArn = cdk.Token.asString(this.getAtt("JobDefinitionArn", cdk.ResolutionTypeHint.STRING));
    this.endpointName = props.endpointName;
    this.jobDefinitionName = props.jobDefinitionName;
    this.jobResources = props.jobResources;
    this.modelBiasAppSpecification = props.modelBiasAppSpecification;
    this.modelBiasBaselineConfig = props.modelBiasBaselineConfig;
    this.modelBiasJobInput = props.modelBiasJobInput;
    this.modelBiasJobOutputConfig = props.modelBiasJobOutputConfig;
    this.networkConfig = props.networkConfig;
    this.roleArn = props.roleArn;
    this.stoppingCondition = props.stoppingCondition;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::ModelBiasJobDefinition", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "endpointName": this.endpointName,
      "jobDefinitionName": this.jobDefinitionName,
      "jobResources": this.jobResources,
      "modelBiasAppSpecification": this.modelBiasAppSpecification,
      "modelBiasBaselineConfig": this.modelBiasBaselineConfig,
      "modelBiasJobInput": this.modelBiasJobInput,
      "modelBiasJobOutputConfig": this.modelBiasJobOutputConfig,
      "networkConfig": this.networkConfig,
      "roleArn": this.roleArn,
      "stoppingCondition": this.stoppingCondition,
      "tags": this.tags.renderTags()
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnModelBiasJobDefinition.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnModelBiasJobDefinitionPropsToCloudFormation(props);
  }
}

export namespace CfnModelBiasJobDefinition {
  /**
   * Inputs for the model bias job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-modelbiasjobinput.html
   */
  export interface ModelBiasJobInputProperty {
    /**
     * Input object for the batch transform job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-modelbiasjobinput.html#cfn-sagemaker-modelbiasjobdefinition-modelbiasjobinput-batchtransforminput
     */
    readonly batchTransformInput?: CfnModelBiasJobDefinition.BatchTransformInputProperty | cdk.IResolvable;

    /**
     * Input object for the endpoint.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-modelbiasjobinput.html#cfn-sagemaker-modelbiasjobdefinition-modelbiasjobinput-endpointinput
     */
    readonly endpointInput?: CfnModelBiasJobDefinition.EndpointInputProperty | cdk.IResolvable;

    /**
     * Location of ground truth labels to use in model bias job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-modelbiasjobinput.html#cfn-sagemaker-modelbiasjobdefinition-modelbiasjobinput-groundtruths3input
     */
    readonly groundTruthS3Input: cdk.IResolvable | CfnModelBiasJobDefinition.MonitoringGroundTruthS3InputProperty;
  }

  /**
   * The ground truth labels for the dataset used for the monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-monitoringgroundtruths3input.html
   */
  export interface MonitoringGroundTruthS3InputProperty {
    /**
     * The address of the Amazon S3 location of the ground truth labels.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-monitoringgroundtruths3input.html#cfn-sagemaker-modelbiasjobdefinition-monitoringgroundtruths3input-s3uri
     */
    readonly s3Uri: string;
  }

  /**
   * Input object for the batch transform job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-batchtransforminput.html
   */
  export interface BatchTransformInputProperty {
    /**
     * The Amazon S3 location being used to capture the data.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-batchtransforminput.html#cfn-sagemaker-modelbiasjobdefinition-batchtransforminput-datacaptureddestinations3uri
     */
    readonly dataCapturedDestinationS3Uri: string;

    /**
     * The dataset format for your batch transform job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-batchtransforminput.html#cfn-sagemaker-modelbiasjobdefinition-batchtransforminput-datasetformat
     */
    readonly datasetFormat: CfnModelBiasJobDefinition.DatasetFormatProperty | cdk.IResolvable;

    /**
     * If specified, monitoring jobs subtract this time from the end time.
     *
     * For information about using offsets for scheduling monitoring jobs, see [Schedule Model Quality Monitoring Jobs](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-batchtransforminput.html#cfn-sagemaker-modelbiasjobdefinition-batchtransforminput-endtimeoffset
     */
    readonly endTimeOffset?: string;

    /**
     * The attributes of the input data that are the input features.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-batchtransforminput.html#cfn-sagemaker-modelbiasjobdefinition-batchtransforminput-featuresattribute
     */
    readonly featuresAttribute?: string;

    /**
     * The attribute of the input data that represents the ground truth label.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-batchtransforminput.html#cfn-sagemaker-modelbiasjobdefinition-batchtransforminput-inferenceattribute
     */
    readonly inferenceAttribute?: string;

    /**
     * Path to the filesystem where the batch transform data is available to the container.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-batchtransforminput.html#cfn-sagemaker-modelbiasjobdefinition-batchtransforminput-localpath
     */
    readonly localPath: string;

    /**
     * In a classification problem, the attribute that represents the class probability.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-batchtransforminput.html#cfn-sagemaker-modelbiasjobdefinition-batchtransforminput-probabilityattribute
     */
    readonly probabilityAttribute?: string;

    /**
     * The threshold for the class probability to be evaluated as a positive result.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-batchtransforminput.html#cfn-sagemaker-modelbiasjobdefinition-batchtransforminput-probabilitythresholdattribute
     */
    readonly probabilityThresholdAttribute?: number;

    /**
     * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key.
     *
     * Defaults to `FullyReplicated`
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-batchtransforminput.html#cfn-sagemaker-modelbiasjobdefinition-batchtransforminput-s3datadistributiontype
     */
    readonly s3DataDistributionType?: string;

    /**
     * Whether the `Pipe` or `File` is used as the input mode for transferring data for the monitoring job.
     *
     * `Pipe` mode is recommended for large datasets. `File` mode is useful for small files that fit in memory. Defaults to `File` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-batchtransforminput.html#cfn-sagemaker-modelbiasjobdefinition-batchtransforminput-s3inputmode
     */
    readonly s3InputMode?: string;

    /**
     * If specified, monitoring jobs substract this time from the start time.
     *
     * For information about using offsets for scheduling monitoring jobs, see [Schedule Model Quality Monitoring Jobs](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-batchtransforminput.html#cfn-sagemaker-modelbiasjobdefinition-batchtransforminput-starttimeoffset
     */
    readonly startTimeOffset?: string;
  }

  /**
   * The dataset format of the data to monitor.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-datasetformat.html
   */
  export interface DatasetFormatProperty {
    /**
     * The CSV format.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-datasetformat.html#cfn-sagemaker-modelbiasjobdefinition-datasetformat-csv
     */
    readonly csv?: CfnModelBiasJobDefinition.CsvProperty | cdk.IResolvable;

    /**
     * The Json format.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-datasetformat.html#cfn-sagemaker-modelbiasjobdefinition-datasetformat-json
     */
    readonly json?: cdk.IResolvable | CfnModelBiasJobDefinition.JsonProperty;

    /**
     * A flag indicate if the dataset format is Parquet.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-datasetformat.html#cfn-sagemaker-modelbiasjobdefinition-datasetformat-parquet
     */
    readonly parquet?: boolean | cdk.IResolvable;
  }

  /**
   * The CSV format.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-csv.html
   */
  export interface CsvProperty {
    /**
     * A boolean flag indicating if given CSV has header.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-csv.html#cfn-sagemaker-modelbiasjobdefinition-csv-header
     */
    readonly header?: boolean | cdk.IResolvable;
  }

  /**
   * The Json format.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-json.html
   */
  export interface JsonProperty {
    /**
     * A boolean flag indicating if it is JSON line format.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-json.html#cfn-sagemaker-modelbiasjobdefinition-json-line
     */
    readonly line?: boolean | cdk.IResolvable;
  }

  /**
   * Input object for the endpoint.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-endpointinput.html
   */
  export interface EndpointInputProperty {
    /**
     * An endpoint in customer's account which has enabled `DataCaptureConfig` enabled.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-endpointinput.html#cfn-sagemaker-modelbiasjobdefinition-endpointinput-endpointname
     */
    readonly endpointName: string;

    /**
     * If specified, monitoring jobs substract this time from the end time.
     *
     * For information about using offsets for scheduling monitoring jobs, see [Schedule Model Quality Monitoring Jobs](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-endpointinput.html#cfn-sagemaker-modelbiasjobdefinition-endpointinput-endtimeoffset
     */
    readonly endTimeOffset?: string;

    /**
     * The attributes of the input data that are the input features.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-endpointinput.html#cfn-sagemaker-modelbiasjobdefinition-endpointinput-featuresattribute
     */
    readonly featuresAttribute?: string;

    /**
     * The attribute of the input data that represents the ground truth label.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-endpointinput.html#cfn-sagemaker-modelbiasjobdefinition-endpointinput-inferenceattribute
     */
    readonly inferenceAttribute?: string;

    /**
     * Path to the filesystem where the endpoint data is available to the container.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-endpointinput.html#cfn-sagemaker-modelbiasjobdefinition-endpointinput-localpath
     */
    readonly localPath: string;

    /**
     * In a classification problem, the attribute that represents the class probability.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-endpointinput.html#cfn-sagemaker-modelbiasjobdefinition-endpointinput-probabilityattribute
     */
    readonly probabilityAttribute?: string;

    /**
     * The threshold for the class probability to be evaluated as a positive result.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-endpointinput.html#cfn-sagemaker-modelbiasjobdefinition-endpointinput-probabilitythresholdattribute
     */
    readonly probabilityThresholdAttribute?: number;

    /**
     * Whether input data distributed in Amazon S3 is fully replicated or sharded by an Amazon S3 key.
     *
     * Defaults to `FullyReplicated`
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-endpointinput.html#cfn-sagemaker-modelbiasjobdefinition-endpointinput-s3datadistributiontype
     */
    readonly s3DataDistributionType?: string;

    /**
     * Whether the `Pipe` or `File` is used as the input mode for transferring data for the monitoring job.
     *
     * `Pipe` mode is recommended for large datasets. `File` mode is useful for small files that fit in memory. Defaults to `File` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-endpointinput.html#cfn-sagemaker-modelbiasjobdefinition-endpointinput-s3inputmode
     */
    readonly s3InputMode?: string;

    /**
     * If specified, monitoring jobs substract this time from the start time.
     *
     * For information about using offsets for scheduling monitoring jobs, see [Schedule Model Quality Monitoring Jobs](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-endpointinput.html#cfn-sagemaker-modelbiasjobdefinition-endpointinput-starttimeoffset
     */
    readonly startTimeOffset?: string;
  }

  /**
   * The output configuration for monitoring jobs.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-monitoringoutputconfig.html
   */
  export interface MonitoringOutputConfigProperty {
    /**
     * The AWS Key Management Service ( AWS KMS ) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-monitoringoutputconfig.html#cfn-sagemaker-modelbiasjobdefinition-monitoringoutputconfig-kmskeyid
     */
    readonly kmsKeyId?: string;

    /**
     * Monitoring outputs for monitoring jobs.
     *
     * This is where the output of the periodic monitoring jobs is uploaded.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-monitoringoutputconfig.html#cfn-sagemaker-modelbiasjobdefinition-monitoringoutputconfig-monitoringoutputs
     */
    readonly monitoringOutputs: Array<cdk.IResolvable | CfnModelBiasJobDefinition.MonitoringOutputProperty> | cdk.IResolvable;
  }

  /**
   * The output object for a monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-monitoringoutput.html
   */
  export interface MonitoringOutputProperty {
    /**
     * The Amazon S3 storage location where the results of a monitoring job are saved.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-monitoringoutput.html#cfn-sagemaker-modelbiasjobdefinition-monitoringoutput-s3output
     */
    readonly s3Output: cdk.IResolvable | CfnModelBiasJobDefinition.S3OutputProperty;
  }

  /**
   * The Amazon S3 storage location where the results of a monitoring job are saved.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-s3output.html
   */
  export interface S3OutputProperty {
    /**
     * The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
     *
     * `LocalPath` is an absolute path for the output data.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-s3output.html#cfn-sagemaker-modelbiasjobdefinition-s3output-localpath
     */
    readonly localPath: string;

    /**
     * Whether to upload the results of the monitoring job continuously or after the job completes.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-s3output.html#cfn-sagemaker-modelbiasjobdefinition-s3output-s3uploadmode
     */
    readonly s3UploadMode?: string;

    /**
     * A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-s3output.html#cfn-sagemaker-modelbiasjobdefinition-s3output-s3uri
     */
    readonly s3Uri: string;
  }

  /**
   * Specifies a limit to how long a model training job or model compilation job can run.
   *
   * It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, SageMaker ends the training or compilation job. Use this API to cap model training costs.
   *
   * To stop a training job, SageMaker sends the algorithm the `SIGTERM` signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
   *
   * The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with `CreateModel` .
   *
   * > The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-stoppingcondition.html
   */
  export interface StoppingConditionProperty {
    /**
     * The maximum length of time, in seconds, that a training or compilation job can run before it is stopped.
     *
     * For compilation jobs, if the job does not complete during this time, a `TimeOut` error is generated. We recommend starting with 900 seconds and increasing as necessary based on your model.
     *
     * For all other jobs, if the job does not complete during this time, SageMaker ends the job. When `RetryStrategy` is specified in the job request, `MaxRuntimeInSeconds` specifies the maximum time for all of the attempts in total, not each individual attempt. The default value is 1 day. The maximum value is 28 days.
     *
     * The maximum time that a `TrainingJob` can run in total, including any time spent publishing metrics or archiving and uploading models after it has been stopped, is 30 days.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-stoppingcondition.html#cfn-sagemaker-modelbiasjobdefinition-stoppingcondition-maxruntimeinseconds
     */
    readonly maxRuntimeInSeconds: number;
  }

  /**
   * Identifies the resources to deploy for a monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-monitoringresources.html
   */
  export interface MonitoringResourcesProperty {
    /**
     * The configuration for the cluster resources used to run the processing job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-monitoringresources.html#cfn-sagemaker-modelbiasjobdefinition-monitoringresources-clusterconfig
     */
    readonly clusterConfig: CfnModelBiasJobDefinition.ClusterConfigProperty | cdk.IResolvable;
  }

  /**
   * The configuration for the cluster resources used to run the processing job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-clusterconfig.html
   */
  export interface ClusterConfigProperty {
    /**
     * The number of ML compute instances to use in the model monitoring job.
     *
     * For distributed processing jobs, specify a value greater than 1. The default value is 1.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-clusterconfig.html#cfn-sagemaker-modelbiasjobdefinition-clusterconfig-instancecount
     */
    readonly instanceCount: number;

    /**
     * The ML compute instance type for the processing job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-clusterconfig.html#cfn-sagemaker-modelbiasjobdefinition-clusterconfig-instancetype
     */
    readonly instanceType: string;

    /**
     * The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-clusterconfig.html#cfn-sagemaker-modelbiasjobdefinition-clusterconfig-volumekmskeyid
     */
    readonly volumeKmsKeyId?: string;

    /**
     * The size of the ML storage volume, in gigabytes, that you want to provision.
     *
     * You must specify sufficient ML storage for your scenario.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-clusterconfig.html#cfn-sagemaker-modelbiasjobdefinition-clusterconfig-volumesizeingb
     */
    readonly volumeSizeInGb: number;
  }

  /**
   * Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-networkconfig.html
   */
  export interface NetworkConfigProperty {
    /**
     * Whether to encrypt all communications between distributed processing jobs.
     *
     * Choose `True` to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-networkconfig.html#cfn-sagemaker-modelbiasjobdefinition-networkconfig-enableintercontainertrafficencryption
     */
    readonly enableInterContainerTrafficEncryption?: boolean | cdk.IResolvable;

    /**
     * Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-networkconfig.html#cfn-sagemaker-modelbiasjobdefinition-networkconfig-enablenetworkisolation
     */
    readonly enableNetworkIsolation?: boolean | cdk.IResolvable;

    /**
     * Specifies a VPC that your training jobs and hosted models have access to.
     *
     * Control access to and from your training and model containers by configuring the VPC.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-networkconfig.html#cfn-sagemaker-modelbiasjobdefinition-networkconfig-vpcconfig
     */
    readonly vpcConfig?: cdk.IResolvable | CfnModelBiasJobDefinition.VpcConfigProperty;
  }

  /**
   * Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to.
   *
   * You can control access to and from your resources by configuring a VPC. For more information, see [Give SageMaker Access to Resources in your Amazon VPC](https://docs.aws.amazon.com/https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html) .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-vpcconfig.html
   */
  export interface VpcConfigProperty {
    /**
     * The VPC security group IDs, in the form `sg-xxxxxxxx` .
     *
     * Specify the security groups for the VPC that is specified in the `Subnets` field.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-vpcconfig.html#cfn-sagemaker-modelbiasjobdefinition-vpcconfig-securitygroupids
     */
    readonly securityGroupIds: Array<string>;

    /**
     * The ID of the subnets in the VPC to which you want to connect your training job or model.
     *
     * For information about the availability of specific instance types, see [Supported Instance Types and Availability Zones](https://docs.aws.amazon.com/sagemaker/latest/dg/instance-types-az.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-vpcconfig.html#cfn-sagemaker-modelbiasjobdefinition-vpcconfig-subnets
     */
    readonly subnets: Array<string>;
  }

  /**
   * The configuration for a baseline model bias job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-modelbiasbaselineconfig.html
   */
  export interface ModelBiasBaselineConfigProperty {
    /**
     * The name of the baseline model bias job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-modelbiasbaselineconfig.html#cfn-sagemaker-modelbiasjobdefinition-modelbiasbaselineconfig-baseliningjobname
     */
    readonly baseliningJobName?: string;

    /**
     * The constraints resource for a monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-modelbiasbaselineconfig.html#cfn-sagemaker-modelbiasjobdefinition-modelbiasbaselineconfig-constraintsresource
     */
    readonly constraintsResource?: CfnModelBiasJobDefinition.ConstraintsResourceProperty | cdk.IResolvable;
  }

  /**
   * The constraints resource for a monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-constraintsresource.html
   */
  export interface ConstraintsResourceProperty {
    /**
     * The Amazon S3 URI for the constraints resource.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-constraintsresource.html#cfn-sagemaker-modelbiasjobdefinition-constraintsresource-s3uri
     */
    readonly s3Uri?: string;
  }

  /**
   * Docker container image configuration object for the model bias job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-modelbiasappspecification.html
   */
  export interface ModelBiasAppSpecificationProperty {
    /**
     * JSON formatted S3 file that defines bias parameters.
     *
     * For more information on this JSON configuration file, see [Configure bias parameters](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-config-json-monitor-bias-parameters.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-modelbiasappspecification.html#cfn-sagemaker-modelbiasjobdefinition-modelbiasappspecification-configuri
     */
    readonly configUri: string;

    /**
     * Sets the environment variables in the Docker container.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-modelbiasappspecification.html#cfn-sagemaker-modelbiasjobdefinition-modelbiasappspecification-environment
     */
    readonly environment?: cdk.IResolvable | Record<string, string>;

    /**
     * The container image to be run by the model bias job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-modelbiasappspecification.html#cfn-sagemaker-modelbiasjobdefinition-modelbiasappspecification-imageuri
     */
    readonly imageUri: string;
  }
}

/**
 * Properties for defining a `CfnModelBiasJobDefinition`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelbiasjobdefinition.html
 */
export interface CfnModelBiasJobDefinitionProps {
  /**
   * The name of the endpoint used to run the monitoring job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelbiasjobdefinition.html#cfn-sagemaker-modelbiasjobdefinition-endpointname
   */
  readonly endpointName?: string;

  /**
   * The name of the bias job definition.
   *
   * The name must be unique within an AWS Region in the AWS account.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelbiasjobdefinition.html#cfn-sagemaker-modelbiasjobdefinition-jobdefinitionname
   */
  readonly jobDefinitionName?: string;

  /**
   * Identifies the resources to deploy for a monitoring job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelbiasjobdefinition.html#cfn-sagemaker-modelbiasjobdefinition-jobresources
   */
  readonly jobResources: cdk.IResolvable | CfnModelBiasJobDefinition.MonitoringResourcesProperty;

  /**
   * Configures the model bias job to run a specified Docker container image.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelbiasjobdefinition.html#cfn-sagemaker-modelbiasjobdefinition-modelbiasappspecification
   */
  readonly modelBiasAppSpecification: cdk.IResolvable | CfnModelBiasJobDefinition.ModelBiasAppSpecificationProperty;

  /**
   * The baseline configuration for a model bias job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelbiasjobdefinition.html#cfn-sagemaker-modelbiasjobdefinition-modelbiasbaselineconfig
   */
  readonly modelBiasBaselineConfig?: cdk.IResolvable | CfnModelBiasJobDefinition.ModelBiasBaselineConfigProperty;

  /**
   * Inputs for the model bias job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelbiasjobdefinition.html#cfn-sagemaker-modelbiasjobdefinition-modelbiasjobinput
   */
  readonly modelBiasJobInput: cdk.IResolvable | CfnModelBiasJobDefinition.ModelBiasJobInputProperty;

  /**
   * The output configuration for monitoring jobs.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelbiasjobdefinition.html#cfn-sagemaker-modelbiasjobdefinition-modelbiasjoboutputconfig
   */
  readonly modelBiasJobOutputConfig: cdk.IResolvable | CfnModelBiasJobDefinition.MonitoringOutputConfigProperty;

  /**
   * Networking options for a model bias job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelbiasjobdefinition.html#cfn-sagemaker-modelbiasjobdefinition-networkconfig
   */
  readonly networkConfig?: cdk.IResolvable | CfnModelBiasJobDefinition.NetworkConfigProperty;

  /**
   * The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelbiasjobdefinition.html#cfn-sagemaker-modelbiasjobdefinition-rolearn
   */
  readonly roleArn: string;

  /**
   * A time limit for how long the monitoring job is allowed to run before stopping.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelbiasjobdefinition.html#cfn-sagemaker-modelbiasjobdefinition-stoppingcondition
   */
  readonly stoppingCondition?: cdk.IResolvable | CfnModelBiasJobDefinition.StoppingConditionProperty;

  /**
   * An array of key-value pairs to apply to this resource.
   *
   * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelbiasjobdefinition.html#cfn-sagemaker-modelbiasjobdefinition-tags
   */
  readonly tags?: Array<cdk.CfnTag>;
}

/**
 * Determine whether the given properties match those of a `MonitoringGroundTruthS3InputProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringGroundTruthS3InputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelBiasJobDefinitionMonitoringGroundTruthS3InputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("s3Uri", cdk.requiredValidator)(properties.s3Uri));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.validateString)(properties.s3Uri));
  return errors.wrap("supplied properties not correct for \"MonitoringGroundTruthS3InputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelBiasJobDefinitionMonitoringGroundTruthS3InputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelBiasJobDefinitionMonitoringGroundTruthS3InputPropertyValidator(properties).assertSuccess();
  return {
    "S3Uri": cdk.stringToCloudFormation(properties.s3Uri)
  };
}

// @ts-ignore TS6133
function CfnModelBiasJobDefinitionMonitoringGroundTruthS3InputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelBiasJobDefinition.MonitoringGroundTruthS3InputProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.MonitoringGroundTruthS3InputProperty>();
  ret.addPropertyResult("s3Uri", "S3Uri", (properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CsvProperty`
 *
 * @param properties - the TypeScript properties of a `CsvProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelBiasJobDefinitionCsvPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("header", cdk.validateBoolean)(properties.header));
  return errors.wrap("supplied properties not correct for \"CsvProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelBiasJobDefinitionCsvPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelBiasJobDefinitionCsvPropertyValidator(properties).assertSuccess();
  return {
    "Header": cdk.booleanToCloudFormation(properties.header)
  };
}

// @ts-ignore TS6133
function CfnModelBiasJobDefinitionCsvPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.CsvProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.CsvProperty>();
  ret.addPropertyResult("header", "Header", (properties.Header != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Header) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `JsonProperty`
 *
 * @param properties - the TypeScript properties of a `JsonProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelBiasJobDefinitionJsonPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("line", cdk.validateBoolean)(properties.line));
  return errors.wrap("supplied properties not correct for \"JsonProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelBiasJobDefinitionJsonPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelBiasJobDefinitionJsonPropertyValidator(properties).assertSuccess();
  return {
    "Line": cdk.booleanToCloudFormation(properties.line)
  };
}

// @ts-ignore TS6133
function CfnModelBiasJobDefinitionJsonPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelBiasJobDefinition.JsonProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.JsonProperty>();
  ret.addPropertyResult("line", "Line", (properties.Line != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Line) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DatasetFormatProperty`
 *
 * @param properties - the TypeScript properties of a `DatasetFormatProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelBiasJobDefinitionDatasetFormatPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("csv", CfnModelBiasJobDefinitionCsvPropertyValidator)(properties.csv));
  errors.collect(cdk.propertyValidator("json", CfnModelBiasJobDefinitionJsonPropertyValidator)(properties.json));
  errors.collect(cdk.propertyValidator("parquet", cdk.validateBoolean)(properties.parquet));
  return errors.wrap("supplied properties not correct for \"DatasetFormatProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelBiasJobDefinitionDatasetFormatPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelBiasJobDefinitionDatasetFormatPropertyValidator(properties).assertSuccess();
  return {
    "Csv": convertCfnModelBiasJobDefinitionCsvPropertyToCloudFormation(properties.csv),
    "Json": convertCfnModelBiasJobDefinitionJsonPropertyToCloudFormation(properties.json),
    "Parquet": cdk.booleanToCloudFormation(properties.parquet)
  };
}

// @ts-ignore TS6133
function CfnModelBiasJobDefinitionDatasetFormatPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.DatasetFormatProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.DatasetFormatProperty>();
  ret.addPropertyResult("csv", "Csv", (properties.Csv != null ? CfnModelBiasJobDefinitionCsvPropertyFromCloudFormation(properties.Csv) : undefined));
  ret.addPropertyResult("json", "Json", (properties.Json != null ? CfnModelBiasJobDefinitionJsonPropertyFromCloudFormation(properties.Json) : undefined));
  ret.addPropertyResult("parquet", "Parquet", (properties.Parquet != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Parquet) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `BatchTransformInputProperty`
 *
 * @param properties - the TypeScript properties of a `BatchTransformInputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelBiasJobDefinitionBatchTransformInputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("dataCapturedDestinationS3Uri", cdk.requiredValidator)(properties.dataCapturedDestinationS3Uri));
  errors.collect(cdk.propertyValidator("dataCapturedDestinationS3Uri", cdk.validateString)(properties.dataCapturedDestinationS3Uri));
  errors.collect(cdk.propertyValidator("datasetFormat", cdk.requiredValidator)(properties.datasetFormat));
  errors.collect(cdk.propertyValidator("datasetFormat", CfnModelBiasJobDefinitionDatasetFormatPropertyValidator)(properties.datasetFormat));
  errors.collect(cdk.propertyValidator("endTimeOffset", cdk.validateString)(properties.endTimeOffset));
  errors.collect(cdk.propertyValidator("featuresAttribute", cdk.validateString)(properties.featuresAttribute));
  errors.collect(cdk.propertyValidator("inferenceAttribute", cdk.validateString)(properties.inferenceAttribute));
  errors.collect(cdk.propertyValidator("localPath", cdk.requiredValidator)(properties.localPath));
  errors.collect(cdk.propertyValidator("localPath", cdk.validateString)(properties.localPath));
  errors.collect(cdk.propertyValidator("probabilityAttribute", cdk.validateString)(properties.probabilityAttribute));
  errors.collect(cdk.propertyValidator("probabilityThresholdAttribute", cdk.validateNumber)(properties.probabilityThresholdAttribute));
  errors.collect(cdk.propertyValidator("s3DataDistributionType", cdk.validateString)(properties.s3DataDistributionType));
  errors.collect(cdk.propertyValidator("s3InputMode", cdk.validateString)(properties.s3InputMode));
  errors.collect(cdk.propertyValidator("startTimeOffset", cdk.validateString)(properties.startTimeOffset));
  return errors.wrap("supplied properties not correct for \"BatchTransformInputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelBiasJobDefinitionBatchTransformInputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelBiasJobDefinitionBatchTransformInputPropertyValidator(properties).assertSuccess();
  return {
    "DataCapturedDestinationS3Uri": cdk.stringToCloudFormation(properties.dataCapturedDestinationS3Uri),
    "DatasetFormat": convertCfnModelBiasJobDefinitionDatasetFormatPropertyToCloudFormation(properties.datasetFormat),
    "EndTimeOffset": cdk.stringToCloudFormation(properties.endTimeOffset),
    "FeaturesAttribute": cdk.stringToCloudFormation(properties.featuresAttribute),
    "InferenceAttribute": cdk.stringToCloudFormation(properties.inferenceAttribute),
    "LocalPath": cdk.stringToCloudFormation(properties.localPath),
    "ProbabilityAttribute": cdk.stringToCloudFormation(properties.probabilityAttribute),
    "ProbabilityThresholdAttribute": cdk.numberToCloudFormation(properties.probabilityThresholdAttribute),
    "S3DataDistributionType": cdk.stringToCloudFormation(properties.s3DataDistributionType),
    "S3InputMode": cdk.stringToCloudFormation(properties.s3InputMode),
    "StartTimeOffset": cdk.stringToCloudFormation(properties.startTimeOffset)
  };
}

// @ts-ignore TS6133
function CfnModelBiasJobDefinitionBatchTransformInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.BatchTransformInputProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.BatchTransformInputProperty>();
  ret.addPropertyResult("dataCapturedDestinationS3Uri", "DataCapturedDestinationS3Uri", (properties.DataCapturedDestinationS3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.DataCapturedDestinationS3Uri) : undefined));
  ret.addPropertyResult("datasetFormat", "DatasetFormat", (properties.DatasetFormat != null ? CfnModelBiasJobDefinitionDatasetFormatPropertyFromCloudFormation(properties.DatasetFormat) : undefined));
  ret.addPropertyResult("endTimeOffset", "EndTimeOffset", (properties.EndTimeOffset != null ? cfn_parse.FromCloudFormation.getString(properties.EndTimeOffset) : undefined));
  ret.addPropertyResult("featuresAttribute", "FeaturesAttribute", (properties.FeaturesAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.FeaturesAttribute) : undefined));
  ret.addPropertyResult("inferenceAttribute", "InferenceAttribute", (properties.InferenceAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.InferenceAttribute) : undefined));
  ret.addPropertyResult("localPath", "LocalPath", (properties.LocalPath != null ? cfn_parse.FromCloudFormation.getString(properties.LocalPath) : undefined));
  ret.addPropertyResult("probabilityAttribute", "ProbabilityAttribute", (properties.ProbabilityAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.ProbabilityAttribute) : undefined));
  ret.addPropertyResult("probabilityThresholdAttribute", "ProbabilityThresholdAttribute", (properties.ProbabilityThresholdAttribute != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProbabilityThresholdAttribute) : undefined));
  ret.addPropertyResult("s3DataDistributionType", "S3DataDistributionType", (properties.S3DataDistributionType != null ? cfn_parse.FromCloudFormation.getString(properties.S3DataDistributionType) : undefined));
  ret.addPropertyResult("s3InputMode", "S3InputMode", (properties.S3InputMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3InputMode) : undefined));
  ret.addPropertyResult("startTimeOffset", "StartTimeOffset", (properties.StartTimeOffset != null ? cfn_parse.FromCloudFormation.getString(properties.StartTimeOffset) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `EndpointInputProperty`
 *
 * @param properties - the TypeScript properties of a `EndpointInputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelBiasJobDefinitionEndpointInputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("endTimeOffset", cdk.validateString)(properties.endTimeOffset));
  errors.collect(cdk.propertyValidator("endpointName", cdk.requiredValidator)(properties.endpointName));
  errors.collect(cdk.propertyValidator("endpointName", cdk.validateString)(properties.endpointName));
  errors.collect(cdk.propertyValidator("featuresAttribute", cdk.validateString)(properties.featuresAttribute));
  errors.collect(cdk.propertyValidator("inferenceAttribute", cdk.validateString)(properties.inferenceAttribute));
  errors.collect(cdk.propertyValidator("localPath", cdk.requiredValidator)(properties.localPath));
  errors.collect(cdk.propertyValidator("localPath", cdk.validateString)(properties.localPath));
  errors.collect(cdk.propertyValidator("probabilityAttribute", cdk.validateString)(properties.probabilityAttribute));
  errors.collect(cdk.propertyValidator("probabilityThresholdAttribute", cdk.validateNumber)(properties.probabilityThresholdAttribute));
  errors.collect(cdk.propertyValidator("s3DataDistributionType", cdk.validateString)(properties.s3DataDistributionType));
  errors.collect(cdk.propertyValidator("s3InputMode", cdk.validateString)(properties.s3InputMode));
  errors.collect(cdk.propertyValidator("startTimeOffset", cdk.validateString)(properties.startTimeOffset));
  return errors.wrap("supplied properties not correct for \"EndpointInputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelBiasJobDefinitionEndpointInputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelBiasJobDefinitionEndpointInputPropertyValidator(properties).assertSuccess();
  return {
    "EndTimeOffset": cdk.stringToCloudFormation(properties.endTimeOffset),
    "EndpointName": cdk.stringToCloudFormation(properties.endpointName),
    "FeaturesAttribute": cdk.stringToCloudFormation(properties.featuresAttribute),
    "InferenceAttribute": cdk.stringToCloudFormation(properties.inferenceAttribute),
    "LocalPath": cdk.stringToCloudFormation(properties.localPath),
    "ProbabilityAttribute": cdk.stringToCloudFormation(properties.probabilityAttribute),
    "ProbabilityThresholdAttribute": cdk.numberToCloudFormation(properties.probabilityThresholdAttribute),
    "S3DataDistributionType": cdk.stringToCloudFormation(properties.s3DataDistributionType),
    "S3InputMode": cdk.stringToCloudFormation(properties.s3InputMode),
    "StartTimeOffset": cdk.stringToCloudFormation(properties.startTimeOffset)
  };
}

// @ts-ignore TS6133
function CfnModelBiasJobDefinitionEndpointInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.EndpointInputProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.EndpointInputProperty>();
  ret.addPropertyResult("endpointName", "EndpointName", (properties.EndpointName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointName) : undefined));
  ret.addPropertyResult("endTimeOffset", "EndTimeOffset", (properties.EndTimeOffset != null ? cfn_parse.FromCloudFormation.getString(properties.EndTimeOffset) : undefined));
  ret.addPropertyResult("featuresAttribute", "FeaturesAttribute", (properties.FeaturesAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.FeaturesAttribute) : undefined));
  ret.addPropertyResult("inferenceAttribute", "InferenceAttribute", (properties.InferenceAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.InferenceAttribute) : undefined));
  ret.addPropertyResult("localPath", "LocalPath", (properties.LocalPath != null ? cfn_parse.FromCloudFormation.getString(properties.LocalPath) : undefined));
  ret.addPropertyResult("probabilityAttribute", "ProbabilityAttribute", (properties.ProbabilityAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.ProbabilityAttribute) : undefined));
  ret.addPropertyResult("probabilityThresholdAttribute", "ProbabilityThresholdAttribute", (properties.ProbabilityThresholdAttribute != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProbabilityThresholdAttribute) : undefined));
  ret.addPropertyResult("s3DataDistributionType", "S3DataDistributionType", (properties.S3DataDistributionType != null ? cfn_parse.FromCloudFormation.getString(properties.S3DataDistributionType) : undefined));
  ret.addPropertyResult("s3InputMode", "S3InputMode", (properties.S3InputMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3InputMode) : undefined));
  ret.addPropertyResult("startTimeOffset", "StartTimeOffset", (properties.StartTimeOffset != null ? cfn_parse.FromCloudFormation.getString(properties.StartTimeOffset) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelBiasJobInputProperty`
 *
 * @param properties - the TypeScript properties of a `ModelBiasJobInputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelBiasJobDefinitionModelBiasJobInputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("batchTransformInput", CfnModelBiasJobDefinitionBatchTransformInputPropertyValidator)(properties.batchTransformInput));
  errors.collect(cdk.propertyValidator("endpointInput", CfnModelBiasJobDefinitionEndpointInputPropertyValidator)(properties.endpointInput));
  errors.collect(cdk.propertyValidator("groundTruthS3Input", cdk.requiredValidator)(properties.groundTruthS3Input));
  errors.collect(cdk.propertyValidator("groundTruthS3Input", CfnModelBiasJobDefinitionMonitoringGroundTruthS3InputPropertyValidator)(properties.groundTruthS3Input));
  return errors.wrap("supplied properties not correct for \"ModelBiasJobInputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelBiasJobDefinitionModelBiasJobInputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelBiasJobDefinitionModelBiasJobInputPropertyValidator(properties).assertSuccess();
  return {
    "BatchTransformInput": convertCfnModelBiasJobDefinitionBatchTransformInputPropertyToCloudFormation(properties.batchTransformInput),
    "EndpointInput": convertCfnModelBiasJobDefinitionEndpointInputPropertyToCloudFormation(properties.endpointInput),
    "GroundTruthS3Input": convertCfnModelBiasJobDefinitionMonitoringGroundTruthS3InputPropertyToCloudFormation(properties.groundTruthS3Input)
  };
}

// @ts-ignore TS6133
function CfnModelBiasJobDefinitionModelBiasJobInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelBiasJobDefinition.ModelBiasJobInputProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.ModelBiasJobInputProperty>();
  ret.addPropertyResult("batchTransformInput", "BatchTransformInput", (properties.BatchTransformInput != null ? CfnModelBiasJobDefinitionBatchTransformInputPropertyFromCloudFormation(properties.BatchTransformInput) : undefined));
  ret.addPropertyResult("endpointInput", "EndpointInput", (properties.EndpointInput != null ? CfnModelBiasJobDefinitionEndpointInputPropertyFromCloudFormation(properties.EndpointInput) : undefined));
  ret.addPropertyResult("groundTruthS3Input", "GroundTruthS3Input", (properties.GroundTruthS3Input != null ? CfnModelBiasJobDefinitionMonitoringGroundTruthS3InputPropertyFromCloudFormation(properties.GroundTruthS3Input) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `S3OutputProperty`
 *
 * @param properties - the TypeScript properties of a `S3OutputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelBiasJobDefinitionS3OutputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("localPath", cdk.requiredValidator)(properties.localPath));
  errors.collect(cdk.propertyValidator("localPath", cdk.validateString)(properties.localPath));
  errors.collect(cdk.propertyValidator("s3UploadMode", cdk.validateString)(properties.s3UploadMode));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.requiredValidator)(properties.s3Uri));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.validateString)(properties.s3Uri));
  return errors.wrap("supplied properties not correct for \"S3OutputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelBiasJobDefinitionS3OutputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelBiasJobDefinitionS3OutputPropertyValidator(properties).assertSuccess();
  return {
    "LocalPath": cdk.stringToCloudFormation(properties.localPath),
    "S3UploadMode": cdk.stringToCloudFormation(properties.s3UploadMode),
    "S3Uri": cdk.stringToCloudFormation(properties.s3Uri)
  };
}

// @ts-ignore TS6133
function CfnModelBiasJobDefinitionS3OutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelBiasJobDefinition.S3OutputProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.S3OutputProperty>();
  ret.addPropertyResult("localPath", "LocalPath", (properties.LocalPath != null ? cfn_parse.FromCloudFormation.getString(properties.LocalPath) : undefined));
  ret.addPropertyResult("s3UploadMode", "S3UploadMode", (properties.S3UploadMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3UploadMode) : undefined));
  ret.addPropertyResult("s3Uri", "S3Uri", (properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringOutputProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringOutputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelBiasJobDefinitionMonitoringOutputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("s3Output", cdk.requiredValidator)(properties.s3Output));
  errors.collect(cdk.propertyValidator("s3Output", CfnModelBiasJobDefinitionS3OutputPropertyValidator)(properties.s3Output));
  return errors.wrap("supplied properties not correct for \"MonitoringOutputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelBiasJobDefinitionMonitoringOutputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelBiasJobDefinitionMonitoringOutputPropertyValidator(properties).assertSuccess();
  return {
    "S3Output": convertCfnModelBiasJobDefinitionS3OutputPropertyToCloudFormation(properties.s3Output)
  };
}

// @ts-ignore TS6133
function CfnModelBiasJobDefinitionMonitoringOutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelBiasJobDefinition.MonitoringOutputProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.MonitoringOutputProperty>();
  ret.addPropertyResult("s3Output", "S3Output", (properties.S3Output != null ? CfnModelBiasJobDefinitionS3OutputPropertyFromCloudFormation(properties.S3Output) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringOutputConfigProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringOutputConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelBiasJobDefinitionMonitoringOutputConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("kmsKeyId", cdk.validateString)(properties.kmsKeyId));
  errors.collect(cdk.propertyValidator("monitoringOutputs", cdk.requiredValidator)(properties.monitoringOutputs));
  errors.collect(cdk.propertyValidator("monitoringOutputs", cdk.listValidator(CfnModelBiasJobDefinitionMonitoringOutputPropertyValidator))(properties.monitoringOutputs));
  return errors.wrap("supplied properties not correct for \"MonitoringOutputConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelBiasJobDefinitionMonitoringOutputConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelBiasJobDefinitionMonitoringOutputConfigPropertyValidator(properties).assertSuccess();
  return {
    "KmsKeyId": cdk.stringToCloudFormation(properties.kmsKeyId),
    "MonitoringOutputs": cdk.listMapper(convertCfnModelBiasJobDefinitionMonitoringOutputPropertyToCloudFormation)(properties.monitoringOutputs)
  };
}

// @ts-ignore TS6133
function CfnModelBiasJobDefinitionMonitoringOutputConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelBiasJobDefinition.MonitoringOutputConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.MonitoringOutputConfigProperty>();
  ret.addPropertyResult("kmsKeyId", "KmsKeyId", (properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined));
  ret.addPropertyResult("monitoringOutputs", "MonitoringOutputs", (properties.MonitoringOutputs != null ? cfn_parse.FromCloudFormation.getArray(CfnModelBiasJobDefinitionMonitoringOutputPropertyFromCloudFormation)(properties.MonitoringOutputs) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `StoppingConditionProperty`
 *
 * @param properties - the TypeScript properties of a `StoppingConditionProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelBiasJobDefinitionStoppingConditionPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("maxRuntimeInSeconds", cdk.requiredValidator)(properties.maxRuntimeInSeconds));
  errors.collect(cdk.propertyValidator("maxRuntimeInSeconds", cdk.validateNumber)(properties.maxRuntimeInSeconds));
  return errors.wrap("supplied properties not correct for \"StoppingConditionProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelBiasJobDefinitionStoppingConditionPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelBiasJobDefinitionStoppingConditionPropertyValidator(properties).assertSuccess();
  return {
    "MaxRuntimeInSeconds": cdk.numberToCloudFormation(properties.maxRuntimeInSeconds)
  };
}

// @ts-ignore TS6133
function CfnModelBiasJobDefinitionStoppingConditionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelBiasJobDefinition.StoppingConditionProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.StoppingConditionProperty>();
  ret.addPropertyResult("maxRuntimeInSeconds", "MaxRuntimeInSeconds", (properties.MaxRuntimeInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxRuntimeInSeconds) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ClusterConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ClusterConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelBiasJobDefinitionClusterConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("instanceCount", cdk.requiredValidator)(properties.instanceCount));
  errors.collect(cdk.propertyValidator("instanceCount", cdk.validateNumber)(properties.instanceCount));
  errors.collect(cdk.propertyValidator("instanceType", cdk.requiredValidator)(properties.instanceType));
  errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
  errors.collect(cdk.propertyValidator("volumeKmsKeyId", cdk.validateString)(properties.volumeKmsKeyId));
  errors.collect(cdk.propertyValidator("volumeSizeInGb", cdk.requiredValidator)(properties.volumeSizeInGb));
  errors.collect(cdk.propertyValidator("volumeSizeInGb", cdk.validateNumber)(properties.volumeSizeInGb));
  return errors.wrap("supplied properties not correct for \"ClusterConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelBiasJobDefinitionClusterConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelBiasJobDefinitionClusterConfigPropertyValidator(properties).assertSuccess();
  return {
    "InstanceCount": cdk.numberToCloudFormation(properties.instanceCount),
    "InstanceType": cdk.stringToCloudFormation(properties.instanceType),
    "VolumeKmsKeyId": cdk.stringToCloudFormation(properties.volumeKmsKeyId),
    "VolumeSizeInGB": cdk.numberToCloudFormation(properties.volumeSizeInGb)
  };
}

// @ts-ignore TS6133
function CfnModelBiasJobDefinitionClusterConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.ClusterConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.ClusterConfigProperty>();
  ret.addPropertyResult("instanceCount", "InstanceCount", (properties.InstanceCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.InstanceCount) : undefined));
  ret.addPropertyResult("instanceType", "InstanceType", (properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined));
  ret.addPropertyResult("volumeKmsKeyId", "VolumeKmsKeyId", (properties.VolumeKmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeKmsKeyId) : undefined));
  ret.addPropertyResult("volumeSizeInGb", "VolumeSizeInGB", (properties.VolumeSizeInGB != null ? cfn_parse.FromCloudFormation.getNumber(properties.VolumeSizeInGB) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringResourcesProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringResourcesProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelBiasJobDefinitionMonitoringResourcesPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("clusterConfig", cdk.requiredValidator)(properties.clusterConfig));
  errors.collect(cdk.propertyValidator("clusterConfig", CfnModelBiasJobDefinitionClusterConfigPropertyValidator)(properties.clusterConfig));
  return errors.wrap("supplied properties not correct for \"MonitoringResourcesProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelBiasJobDefinitionMonitoringResourcesPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelBiasJobDefinitionMonitoringResourcesPropertyValidator(properties).assertSuccess();
  return {
    "ClusterConfig": convertCfnModelBiasJobDefinitionClusterConfigPropertyToCloudFormation(properties.clusterConfig)
  };
}

// @ts-ignore TS6133
function CfnModelBiasJobDefinitionMonitoringResourcesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelBiasJobDefinition.MonitoringResourcesProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.MonitoringResourcesProperty>();
  ret.addPropertyResult("clusterConfig", "ClusterConfig", (properties.ClusterConfig != null ? CfnModelBiasJobDefinitionClusterConfigPropertyFromCloudFormation(properties.ClusterConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `VpcConfigProperty`
 *
 * @param properties - the TypeScript properties of a `VpcConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelBiasJobDefinitionVpcConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("securityGroupIds", cdk.requiredValidator)(properties.securityGroupIds));
  errors.collect(cdk.propertyValidator("securityGroupIds", cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
  errors.collect(cdk.propertyValidator("subnets", cdk.requiredValidator)(properties.subnets));
  errors.collect(cdk.propertyValidator("subnets", cdk.listValidator(cdk.validateString))(properties.subnets));
  return errors.wrap("supplied properties not correct for \"VpcConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelBiasJobDefinitionVpcConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelBiasJobDefinitionVpcConfigPropertyValidator(properties).assertSuccess();
  return {
    "SecurityGroupIds": cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
    "Subnets": cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets)
  };
}

// @ts-ignore TS6133
function CfnModelBiasJobDefinitionVpcConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelBiasJobDefinition.VpcConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.VpcConfigProperty>();
  ret.addPropertyResult("securityGroupIds", "SecurityGroupIds", (properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SecurityGroupIds) : undefined));
  ret.addPropertyResult("subnets", "Subnets", (properties.Subnets != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.Subnets) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `NetworkConfigProperty`
 *
 * @param properties - the TypeScript properties of a `NetworkConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelBiasJobDefinitionNetworkConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("enableInterContainerTrafficEncryption", cdk.validateBoolean)(properties.enableInterContainerTrafficEncryption));
  errors.collect(cdk.propertyValidator("enableNetworkIsolation", cdk.validateBoolean)(properties.enableNetworkIsolation));
  errors.collect(cdk.propertyValidator("vpcConfig", CfnModelBiasJobDefinitionVpcConfigPropertyValidator)(properties.vpcConfig));
  return errors.wrap("supplied properties not correct for \"NetworkConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelBiasJobDefinitionNetworkConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelBiasJobDefinitionNetworkConfigPropertyValidator(properties).assertSuccess();
  return {
    "EnableInterContainerTrafficEncryption": cdk.booleanToCloudFormation(properties.enableInterContainerTrafficEncryption),
    "EnableNetworkIsolation": cdk.booleanToCloudFormation(properties.enableNetworkIsolation),
    "VpcConfig": convertCfnModelBiasJobDefinitionVpcConfigPropertyToCloudFormation(properties.vpcConfig)
  };
}

// @ts-ignore TS6133
function CfnModelBiasJobDefinitionNetworkConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelBiasJobDefinition.NetworkConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.NetworkConfigProperty>();
  ret.addPropertyResult("enableInterContainerTrafficEncryption", "EnableInterContainerTrafficEncryption", (properties.EnableInterContainerTrafficEncryption != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableInterContainerTrafficEncryption) : undefined));
  ret.addPropertyResult("enableNetworkIsolation", "EnableNetworkIsolation", (properties.EnableNetworkIsolation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableNetworkIsolation) : undefined));
  ret.addPropertyResult("vpcConfig", "VpcConfig", (properties.VpcConfig != null ? CfnModelBiasJobDefinitionVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ConstraintsResourceProperty`
 *
 * @param properties - the TypeScript properties of a `ConstraintsResourceProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelBiasJobDefinitionConstraintsResourcePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("s3Uri", cdk.validateString)(properties.s3Uri));
  return errors.wrap("supplied properties not correct for \"ConstraintsResourceProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelBiasJobDefinitionConstraintsResourcePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelBiasJobDefinitionConstraintsResourcePropertyValidator(properties).assertSuccess();
  return {
    "S3Uri": cdk.stringToCloudFormation(properties.s3Uri)
  };
}

// @ts-ignore TS6133
function CfnModelBiasJobDefinitionConstraintsResourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinition.ConstraintsResourceProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.ConstraintsResourceProperty>();
  ret.addPropertyResult("s3Uri", "S3Uri", (properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelBiasBaselineConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ModelBiasBaselineConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelBiasJobDefinitionModelBiasBaselineConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("baseliningJobName", cdk.validateString)(properties.baseliningJobName));
  errors.collect(cdk.propertyValidator("constraintsResource", CfnModelBiasJobDefinitionConstraintsResourcePropertyValidator)(properties.constraintsResource));
  return errors.wrap("supplied properties not correct for \"ModelBiasBaselineConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelBiasJobDefinitionModelBiasBaselineConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelBiasJobDefinitionModelBiasBaselineConfigPropertyValidator(properties).assertSuccess();
  return {
    "BaseliningJobName": cdk.stringToCloudFormation(properties.baseliningJobName),
    "ConstraintsResource": convertCfnModelBiasJobDefinitionConstraintsResourcePropertyToCloudFormation(properties.constraintsResource)
  };
}

// @ts-ignore TS6133
function CfnModelBiasJobDefinitionModelBiasBaselineConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelBiasJobDefinition.ModelBiasBaselineConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.ModelBiasBaselineConfigProperty>();
  ret.addPropertyResult("baseliningJobName", "BaseliningJobName", (properties.BaseliningJobName != null ? cfn_parse.FromCloudFormation.getString(properties.BaseliningJobName) : undefined));
  ret.addPropertyResult("constraintsResource", "ConstraintsResource", (properties.ConstraintsResource != null ? CfnModelBiasJobDefinitionConstraintsResourcePropertyFromCloudFormation(properties.ConstraintsResource) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelBiasAppSpecificationProperty`
 *
 * @param properties - the TypeScript properties of a `ModelBiasAppSpecificationProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelBiasJobDefinitionModelBiasAppSpecificationPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("configUri", cdk.requiredValidator)(properties.configUri));
  errors.collect(cdk.propertyValidator("configUri", cdk.validateString)(properties.configUri));
  errors.collect(cdk.propertyValidator("environment", cdk.hashValidator(cdk.validateString))(properties.environment));
  errors.collect(cdk.propertyValidator("imageUri", cdk.requiredValidator)(properties.imageUri));
  errors.collect(cdk.propertyValidator("imageUri", cdk.validateString)(properties.imageUri));
  return errors.wrap("supplied properties not correct for \"ModelBiasAppSpecificationProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelBiasJobDefinitionModelBiasAppSpecificationPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelBiasJobDefinitionModelBiasAppSpecificationPropertyValidator(properties).assertSuccess();
  return {
    "ConfigUri": cdk.stringToCloudFormation(properties.configUri),
    "Environment": cdk.hashMapper(cdk.stringToCloudFormation)(properties.environment),
    "ImageUri": cdk.stringToCloudFormation(properties.imageUri)
  };
}

// @ts-ignore TS6133
function CfnModelBiasJobDefinitionModelBiasAppSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelBiasJobDefinition.ModelBiasAppSpecificationProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinition.ModelBiasAppSpecificationProperty>();
  ret.addPropertyResult("configUri", "ConfigUri", (properties.ConfigUri != null ? cfn_parse.FromCloudFormation.getString(properties.ConfigUri) : undefined));
  ret.addPropertyResult("environment", "Environment", (properties.Environment != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Environment) : undefined));
  ret.addPropertyResult("imageUri", "ImageUri", (properties.ImageUri != null ? cfn_parse.FromCloudFormation.getString(properties.ImageUri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnModelBiasJobDefinitionProps`
 *
 * @param properties - the TypeScript properties of a `CfnModelBiasJobDefinitionProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelBiasJobDefinitionPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("endpointName", cdk.validateString)(properties.endpointName));
  errors.collect(cdk.propertyValidator("jobDefinitionName", cdk.validateString)(properties.jobDefinitionName));
  errors.collect(cdk.propertyValidator("jobResources", cdk.requiredValidator)(properties.jobResources));
  errors.collect(cdk.propertyValidator("jobResources", CfnModelBiasJobDefinitionMonitoringResourcesPropertyValidator)(properties.jobResources));
  errors.collect(cdk.propertyValidator("modelBiasAppSpecification", cdk.requiredValidator)(properties.modelBiasAppSpecification));
  errors.collect(cdk.propertyValidator("modelBiasAppSpecification", CfnModelBiasJobDefinitionModelBiasAppSpecificationPropertyValidator)(properties.modelBiasAppSpecification));
  errors.collect(cdk.propertyValidator("modelBiasBaselineConfig", CfnModelBiasJobDefinitionModelBiasBaselineConfigPropertyValidator)(properties.modelBiasBaselineConfig));
  errors.collect(cdk.propertyValidator("modelBiasJobInput", cdk.requiredValidator)(properties.modelBiasJobInput));
  errors.collect(cdk.propertyValidator("modelBiasJobInput", CfnModelBiasJobDefinitionModelBiasJobInputPropertyValidator)(properties.modelBiasJobInput));
  errors.collect(cdk.propertyValidator("modelBiasJobOutputConfig", cdk.requiredValidator)(properties.modelBiasJobOutputConfig));
  errors.collect(cdk.propertyValidator("modelBiasJobOutputConfig", CfnModelBiasJobDefinitionMonitoringOutputConfigPropertyValidator)(properties.modelBiasJobOutputConfig));
  errors.collect(cdk.propertyValidator("networkConfig", CfnModelBiasJobDefinitionNetworkConfigPropertyValidator)(properties.networkConfig));
  errors.collect(cdk.propertyValidator("roleArn", cdk.requiredValidator)(properties.roleArn));
  errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
  errors.collect(cdk.propertyValidator("stoppingCondition", CfnModelBiasJobDefinitionStoppingConditionPropertyValidator)(properties.stoppingCondition));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  return errors.wrap("supplied properties not correct for \"CfnModelBiasJobDefinitionProps\"");
}

// @ts-ignore TS6133
function convertCfnModelBiasJobDefinitionPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelBiasJobDefinitionPropsValidator(properties).assertSuccess();
  return {
    "EndpointName": cdk.stringToCloudFormation(properties.endpointName),
    "JobDefinitionName": cdk.stringToCloudFormation(properties.jobDefinitionName),
    "JobResources": convertCfnModelBiasJobDefinitionMonitoringResourcesPropertyToCloudFormation(properties.jobResources),
    "ModelBiasAppSpecification": convertCfnModelBiasJobDefinitionModelBiasAppSpecificationPropertyToCloudFormation(properties.modelBiasAppSpecification),
    "ModelBiasBaselineConfig": convertCfnModelBiasJobDefinitionModelBiasBaselineConfigPropertyToCloudFormation(properties.modelBiasBaselineConfig),
    "ModelBiasJobInput": convertCfnModelBiasJobDefinitionModelBiasJobInputPropertyToCloudFormation(properties.modelBiasJobInput),
    "ModelBiasJobOutputConfig": convertCfnModelBiasJobDefinitionMonitoringOutputConfigPropertyToCloudFormation(properties.modelBiasJobOutputConfig),
    "NetworkConfig": convertCfnModelBiasJobDefinitionNetworkConfigPropertyToCloudFormation(properties.networkConfig),
    "RoleArn": cdk.stringToCloudFormation(properties.roleArn),
    "StoppingCondition": convertCfnModelBiasJobDefinitionStoppingConditionPropertyToCloudFormation(properties.stoppingCondition),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
  };
}

// @ts-ignore TS6133
function CfnModelBiasJobDefinitionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelBiasJobDefinitionProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelBiasJobDefinitionProps>();
  ret.addPropertyResult("endpointName", "EndpointName", (properties.EndpointName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointName) : undefined));
  ret.addPropertyResult("jobDefinitionName", "JobDefinitionName", (properties.JobDefinitionName != null ? cfn_parse.FromCloudFormation.getString(properties.JobDefinitionName) : undefined));
  ret.addPropertyResult("jobResources", "JobResources", (properties.JobResources != null ? CfnModelBiasJobDefinitionMonitoringResourcesPropertyFromCloudFormation(properties.JobResources) : undefined));
  ret.addPropertyResult("modelBiasAppSpecification", "ModelBiasAppSpecification", (properties.ModelBiasAppSpecification != null ? CfnModelBiasJobDefinitionModelBiasAppSpecificationPropertyFromCloudFormation(properties.ModelBiasAppSpecification) : undefined));
  ret.addPropertyResult("modelBiasBaselineConfig", "ModelBiasBaselineConfig", (properties.ModelBiasBaselineConfig != null ? CfnModelBiasJobDefinitionModelBiasBaselineConfigPropertyFromCloudFormation(properties.ModelBiasBaselineConfig) : undefined));
  ret.addPropertyResult("modelBiasJobInput", "ModelBiasJobInput", (properties.ModelBiasJobInput != null ? CfnModelBiasJobDefinitionModelBiasJobInputPropertyFromCloudFormation(properties.ModelBiasJobInput) : undefined));
  ret.addPropertyResult("modelBiasJobOutputConfig", "ModelBiasJobOutputConfig", (properties.ModelBiasJobOutputConfig != null ? CfnModelBiasJobDefinitionMonitoringOutputConfigPropertyFromCloudFormation(properties.ModelBiasJobOutputConfig) : undefined));
  ret.addPropertyResult("networkConfig", "NetworkConfig", (properties.NetworkConfig != null ? CfnModelBiasJobDefinitionNetworkConfigPropertyFromCloudFormation(properties.NetworkConfig) : undefined));
  ret.addPropertyResult("roleArn", "RoleArn", (properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined));
  ret.addPropertyResult("stoppingCondition", "StoppingCondition", (properties.StoppingCondition != null ? CfnModelBiasJobDefinitionStoppingConditionPropertyFromCloudFormation(properties.StoppingCondition) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Creates an Amazon SageMaker Model Card.
 *
 * For information about how to use model cards, see [Amazon SageMaker Model Card](https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html) .
 *
 * @cloudformationResource AWS::SageMaker::ModelCard
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelcard.html
 */
export class CfnModelCard extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::ModelCard";

  /**
   * Build a CfnModelCard from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnModelCard {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnModelCardPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnModelCard(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The domain associated with the user.
   *
   * @cloudformationAttribute CreatedBy.DomainId
   */
  public readonly attrCreatedByDomainId: string;

  /**
   * The Amazon Resource Name (ARN) of the user's profile.
   *
   * @cloudformationAttribute CreatedBy.UserProfileArn
   */
  public readonly attrCreatedByUserProfileArn: string;

  /**
   * The name of the user's profile.
   *
   * @cloudformationAttribute CreatedBy.UserProfileName
   */
  public readonly attrCreatedByUserProfileName: string;

  /**
   * The date and time the model card was created.
   *
   * @cloudformationAttribute CreationTime
   */
  public readonly attrCreationTime: string;

  /**
   * The domain associated with the user.
   *
   * @cloudformationAttribute LastModifiedBy.DomainId
   */
  public readonly attrLastModifiedByDomainId: string;

  /**
   * The Amazon Resource Name (ARN) of the user's profile.
   *
   * @cloudformationAttribute LastModifiedBy.UserProfileArn
   */
  public readonly attrLastModifiedByUserProfileArn: string;

  /**
   * The name of the user's profile.
   *
   * @cloudformationAttribute LastModifiedBy.UserProfileName
   */
  public readonly attrLastModifiedByUserProfileName: string;

  /**
   * The date and time the model card was last modified.
   *
   * @cloudformationAttribute LastModifiedTime
   */
  public readonly attrLastModifiedTime: string;

  /**
   * The Amazon Resource Number (ARN) of the model card. For example, `arn:aws:sagemaker:us-west-2:012345678901:modelcard/examplemodelcard` .
   *
   * @cloudformationAttribute ModelCardArn
   */
  public readonly attrModelCardArn: string;

  /**
   * The processing status of model card deletion. The ModelCardProcessingStatus updates throughout the different deletion steps.
   *
   * @cloudformationAttribute ModelCardProcessingStatus
   */
  public readonly attrModelCardProcessingStatus: string;

  /**
   * A version of the model card.
   *
   * @cloudformationAttribute ModelCardVersion
   */
  public readonly attrModelCardVersion: number;

  /**
   * The content of the model card.
   */
  public content: CfnModelCard.ContentProperty | cdk.IResolvable;

  /**
   * Information about the user who created or modified one or more of the following:.
   */
  public createdBy?: cdk.IResolvable | CfnModelCard.UserContextProperty;

  /**
   * Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
   */
  public lastModifiedBy?: cdk.IResolvable | CfnModelCard.UserContextProperty;

  /**
   * The unique name of the model card.
   */
  public modelCardName: string;

  /**
   * The approval status of the model card within your organization.
   */
  public modelCardStatus: string;

  /**
   * The security configuration used to protect model card data.
   */
  public securityConfig?: cdk.IResolvable | CfnModelCard.SecurityConfigProperty;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * Key-value pairs used to manage metadata for the model card.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnModelCardProps) {
    super(scope, id, {
      "type": CfnModelCard.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "content", this);
    cdk.requireProperty(props, "modelCardName", this);
    cdk.requireProperty(props, "modelCardStatus", this);

    this.attrCreatedByDomainId = cdk.Token.asString(this.getAtt("CreatedBy.DomainId", cdk.ResolutionTypeHint.STRING));
    this.attrCreatedByUserProfileArn = cdk.Token.asString(this.getAtt("CreatedBy.UserProfileArn", cdk.ResolutionTypeHint.STRING));
    this.attrCreatedByUserProfileName = cdk.Token.asString(this.getAtt("CreatedBy.UserProfileName", cdk.ResolutionTypeHint.STRING));
    this.attrCreationTime = cdk.Token.asString(this.getAtt("CreationTime", cdk.ResolutionTypeHint.STRING));
    this.attrLastModifiedByDomainId = cdk.Token.asString(this.getAtt("LastModifiedBy.DomainId", cdk.ResolutionTypeHint.STRING));
    this.attrLastModifiedByUserProfileArn = cdk.Token.asString(this.getAtt("LastModifiedBy.UserProfileArn", cdk.ResolutionTypeHint.STRING));
    this.attrLastModifiedByUserProfileName = cdk.Token.asString(this.getAtt("LastModifiedBy.UserProfileName", cdk.ResolutionTypeHint.STRING));
    this.attrLastModifiedTime = cdk.Token.asString(this.getAtt("LastModifiedTime", cdk.ResolutionTypeHint.STRING));
    this.attrModelCardArn = cdk.Token.asString(this.getAtt("ModelCardArn", cdk.ResolutionTypeHint.STRING));
    this.attrModelCardProcessingStatus = cdk.Token.asString(this.getAtt("ModelCardProcessingStatus", cdk.ResolutionTypeHint.STRING));
    this.attrModelCardVersion = cdk.Token.asNumber(this.getAtt("ModelCardVersion", cdk.ResolutionTypeHint.NUMBER));
    this.content = props.content;
    this.createdBy = props.createdBy;
    this.lastModifiedBy = props.lastModifiedBy;
    this.modelCardName = props.modelCardName;
    this.modelCardStatus = props.modelCardStatus;
    this.securityConfig = props.securityConfig;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::ModelCard", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "content": this.content,
      "createdBy": this.createdBy,
      "lastModifiedBy": this.lastModifiedBy,
      "modelCardName": this.modelCardName,
      "modelCardStatus": this.modelCardStatus,
      "securityConfig": this.securityConfig,
      "tags": this.tags.renderTags()
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnModelCard.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnModelCardPropsToCloudFormation(props);
  }
}

export namespace CfnModelCard {
  /**
   * Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-usercontext.html
   */
  export interface UserContextProperty {
    /**
     * The domain associated with the user.
     *
     * @default - "UnsetValue"
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-usercontext.html#cfn-sagemaker-modelcard-usercontext-domainid
     */
    readonly domainId?: string;

    /**
     * The Amazon Resource Name (ARN) of the user's profile.
     *
     * @default - "UnsetValue"
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-usercontext.html#cfn-sagemaker-modelcard-usercontext-userprofilearn
     */
    readonly userProfileArn?: string;

    /**
     * The name of the user's profile.
     *
     * @default - "UnsetValue"
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-usercontext.html#cfn-sagemaker-modelcard-usercontext-userprofilename
     */
    readonly userProfileName?: string;
  }

  /**
   * The security configuration used to protect model card data.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-securityconfig.html
   */
  export interface SecurityConfigProperty {
    /**
     * A AWS Key Management Service [key ID](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-id) used to encrypt a model card.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-securityconfig.html#cfn-sagemaker-modelcard-securityconfig-kmskeyid
     */
    readonly kmsKeyId?: string;
  }

  /**
   * The content of the model card.
   *
   * It follows the [model card json schema](https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html#model-cards-json-schema) .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-content.html
   */
  export interface ContentProperty {
    /**
     * Additional information about the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-content.html#cfn-sagemaker-modelcard-content-additionalinformation
     */
    readonly additionalInformation?: CfnModelCard.AdditionalInformationProperty | cdk.IResolvable;

    /**
     * Information about how the model supports business goals.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-content.html#cfn-sagemaker-modelcard-content-businessdetails
     */
    readonly businessDetails?: CfnModelCard.BusinessDetailsProperty | cdk.IResolvable;

    /**
     * An overview about the model's evaluation.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-content.html#cfn-sagemaker-modelcard-content-evaluationdetails
     */
    readonly evaluationDetails?: Array<CfnModelCard.EvaluationDetailProperty | cdk.IResolvable> | cdk.IResolvable;

    /**
     * The intended usage of the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-content.html#cfn-sagemaker-modelcard-content-intendeduses
     */
    readonly intendedUses?: CfnModelCard.IntendedUsesProperty | cdk.IResolvable;

    /**
     * An overview about the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-content.html#cfn-sagemaker-modelcard-content-modeloverview
     */
    readonly modelOverview?: cdk.IResolvable | CfnModelCard.ModelOverviewProperty;

    /**
     * Metadata information related to model package version.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-content.html#cfn-sagemaker-modelcard-content-modelpackagedetails
     */
    readonly modelPackageDetails?: cdk.IResolvable | CfnModelCard.ModelPackageDetailsProperty;

    /**
     * An overview about model training.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-content.html#cfn-sagemaker-modelcard-content-trainingdetails
     */
    readonly trainingDetails?: cdk.IResolvable | CfnModelCard.TrainingDetailsProperty;
  }

  /**
   * The intended uses of a model.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-intendeduses.html
   */
  export interface IntendedUsesProperty {
    /**
     * An explanation of why your organization categorizes the model with its risk rating.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-intendeduses.html#cfn-sagemaker-modelcard-intendeduses-explanationsforriskrating
     */
    readonly explanationsForRiskRating?: string;

    /**
     * Factors affecting model efficacy.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-intendeduses.html#cfn-sagemaker-modelcard-intendeduses-factorsaffectingmodelefficiency
     */
    readonly factorsAffectingModelEfficiency?: string;

    /**
     * The intended use cases for the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-intendeduses.html#cfn-sagemaker-modelcard-intendeduses-intendeduses
     */
    readonly intendedUses?: string;

    /**
     * The general purpose of the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-intendeduses.html#cfn-sagemaker-modelcard-intendeduses-purposeofmodel
     */
    readonly purposeOfModel?: string;

    /**
     * Your organization's risk rating. You can specify one the following values as the risk rating:.
     *
     * - High
     * - Medium
     * - Low
     * - Unknown
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-intendeduses.html#cfn-sagemaker-modelcard-intendeduses-riskrating
     */
    readonly riskRating?: string;
  }

  /**
   * Additional information about the model.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-additionalinformation.html
   */
  export interface AdditionalInformationProperty {
    /**
     * Caveats and recommendations for those who might use this model in their applications.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-additionalinformation.html#cfn-sagemaker-modelcard-additionalinformation-caveatsandrecommendations
     */
    readonly caveatsAndRecommendations?: string;

    /**
     * Any additional information to document about the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-additionalinformation.html#cfn-sagemaker-modelcard-additionalinformation-customdetails
     */
    readonly customDetails?: cdk.IResolvable | Record<string, string>;

    /**
     * Any ethical considerations documented by the model card author.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-additionalinformation.html#cfn-sagemaker-modelcard-additionalinformation-ethicalconsiderations
     */
    readonly ethicalConsiderations?: string;
  }

  /**
   * An overview about the model.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modeloverview.html
   */
  export interface ModelOverviewProperty {
    /**
     * The algorithm used to solve the problem.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modeloverview.html#cfn-sagemaker-modelcard-modeloverview-algorithmtype
     */
    readonly algorithmType?: string;

    /**
     * An overview about model inference.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modeloverview.html#cfn-sagemaker-modelcard-modeloverview-inferenceenvironment
     */
    readonly inferenceEnvironment?: CfnModelCard.InferenceEnvironmentProperty | cdk.IResolvable;

    /**
     * The location of the model artifact.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modeloverview.html#cfn-sagemaker-modelcard-modeloverview-modelartifact
     */
    readonly modelArtifact?: Array<string>;

    /**
     * The creator of the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modeloverview.html#cfn-sagemaker-modelcard-modeloverview-modelcreator
     */
    readonly modelCreator?: string;

    /**
     * A description of the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modeloverview.html#cfn-sagemaker-modelcard-modeloverview-modeldescription
     */
    readonly modelDescription?: string;

    /**
     * The SageMaker Model ARN or non- SageMaker Model ID.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modeloverview.html#cfn-sagemaker-modelcard-modeloverview-modelid
     */
    readonly modelId?: string;

    /**
     * The name of the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modeloverview.html#cfn-sagemaker-modelcard-modeloverview-modelname
     */
    readonly modelName?: string;

    /**
     * The owner of the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modeloverview.html#cfn-sagemaker-modelcard-modeloverview-modelowner
     */
    readonly modelOwner?: string;

    /**
     * The version of the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modeloverview.html#cfn-sagemaker-modelcard-modeloverview-modelversion
     */
    readonly modelVersion?: number;

    /**
     * The problem being solved with the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modeloverview.html#cfn-sagemaker-modelcard-modeloverview-problemtype
     */
    readonly problemType?: string;
  }

  /**
   * An overview of a model's inference environment.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-inferenceenvironment.html
   */
  export interface InferenceEnvironmentProperty {
    /**
     * The container used to run the inference environment.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-inferenceenvironment.html#cfn-sagemaker-modelcard-inferenceenvironment-containerimage
     */
    readonly containerImage?: Array<string>;
  }

  /**
   * The training details of the model.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingdetails.html
   */
  export interface TrainingDetailsProperty {
    /**
     * The function that is optimized during model training.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingdetails.html#cfn-sagemaker-modelcard-trainingdetails-objectivefunction
     */
    readonly objectiveFunction?: cdk.IResolvable | CfnModelCard.ObjectiveFunctionProperty;

    /**
     * Details about any associated training jobs.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingdetails.html#cfn-sagemaker-modelcard-trainingdetails-trainingjobdetails
     */
    readonly trainingJobDetails?: cdk.IResolvable | CfnModelCard.TrainingJobDetailsProperty;

    /**
     * Any observations about training.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingdetails.html#cfn-sagemaker-modelcard-trainingdetails-trainingobservations
     */
    readonly trainingObservations?: string;
  }

  /**
   * The function that is optimized during model training.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-objectivefunction.html
   */
  export interface ObjectiveFunctionProperty {
    /**
     * A function object that details optimization direction, metric, and additional descriptions.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-objectivefunction.html#cfn-sagemaker-modelcard-objectivefunction-function
     */
    readonly function?: CfnModelCard.FunctionProperty | cdk.IResolvable;

    /**
     * Notes about the object function, including other considerations for possible objective functions.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-objectivefunction.html#cfn-sagemaker-modelcard-objectivefunction-notes
     */
    readonly notes?: string;
  }

  /**
   * Function details.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-function.html
   */
  export interface FunctionProperty {
    /**
     * An optional description of any conditions of your objective function metric.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-function.html#cfn-sagemaker-modelcard-function-condition
     */
    readonly condition?: string;

    /**
     * The metric of the model's objective function.
     *
     * For example, *loss* or *rmse* . The following list shows examples of the values that you can specify for the metric:
     *
     * - `ACCURACY`
     * - `AUC`
     * - `LOSS`
     * - `MAE`
     * - `RMSE`
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-function.html#cfn-sagemaker-modelcard-function-facet
     */
    readonly facet?: string;

    /**
     * The optimization direction of the model's objective function. You must specify one of the following values:.
     *
     * - `Maximize`
     * - `Minimize`
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-function.html#cfn-sagemaker-modelcard-function-function
     */
    readonly function?: string;
  }

  /**
   * The overview of a training job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingjobdetails.html
   */
  export interface TrainingJobDetailsProperty {
    /**
     * The hyper parameters used in the training job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingjobdetails.html#cfn-sagemaker-modelcard-trainingjobdetails-hyperparameters
     */
    readonly hyperParameters?: Array<cdk.IResolvable | CfnModelCard.TrainingHyperParameterProperty> | cdk.IResolvable;

    /**
     * The SageMaker training job Amazon Resource Name (ARN).
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingjobdetails.html#cfn-sagemaker-modelcard-trainingjobdetails-trainingarn
     */
    readonly trainingArn?: string;

    /**
     * The location of the datasets used to train the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingjobdetails.html#cfn-sagemaker-modelcard-trainingjobdetails-trainingdatasets
     */
    readonly trainingDatasets?: Array<string>;

    /**
     * The SageMaker training job image URI.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingjobdetails.html#cfn-sagemaker-modelcard-trainingjobdetails-trainingenvironment
     */
    readonly trainingEnvironment?: cdk.IResolvable | CfnModelCard.TrainingEnvironmentProperty;

    /**
     * The SageMaker training job results.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingjobdetails.html#cfn-sagemaker-modelcard-trainingjobdetails-trainingmetrics
     */
    readonly trainingMetrics?: Array<cdk.IResolvable | CfnModelCard.TrainingMetricProperty> | cdk.IResolvable;

    /**
     * Additional hyper parameters that you've specified when training the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingjobdetails.html#cfn-sagemaker-modelcard-trainingjobdetails-userprovidedhyperparameters
     */
    readonly userProvidedHyperParameters?: Array<cdk.IResolvable | CfnModelCard.TrainingHyperParameterProperty> | cdk.IResolvable;

    /**
     * Custom training job results.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingjobdetails.html#cfn-sagemaker-modelcard-trainingjobdetails-userprovidedtrainingmetrics
     */
    readonly userProvidedTrainingMetrics?: Array<cdk.IResolvable | CfnModelCard.TrainingMetricProperty> | cdk.IResolvable;
  }

  /**
   * A result from a SageMaker training job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingmetric.html
   */
  export interface TrainingMetricProperty {
    /**
     * The name of the result from the SageMaker training job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingmetric.html#cfn-sagemaker-modelcard-trainingmetric-name
     */
    readonly name: string;

    /**
     * Any additional notes describing the result of the training job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingmetric.html#cfn-sagemaker-modelcard-trainingmetric-notes
     */
    readonly notes?: string;

    /**
     * The value of a result from the SageMaker training job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingmetric.html#cfn-sagemaker-modelcard-trainingmetric-value
     */
    readonly value: number;
  }

  /**
   * A hyper parameter that was configured in training the model.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-traininghyperparameter.html
   */
  export interface TrainingHyperParameterProperty {
    /**
     * The name of the hyper parameter.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-traininghyperparameter.html#cfn-sagemaker-modelcard-traininghyperparameter-name
     */
    readonly name: string;

    /**
     * The value specified for the hyper parameter.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-traininghyperparameter.html#cfn-sagemaker-modelcard-traininghyperparameter-value
     */
    readonly value: string;
  }

  /**
   * SageMaker training image.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingenvironment.html
   */
  export interface TrainingEnvironmentProperty {
    /**
     * SageMaker inference image URI.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingenvironment.html#cfn-sagemaker-modelcard-trainingenvironment-containerimage
     */
    readonly containerImage?: Array<string>;
  }

  /**
   * The evaluation details of the model.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-evaluationdetail.html
   */
  export interface EvaluationDetailProperty {
    /**
     * The location of the datasets used to evaluate the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-evaluationdetail.html#cfn-sagemaker-modelcard-evaluationdetail-datasets
     */
    readonly datasets?: Array<string>;

    /**
     * The Amazon Resource Name (ARN) of the evaluation job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-evaluationdetail.html#cfn-sagemaker-modelcard-evaluationdetail-evaluationjobarn
     */
    readonly evaluationJobArn?: string;

    /**
     * Any observations made during the model evaluation.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-evaluationdetail.html#cfn-sagemaker-modelcard-evaluationdetail-evaluationobservation
     */
    readonly evaluationObservation?: string;

    /**
     * Additional attributes associated with the evaluation results.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-evaluationdetail.html#cfn-sagemaker-modelcard-evaluationdetail-metadata
     */
    readonly metadata?: cdk.IResolvable | Record<string, string>;

    /**
     * An evaluation Metric Group object.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-evaluationdetail.html#cfn-sagemaker-modelcard-evaluationdetail-metricgroups
     */
    readonly metricGroups?: Array<cdk.IResolvable | CfnModelCard.MetricGroupProperty> | cdk.IResolvable;

    /**
     * The evaluation job name.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-evaluationdetail.html#cfn-sagemaker-modelcard-evaluationdetail-name
     */
    readonly name: string;
  }

  /**
   * A group of metric data that you use to initialize a metric group object.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-metricgroup.html
   */
  export interface MetricGroupProperty {
    /**
     * A list of metric objects. The `MetricDataItems` list can have one of the following values:.
     *
     * - `bar_chart_metric`
     * - `matrix_metric`
     * - `simple_metric`
     * - `linear_graph_metric`
     *
     * For more information about the metric schema, see the definition section of the [model card JSON schema](https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html#model-cards-json-schema) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-metricgroup.html#cfn-sagemaker-modelcard-metricgroup-metricdata
     */
    readonly metricData: Array<cdk.IResolvable | CfnModelCard.MetricDataItemsProperty> | cdk.IResolvable;

    /**
     * The metric group name.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-metricgroup.html#cfn-sagemaker-modelcard-metricgroup-name
     */
    readonly name: string;
  }

  /**
   * Metric data.
   *
   * The `type` determines the data types that you specify for `value` , `XAxisName` and `YAxisName` . For information about specifying values for metrics, see [model card JSON schema](https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html#model-cards-json-schema) .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-metricdataitems.html
   */
  export interface MetricDataItemsProperty {
    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-metricdataitems.html#cfn-sagemaker-modelcard-metricdataitems-name
     */
    readonly name: string;

    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-metricdataitems.html#cfn-sagemaker-modelcard-metricdataitems-notes
     */
    readonly notes?: string;

    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-metricdataitems.html#cfn-sagemaker-modelcard-metricdataitems-type
     */
    readonly type: string;

    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-metricdataitems.html#cfn-sagemaker-modelcard-metricdataitems-value
     */
    readonly value: any | cdk.IResolvable;

    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-metricdataitems.html#cfn-sagemaker-modelcard-metricdataitems-xaxisname
     */
    readonly xAxisName?: Array<string>;

    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-metricdataitems.html#cfn-sagemaker-modelcard-metricdataitems-yaxisname
     */
    readonly yAxisName?: Array<string>;
  }

  /**
   * Metadata information related to model package version.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modelpackagedetails.html
   */
  export interface ModelPackageDetailsProperty {
    /**
     * A description provided for the model approval.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modelpackagedetails.html#cfn-sagemaker-modelcard-modelpackagedetails-approvaldescription
     */
    readonly approvalDescription?: string;

    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modelpackagedetails.html#cfn-sagemaker-modelcard-modelpackagedetails-createdby
     */
    readonly createdBy?: cdk.IResolvable | CfnModelCard.ModelPackageCreatorProperty;

    /**
     * The machine learning domain of the model package you specified.
     *
     * Common machine learning domains include computer vision and natural language processing.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modelpackagedetails.html#cfn-sagemaker-modelcard-modelpackagedetails-domain
     */
    readonly domain?: string;

    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modelpackagedetails.html#cfn-sagemaker-modelcard-modelpackagedetails-inferencespecification
     */
    readonly inferenceSpecification?: CfnModelCard.InferenceSpecificationProperty | cdk.IResolvable;

    /**
     * Current approval status of model package.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modelpackagedetails.html#cfn-sagemaker-modelcard-modelpackagedetails-modelapprovalstatus
     */
    readonly modelApprovalStatus?: string;

    /**
     * The Amazon Resource Name (ARN) of the model package.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modelpackagedetails.html#cfn-sagemaker-modelcard-modelpackagedetails-modelpackagearn
     */
    readonly modelPackageArn?: string;

    /**
     * A brief summary of the model package.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modelpackagedetails.html#cfn-sagemaker-modelcard-modelpackagedetails-modelpackagedescription
     */
    readonly modelPackageDescription?: string;

    /**
     * If the model is a versioned model, the name of the model group that the versioned model belongs to.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modelpackagedetails.html#cfn-sagemaker-modelcard-modelpackagedetails-modelpackagegroupname
     */
    readonly modelPackageGroupName?: string;

    /**
     * Name of the model package.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modelpackagedetails.html#cfn-sagemaker-modelcard-modelpackagedetails-modelpackagename
     */
    readonly modelPackageName?: string;

    /**
     * Current status of model package.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modelpackagedetails.html#cfn-sagemaker-modelcard-modelpackagedetails-modelpackagestatus
     */
    readonly modelPackageStatus?: string;

    /**
     * Version of the model package.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modelpackagedetails.html#cfn-sagemaker-modelcard-modelpackagedetails-modelpackageversion
     */
    readonly modelPackageVersion?: number;

    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modelpackagedetails.html#cfn-sagemaker-modelcard-modelpackagedetails-sourcealgorithms
     */
    readonly sourceAlgorithms?: Array<cdk.IResolvable | CfnModelCard.SourceAlgorithmProperty> | cdk.IResolvable;

    /**
     * The machine learning task you specified that your model package accomplishes.
     *
     * Common machine learning tasks include object detection and image classification.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modelpackagedetails.html#cfn-sagemaker-modelcard-modelpackagedetails-task
     */
    readonly task?: string;
  }

  /**
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modelpackagecreator.html
   */
  export interface ModelPackageCreatorProperty {
    /**
     * The name of the user's profile in Studio.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modelpackagecreator.html#cfn-sagemaker-modelcard-modelpackagecreator-userprofilename
     */
    readonly userProfileName?: string;
  }

  /**
   * Specifies an algorithm that was used to create the model package.
   *
   * The algorithm must be either an algorithm resource in your SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-sourcealgorithm.html
   */
  export interface SourceAlgorithmProperty {
    /**
     * The name of an algorithm that was used to create the model package.
     *
     * The algorithm must be either an algorithm resource in your SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-sourcealgorithm.html#cfn-sagemaker-modelcard-sourcealgorithm-algorithmname
     */
    readonly algorithmName: string;

    /**
     * The Amazon S3 path where the model artifacts, which result from model training, are stored.
     *
     * This path must point to a single `gzip` compressed tar archive ( `.tar.gz` suffix).
     *
     * > The model artifacts must be in an S3 bucket that is in the same AWS region as the algorithm.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-sourcealgorithm.html#cfn-sagemaker-modelcard-sourcealgorithm-modeldataurl
     */
    readonly modelDataUrl?: string;
  }

  /**
   * Defines how to perform inference generation after a training job is run.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-inferencespecification.html
   */
  export interface InferenceSpecificationProperty {
    /**
     * The Amazon ECR registry path of the Docker image that contains the inference code.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-inferencespecification.html#cfn-sagemaker-modelcard-inferencespecification-containers
     */
    readonly containers: Array<CfnModelCard.ContainerProperty | cdk.IResolvable> | cdk.IResolvable;
  }

  /**
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-container.html
   */
  export interface ContainerProperty {
    /**
     * Inference environment path.
     *
     * The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-container.html#cfn-sagemaker-modelcard-container-image
     */
    readonly image: string;

    /**
     * The Amazon S3 path where the model artifacts, which result from model training, are stored.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-container.html#cfn-sagemaker-modelcard-container-modeldataurl
     */
    readonly modelDataUrl?: string;

    /**
     * The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-container.html#cfn-sagemaker-modelcard-container-nearestmodelname
     */
    readonly nearestModelName?: string;
  }

  /**
   * Information about how the model supports business goals.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-businessdetails.html
   */
  export interface BusinessDetailsProperty {
    /**
     * The specific business problem that the model is trying to solve.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-businessdetails.html#cfn-sagemaker-modelcard-businessdetails-businessproblem
     */
    readonly businessProblem?: string;

    /**
     * The relevant stakeholders for the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-businessdetails.html#cfn-sagemaker-modelcard-businessdetails-businessstakeholders
     */
    readonly businessStakeholders?: string;

    /**
     * The broader business need that the model is serving.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-businessdetails.html#cfn-sagemaker-modelcard-businessdetails-lineofbusiness
     */
    readonly lineOfBusiness?: string;
  }
}

/**
 * Properties for defining a `CfnModelCard`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelcard.html
 */
export interface CfnModelCardProps {
  /**
   * The content of the model card.
   *
   * Content uses the [model card JSON schema](https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html#model-cards-json-schema) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelcard.html#cfn-sagemaker-modelcard-content
   */
  readonly content: CfnModelCard.ContentProperty | cdk.IResolvable;

  /**
   * Information about the user who created or modified one or more of the following:.
   *
   * - Experiment
   * - Trial
   * - Trial component
   * - Lineage group
   * - Project
   * - Model Card
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelcard.html#cfn-sagemaker-modelcard-createdby
   */
  readonly createdBy?: cdk.IResolvable | CfnModelCard.UserContextProperty;

  /**
   * Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelcard.html#cfn-sagemaker-modelcard-lastmodifiedby
   */
  readonly lastModifiedBy?: cdk.IResolvable | CfnModelCard.UserContextProperty;

  /**
   * The unique name of the model card.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelcard.html#cfn-sagemaker-modelcard-modelcardname
   */
  readonly modelCardName: string;

  /**
   * The approval status of the model card within your organization.
   *
   * Different organizations might have different criteria for model card review and approval.
   *
   * - `Draft` : The model card is a work in progress.
   * - `PendingReview` : The model card is pending review.
   * - `Approved` : The model card is approved.
   * - `Archived` : The model card is archived. No more updates should be made to the model card, but it can still be exported.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelcard.html#cfn-sagemaker-modelcard-modelcardstatus
   */
  readonly modelCardStatus: string;

  /**
   * The security configuration used to protect model card data.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelcard.html#cfn-sagemaker-modelcard-securityconfig
   */
  readonly securityConfig?: cdk.IResolvable | CfnModelCard.SecurityConfigProperty;

  /**
   * Key-value pairs used to manage metadata for the model card.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelcard.html#cfn-sagemaker-modelcard-tags
   */
  readonly tags?: Array<cdk.CfnTag>;
}

/**
 * Determine whether the given properties match those of a `UserContextProperty`
 *
 * @param properties - the TypeScript properties of a `UserContextProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardUserContextPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("domainId", cdk.validateString)(properties.domainId));
  errors.collect(cdk.propertyValidator("userProfileArn", cdk.validateString)(properties.userProfileArn));
  errors.collect(cdk.propertyValidator("userProfileName", cdk.validateString)(properties.userProfileName));
  return errors.wrap("supplied properties not correct for \"UserContextProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardUserContextPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardUserContextPropertyValidator(properties).assertSuccess();
  return {
    "DomainId": cdk.stringToCloudFormation(properties.domainId),
    "UserProfileArn": cdk.stringToCloudFormation(properties.userProfileArn),
    "UserProfileName": cdk.stringToCloudFormation(properties.userProfileName)
  };
}

// @ts-ignore TS6133
function CfnModelCardUserContextPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelCard.UserContextProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.UserContextProperty>();
  ret.addPropertyResult("domainId", "DomainId", (properties.DomainId != null ? cfn_parse.FromCloudFormation.getString(properties.DomainId) : undefined));
  ret.addPropertyResult("userProfileArn", "UserProfileArn", (properties.UserProfileArn != null ? cfn_parse.FromCloudFormation.getString(properties.UserProfileArn) : undefined));
  ret.addPropertyResult("userProfileName", "UserProfileName", (properties.UserProfileName != null ? cfn_parse.FromCloudFormation.getString(properties.UserProfileName) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `SecurityConfigProperty`
 *
 * @param properties - the TypeScript properties of a `SecurityConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardSecurityConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("kmsKeyId", cdk.validateString)(properties.kmsKeyId));
  return errors.wrap("supplied properties not correct for \"SecurityConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardSecurityConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardSecurityConfigPropertyValidator(properties).assertSuccess();
  return {
    "KmsKeyId": cdk.stringToCloudFormation(properties.kmsKeyId)
  };
}

// @ts-ignore TS6133
function CfnModelCardSecurityConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelCard.SecurityConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.SecurityConfigProperty>();
  ret.addPropertyResult("kmsKeyId", "KmsKeyId", (properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `IntendedUsesProperty`
 *
 * @param properties - the TypeScript properties of a `IntendedUsesProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardIntendedUsesPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("explanationsForRiskRating", cdk.validateString)(properties.explanationsForRiskRating));
  errors.collect(cdk.propertyValidator("factorsAffectingModelEfficiency", cdk.validateString)(properties.factorsAffectingModelEfficiency));
  errors.collect(cdk.propertyValidator("intendedUses", cdk.validateString)(properties.intendedUses));
  errors.collect(cdk.propertyValidator("purposeOfModel", cdk.validateString)(properties.purposeOfModel));
  errors.collect(cdk.propertyValidator("riskRating", cdk.validateString)(properties.riskRating));
  return errors.wrap("supplied properties not correct for \"IntendedUsesProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardIntendedUsesPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardIntendedUsesPropertyValidator(properties).assertSuccess();
  return {
    "ExplanationsForRiskRating": cdk.stringToCloudFormation(properties.explanationsForRiskRating),
    "FactorsAffectingModelEfficiency": cdk.stringToCloudFormation(properties.factorsAffectingModelEfficiency),
    "IntendedUses": cdk.stringToCloudFormation(properties.intendedUses),
    "PurposeOfModel": cdk.stringToCloudFormation(properties.purposeOfModel),
    "RiskRating": cdk.stringToCloudFormation(properties.riskRating)
  };
}

// @ts-ignore TS6133
function CfnModelCardIntendedUsesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelCard.IntendedUsesProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.IntendedUsesProperty>();
  ret.addPropertyResult("explanationsForRiskRating", "ExplanationsForRiskRating", (properties.ExplanationsForRiskRating != null ? cfn_parse.FromCloudFormation.getString(properties.ExplanationsForRiskRating) : undefined));
  ret.addPropertyResult("factorsAffectingModelEfficiency", "FactorsAffectingModelEfficiency", (properties.FactorsAffectingModelEfficiency != null ? cfn_parse.FromCloudFormation.getString(properties.FactorsAffectingModelEfficiency) : undefined));
  ret.addPropertyResult("intendedUses", "IntendedUses", (properties.IntendedUses != null ? cfn_parse.FromCloudFormation.getString(properties.IntendedUses) : undefined));
  ret.addPropertyResult("purposeOfModel", "PurposeOfModel", (properties.PurposeOfModel != null ? cfn_parse.FromCloudFormation.getString(properties.PurposeOfModel) : undefined));
  ret.addPropertyResult("riskRating", "RiskRating", (properties.RiskRating != null ? cfn_parse.FromCloudFormation.getString(properties.RiskRating) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `AdditionalInformationProperty`
 *
 * @param properties - the TypeScript properties of a `AdditionalInformationProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardAdditionalInformationPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("caveatsAndRecommendations", cdk.validateString)(properties.caveatsAndRecommendations));
  errors.collect(cdk.propertyValidator("customDetails", cdk.hashValidator(cdk.validateString))(properties.customDetails));
  errors.collect(cdk.propertyValidator("ethicalConsiderations", cdk.validateString)(properties.ethicalConsiderations));
  return errors.wrap("supplied properties not correct for \"AdditionalInformationProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardAdditionalInformationPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardAdditionalInformationPropertyValidator(properties).assertSuccess();
  return {
    "CaveatsAndRecommendations": cdk.stringToCloudFormation(properties.caveatsAndRecommendations),
    "CustomDetails": cdk.hashMapper(cdk.stringToCloudFormation)(properties.customDetails),
    "EthicalConsiderations": cdk.stringToCloudFormation(properties.ethicalConsiderations)
  };
}

// @ts-ignore TS6133
function CfnModelCardAdditionalInformationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelCard.AdditionalInformationProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.AdditionalInformationProperty>();
  ret.addPropertyResult("caveatsAndRecommendations", "CaveatsAndRecommendations", (properties.CaveatsAndRecommendations != null ? cfn_parse.FromCloudFormation.getString(properties.CaveatsAndRecommendations) : undefined));
  ret.addPropertyResult("customDetails", "CustomDetails", (properties.CustomDetails != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.CustomDetails) : undefined));
  ret.addPropertyResult("ethicalConsiderations", "EthicalConsiderations", (properties.EthicalConsiderations != null ? cfn_parse.FromCloudFormation.getString(properties.EthicalConsiderations) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `InferenceEnvironmentProperty`
 *
 * @param properties - the TypeScript properties of a `InferenceEnvironmentProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardInferenceEnvironmentPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("containerImage", cdk.listValidator(cdk.validateString))(properties.containerImage));
  return errors.wrap("supplied properties not correct for \"InferenceEnvironmentProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardInferenceEnvironmentPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardInferenceEnvironmentPropertyValidator(properties).assertSuccess();
  return {
    "ContainerImage": cdk.listMapper(cdk.stringToCloudFormation)(properties.containerImage)
  };
}

// @ts-ignore TS6133
function CfnModelCardInferenceEnvironmentPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelCard.InferenceEnvironmentProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.InferenceEnvironmentProperty>();
  ret.addPropertyResult("containerImage", "ContainerImage", (properties.ContainerImage != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.ContainerImage) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelOverviewProperty`
 *
 * @param properties - the TypeScript properties of a `ModelOverviewProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardModelOverviewPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("algorithmType", cdk.validateString)(properties.algorithmType));
  errors.collect(cdk.propertyValidator("inferenceEnvironment", CfnModelCardInferenceEnvironmentPropertyValidator)(properties.inferenceEnvironment));
  errors.collect(cdk.propertyValidator("modelArtifact", cdk.listValidator(cdk.validateString))(properties.modelArtifact));
  errors.collect(cdk.propertyValidator("modelCreator", cdk.validateString)(properties.modelCreator));
  errors.collect(cdk.propertyValidator("modelDescription", cdk.validateString)(properties.modelDescription));
  errors.collect(cdk.propertyValidator("modelId", cdk.validateString)(properties.modelId));
  errors.collect(cdk.propertyValidator("modelName", cdk.validateString)(properties.modelName));
  errors.collect(cdk.propertyValidator("modelOwner", cdk.validateString)(properties.modelOwner));
  errors.collect(cdk.propertyValidator("modelVersion", cdk.validateNumber)(properties.modelVersion));
  errors.collect(cdk.propertyValidator("problemType", cdk.validateString)(properties.problemType));
  return errors.wrap("supplied properties not correct for \"ModelOverviewProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardModelOverviewPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardModelOverviewPropertyValidator(properties).assertSuccess();
  return {
    "AlgorithmType": cdk.stringToCloudFormation(properties.algorithmType),
    "InferenceEnvironment": convertCfnModelCardInferenceEnvironmentPropertyToCloudFormation(properties.inferenceEnvironment),
    "ModelArtifact": cdk.listMapper(cdk.stringToCloudFormation)(properties.modelArtifact),
    "ModelCreator": cdk.stringToCloudFormation(properties.modelCreator),
    "ModelDescription": cdk.stringToCloudFormation(properties.modelDescription),
    "ModelId": cdk.stringToCloudFormation(properties.modelId),
    "ModelName": cdk.stringToCloudFormation(properties.modelName),
    "ModelOwner": cdk.stringToCloudFormation(properties.modelOwner),
    "ModelVersion": cdk.numberToCloudFormation(properties.modelVersion),
    "ProblemType": cdk.stringToCloudFormation(properties.problemType)
  };
}

// @ts-ignore TS6133
function CfnModelCardModelOverviewPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelCard.ModelOverviewProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.ModelOverviewProperty>();
  ret.addPropertyResult("algorithmType", "AlgorithmType", (properties.AlgorithmType != null ? cfn_parse.FromCloudFormation.getString(properties.AlgorithmType) : undefined));
  ret.addPropertyResult("inferenceEnvironment", "InferenceEnvironment", (properties.InferenceEnvironment != null ? CfnModelCardInferenceEnvironmentPropertyFromCloudFormation(properties.InferenceEnvironment) : undefined));
  ret.addPropertyResult("modelArtifact", "ModelArtifact", (properties.ModelArtifact != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.ModelArtifact) : undefined));
  ret.addPropertyResult("modelCreator", "ModelCreator", (properties.ModelCreator != null ? cfn_parse.FromCloudFormation.getString(properties.ModelCreator) : undefined));
  ret.addPropertyResult("modelDescription", "ModelDescription", (properties.ModelDescription != null ? cfn_parse.FromCloudFormation.getString(properties.ModelDescription) : undefined));
  ret.addPropertyResult("modelId", "ModelId", (properties.ModelId != null ? cfn_parse.FromCloudFormation.getString(properties.ModelId) : undefined));
  ret.addPropertyResult("modelName", "ModelName", (properties.ModelName != null ? cfn_parse.FromCloudFormation.getString(properties.ModelName) : undefined));
  ret.addPropertyResult("modelOwner", "ModelOwner", (properties.ModelOwner != null ? cfn_parse.FromCloudFormation.getString(properties.ModelOwner) : undefined));
  ret.addPropertyResult("modelVersion", "ModelVersion", (properties.ModelVersion != null ? cfn_parse.FromCloudFormation.getNumber(properties.ModelVersion) : undefined));
  ret.addPropertyResult("problemType", "ProblemType", (properties.ProblemType != null ? cfn_parse.FromCloudFormation.getString(properties.ProblemType) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `FunctionProperty`
 *
 * @param properties - the TypeScript properties of a `FunctionProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardFunctionPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("condition", cdk.validateString)(properties.condition));
  errors.collect(cdk.propertyValidator("facet", cdk.validateString)(properties.facet));
  errors.collect(cdk.propertyValidator("function", cdk.validateString)(properties.function));
  return errors.wrap("supplied properties not correct for \"FunctionProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardFunctionPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardFunctionPropertyValidator(properties).assertSuccess();
  return {
    "Condition": cdk.stringToCloudFormation(properties.condition),
    "Facet": cdk.stringToCloudFormation(properties.facet),
    "Function": cdk.stringToCloudFormation(properties.function)
  };
}

// @ts-ignore TS6133
function CfnModelCardFunctionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelCard.FunctionProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.FunctionProperty>();
  ret.addPropertyResult("condition", "Condition", (properties.Condition != null ? cfn_parse.FromCloudFormation.getString(properties.Condition) : undefined));
  ret.addPropertyResult("facet", "Facet", (properties.Facet != null ? cfn_parse.FromCloudFormation.getString(properties.Facet) : undefined));
  ret.addPropertyResult("function", "Function", (properties.Function != null ? cfn_parse.FromCloudFormation.getString(properties.Function) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ObjectiveFunctionProperty`
 *
 * @param properties - the TypeScript properties of a `ObjectiveFunctionProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardObjectiveFunctionPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("function", CfnModelCardFunctionPropertyValidator)(properties.function));
  errors.collect(cdk.propertyValidator("notes", cdk.validateString)(properties.notes));
  return errors.wrap("supplied properties not correct for \"ObjectiveFunctionProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardObjectiveFunctionPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardObjectiveFunctionPropertyValidator(properties).assertSuccess();
  return {
    "Function": convertCfnModelCardFunctionPropertyToCloudFormation(properties.function),
    "Notes": cdk.stringToCloudFormation(properties.notes)
  };
}

// @ts-ignore TS6133
function CfnModelCardObjectiveFunctionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelCard.ObjectiveFunctionProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.ObjectiveFunctionProperty>();
  ret.addPropertyResult("function", "Function", (properties.Function != null ? CfnModelCardFunctionPropertyFromCloudFormation(properties.Function) : undefined));
  ret.addPropertyResult("notes", "Notes", (properties.Notes != null ? cfn_parse.FromCloudFormation.getString(properties.Notes) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `TrainingMetricProperty`
 *
 * @param properties - the TypeScript properties of a `TrainingMetricProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardTrainingMetricPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
  errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
  errors.collect(cdk.propertyValidator("notes", cdk.validateString)(properties.notes));
  errors.collect(cdk.propertyValidator("value", cdk.requiredValidator)(properties.value));
  errors.collect(cdk.propertyValidator("value", cdk.validateNumber)(properties.value));
  return errors.wrap("supplied properties not correct for \"TrainingMetricProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardTrainingMetricPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardTrainingMetricPropertyValidator(properties).assertSuccess();
  return {
    "Name": cdk.stringToCloudFormation(properties.name),
    "Notes": cdk.stringToCloudFormation(properties.notes),
    "Value": cdk.numberToCloudFormation(properties.value)
  };
}

// @ts-ignore TS6133
function CfnModelCardTrainingMetricPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelCard.TrainingMetricProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.TrainingMetricProperty>();
  ret.addPropertyResult("name", "Name", (properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined));
  ret.addPropertyResult("notes", "Notes", (properties.Notes != null ? cfn_parse.FromCloudFormation.getString(properties.Notes) : undefined));
  ret.addPropertyResult("value", "Value", (properties.Value != null ? cfn_parse.FromCloudFormation.getNumber(properties.Value) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `TrainingHyperParameterProperty`
 *
 * @param properties - the TypeScript properties of a `TrainingHyperParameterProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardTrainingHyperParameterPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
  errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
  errors.collect(cdk.propertyValidator("value", cdk.requiredValidator)(properties.value));
  errors.collect(cdk.propertyValidator("value", cdk.validateString)(properties.value));
  return errors.wrap("supplied properties not correct for \"TrainingHyperParameterProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardTrainingHyperParameterPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardTrainingHyperParameterPropertyValidator(properties).assertSuccess();
  return {
    "Name": cdk.stringToCloudFormation(properties.name),
    "Value": cdk.stringToCloudFormation(properties.value)
  };
}

// @ts-ignore TS6133
function CfnModelCardTrainingHyperParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelCard.TrainingHyperParameterProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.TrainingHyperParameterProperty>();
  ret.addPropertyResult("name", "Name", (properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined));
  ret.addPropertyResult("value", "Value", (properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `TrainingEnvironmentProperty`
 *
 * @param properties - the TypeScript properties of a `TrainingEnvironmentProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardTrainingEnvironmentPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("containerImage", cdk.listValidator(cdk.validateString))(properties.containerImage));
  return errors.wrap("supplied properties not correct for \"TrainingEnvironmentProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardTrainingEnvironmentPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardTrainingEnvironmentPropertyValidator(properties).assertSuccess();
  return {
    "ContainerImage": cdk.listMapper(cdk.stringToCloudFormation)(properties.containerImage)
  };
}

// @ts-ignore TS6133
function CfnModelCardTrainingEnvironmentPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelCard.TrainingEnvironmentProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.TrainingEnvironmentProperty>();
  ret.addPropertyResult("containerImage", "ContainerImage", (properties.ContainerImage != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.ContainerImage) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `TrainingJobDetailsProperty`
 *
 * @param properties - the TypeScript properties of a `TrainingJobDetailsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardTrainingJobDetailsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("hyperParameters", cdk.listValidator(CfnModelCardTrainingHyperParameterPropertyValidator))(properties.hyperParameters));
  errors.collect(cdk.propertyValidator("trainingArn", cdk.validateString)(properties.trainingArn));
  errors.collect(cdk.propertyValidator("trainingDatasets", cdk.listValidator(cdk.validateString))(properties.trainingDatasets));
  errors.collect(cdk.propertyValidator("trainingEnvironment", CfnModelCardTrainingEnvironmentPropertyValidator)(properties.trainingEnvironment));
  errors.collect(cdk.propertyValidator("trainingMetrics", cdk.listValidator(CfnModelCardTrainingMetricPropertyValidator))(properties.trainingMetrics));
  errors.collect(cdk.propertyValidator("userProvidedHyperParameters", cdk.listValidator(CfnModelCardTrainingHyperParameterPropertyValidator))(properties.userProvidedHyperParameters));
  errors.collect(cdk.propertyValidator("userProvidedTrainingMetrics", cdk.listValidator(CfnModelCardTrainingMetricPropertyValidator))(properties.userProvidedTrainingMetrics));
  return errors.wrap("supplied properties not correct for \"TrainingJobDetailsProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardTrainingJobDetailsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardTrainingJobDetailsPropertyValidator(properties).assertSuccess();
  return {
    "HyperParameters": cdk.listMapper(convertCfnModelCardTrainingHyperParameterPropertyToCloudFormation)(properties.hyperParameters),
    "TrainingArn": cdk.stringToCloudFormation(properties.trainingArn),
    "TrainingDatasets": cdk.listMapper(cdk.stringToCloudFormation)(properties.trainingDatasets),
    "TrainingEnvironment": convertCfnModelCardTrainingEnvironmentPropertyToCloudFormation(properties.trainingEnvironment),
    "TrainingMetrics": cdk.listMapper(convertCfnModelCardTrainingMetricPropertyToCloudFormation)(properties.trainingMetrics),
    "UserProvidedHyperParameters": cdk.listMapper(convertCfnModelCardTrainingHyperParameterPropertyToCloudFormation)(properties.userProvidedHyperParameters),
    "UserProvidedTrainingMetrics": cdk.listMapper(convertCfnModelCardTrainingMetricPropertyToCloudFormation)(properties.userProvidedTrainingMetrics)
  };
}

// @ts-ignore TS6133
function CfnModelCardTrainingJobDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelCard.TrainingJobDetailsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.TrainingJobDetailsProperty>();
  ret.addPropertyResult("hyperParameters", "HyperParameters", (properties.HyperParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnModelCardTrainingHyperParameterPropertyFromCloudFormation)(properties.HyperParameters) : undefined));
  ret.addPropertyResult("trainingArn", "TrainingArn", (properties.TrainingArn != null ? cfn_parse.FromCloudFormation.getString(properties.TrainingArn) : undefined));
  ret.addPropertyResult("trainingDatasets", "TrainingDatasets", (properties.TrainingDatasets != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.TrainingDatasets) : undefined));
  ret.addPropertyResult("trainingEnvironment", "TrainingEnvironment", (properties.TrainingEnvironment != null ? CfnModelCardTrainingEnvironmentPropertyFromCloudFormation(properties.TrainingEnvironment) : undefined));
  ret.addPropertyResult("trainingMetrics", "TrainingMetrics", (properties.TrainingMetrics != null ? cfn_parse.FromCloudFormation.getArray(CfnModelCardTrainingMetricPropertyFromCloudFormation)(properties.TrainingMetrics) : undefined));
  ret.addPropertyResult("userProvidedHyperParameters", "UserProvidedHyperParameters", (properties.UserProvidedHyperParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnModelCardTrainingHyperParameterPropertyFromCloudFormation)(properties.UserProvidedHyperParameters) : undefined));
  ret.addPropertyResult("userProvidedTrainingMetrics", "UserProvidedTrainingMetrics", (properties.UserProvidedTrainingMetrics != null ? cfn_parse.FromCloudFormation.getArray(CfnModelCardTrainingMetricPropertyFromCloudFormation)(properties.UserProvidedTrainingMetrics) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `TrainingDetailsProperty`
 *
 * @param properties - the TypeScript properties of a `TrainingDetailsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardTrainingDetailsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("objectiveFunction", CfnModelCardObjectiveFunctionPropertyValidator)(properties.objectiveFunction));
  errors.collect(cdk.propertyValidator("trainingJobDetails", CfnModelCardTrainingJobDetailsPropertyValidator)(properties.trainingJobDetails));
  errors.collect(cdk.propertyValidator("trainingObservations", cdk.validateString)(properties.trainingObservations));
  return errors.wrap("supplied properties not correct for \"TrainingDetailsProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardTrainingDetailsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardTrainingDetailsPropertyValidator(properties).assertSuccess();
  return {
    "ObjectiveFunction": convertCfnModelCardObjectiveFunctionPropertyToCloudFormation(properties.objectiveFunction),
    "TrainingJobDetails": convertCfnModelCardTrainingJobDetailsPropertyToCloudFormation(properties.trainingJobDetails),
    "TrainingObservations": cdk.stringToCloudFormation(properties.trainingObservations)
  };
}

// @ts-ignore TS6133
function CfnModelCardTrainingDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelCard.TrainingDetailsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.TrainingDetailsProperty>();
  ret.addPropertyResult("objectiveFunction", "ObjectiveFunction", (properties.ObjectiveFunction != null ? CfnModelCardObjectiveFunctionPropertyFromCloudFormation(properties.ObjectiveFunction) : undefined));
  ret.addPropertyResult("trainingJobDetails", "TrainingJobDetails", (properties.TrainingJobDetails != null ? CfnModelCardTrainingJobDetailsPropertyFromCloudFormation(properties.TrainingJobDetails) : undefined));
  ret.addPropertyResult("trainingObservations", "TrainingObservations", (properties.TrainingObservations != null ? cfn_parse.FromCloudFormation.getString(properties.TrainingObservations) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MetricDataItemsProperty`
 *
 * @param properties - the TypeScript properties of a `MetricDataItemsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardMetricDataItemsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
  errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
  errors.collect(cdk.propertyValidator("notes", cdk.validateString)(properties.notes));
  errors.collect(cdk.propertyValidator("type", cdk.requiredValidator)(properties.type));
  errors.collect(cdk.propertyValidator("type", cdk.validateString)(properties.type));
  errors.collect(cdk.propertyValidator("value", cdk.requiredValidator)(properties.value));
  errors.collect(cdk.propertyValidator("value", cdk.validateObject)(properties.value));
  errors.collect(cdk.propertyValidator("xAxisName", cdk.listValidator(cdk.validateString))(properties.xAxisName));
  errors.collect(cdk.propertyValidator("yAxisName", cdk.listValidator(cdk.validateString))(properties.yAxisName));
  return errors.wrap("supplied properties not correct for \"MetricDataItemsProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardMetricDataItemsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardMetricDataItemsPropertyValidator(properties).assertSuccess();
  return {
    "Name": cdk.stringToCloudFormation(properties.name),
    "Notes": cdk.stringToCloudFormation(properties.notes),
    "Type": cdk.stringToCloudFormation(properties.type),
    "Value": cdk.objectToCloudFormation(properties.value),
    "XAxisName": cdk.listMapper(cdk.stringToCloudFormation)(properties.xAxisName),
    "YAxisName": cdk.listMapper(cdk.stringToCloudFormation)(properties.yAxisName)
  };
}

// @ts-ignore TS6133
function CfnModelCardMetricDataItemsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelCard.MetricDataItemsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.MetricDataItemsProperty>();
  ret.addPropertyResult("name", "Name", (properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined));
  ret.addPropertyResult("notes", "Notes", (properties.Notes != null ? cfn_parse.FromCloudFormation.getString(properties.Notes) : undefined));
  ret.addPropertyResult("type", "Type", (properties.Type != null ? cfn_parse.FromCloudFormation.getString(properties.Type) : undefined));
  ret.addPropertyResult("value", "Value", (properties.Value != null ? cfn_parse.FromCloudFormation.getAny(properties.Value) : undefined));
  ret.addPropertyResult("xAxisName", "XAxisName", (properties.XAxisName != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.XAxisName) : undefined));
  ret.addPropertyResult("yAxisName", "YAxisName", (properties.YAxisName != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.YAxisName) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MetricGroupProperty`
 *
 * @param properties - the TypeScript properties of a `MetricGroupProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardMetricGroupPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("metricData", cdk.requiredValidator)(properties.metricData));
  errors.collect(cdk.propertyValidator("metricData", cdk.listValidator(CfnModelCardMetricDataItemsPropertyValidator))(properties.metricData));
  errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
  errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
  return errors.wrap("supplied properties not correct for \"MetricGroupProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardMetricGroupPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardMetricGroupPropertyValidator(properties).assertSuccess();
  return {
    "MetricData": cdk.listMapper(convertCfnModelCardMetricDataItemsPropertyToCloudFormation)(properties.metricData),
    "Name": cdk.stringToCloudFormation(properties.name)
  };
}

// @ts-ignore TS6133
function CfnModelCardMetricGroupPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelCard.MetricGroupProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.MetricGroupProperty>();
  ret.addPropertyResult("metricData", "MetricData", (properties.MetricData != null ? cfn_parse.FromCloudFormation.getArray(CfnModelCardMetricDataItemsPropertyFromCloudFormation)(properties.MetricData) : undefined));
  ret.addPropertyResult("name", "Name", (properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `EvaluationDetailProperty`
 *
 * @param properties - the TypeScript properties of a `EvaluationDetailProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardEvaluationDetailPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("datasets", cdk.listValidator(cdk.validateString))(properties.datasets));
  errors.collect(cdk.propertyValidator("evaluationJobArn", cdk.validateString)(properties.evaluationJobArn));
  errors.collect(cdk.propertyValidator("evaluationObservation", cdk.validateString)(properties.evaluationObservation));
  errors.collect(cdk.propertyValidator("metadata", cdk.hashValidator(cdk.validateString))(properties.metadata));
  errors.collect(cdk.propertyValidator("metricGroups", cdk.listValidator(CfnModelCardMetricGroupPropertyValidator))(properties.metricGroups));
  errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
  errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
  return errors.wrap("supplied properties not correct for \"EvaluationDetailProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardEvaluationDetailPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardEvaluationDetailPropertyValidator(properties).assertSuccess();
  return {
    "Datasets": cdk.listMapper(cdk.stringToCloudFormation)(properties.datasets),
    "EvaluationJobArn": cdk.stringToCloudFormation(properties.evaluationJobArn),
    "EvaluationObservation": cdk.stringToCloudFormation(properties.evaluationObservation),
    "Metadata": cdk.hashMapper(cdk.stringToCloudFormation)(properties.metadata),
    "MetricGroups": cdk.listMapper(convertCfnModelCardMetricGroupPropertyToCloudFormation)(properties.metricGroups),
    "Name": cdk.stringToCloudFormation(properties.name)
  };
}

// @ts-ignore TS6133
function CfnModelCardEvaluationDetailPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelCard.EvaluationDetailProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.EvaluationDetailProperty>();
  ret.addPropertyResult("datasets", "Datasets", (properties.Datasets != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.Datasets) : undefined));
  ret.addPropertyResult("evaluationJobArn", "EvaluationJobArn", (properties.EvaluationJobArn != null ? cfn_parse.FromCloudFormation.getString(properties.EvaluationJobArn) : undefined));
  ret.addPropertyResult("evaluationObservation", "EvaluationObservation", (properties.EvaluationObservation != null ? cfn_parse.FromCloudFormation.getString(properties.EvaluationObservation) : undefined));
  ret.addPropertyResult("metadata", "Metadata", (properties.Metadata != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Metadata) : undefined));
  ret.addPropertyResult("metricGroups", "MetricGroups", (properties.MetricGroups != null ? cfn_parse.FromCloudFormation.getArray(CfnModelCardMetricGroupPropertyFromCloudFormation)(properties.MetricGroups) : undefined));
  ret.addPropertyResult("name", "Name", (properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelPackageCreatorProperty`
 *
 * @param properties - the TypeScript properties of a `ModelPackageCreatorProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardModelPackageCreatorPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("userProfileName", cdk.validateString)(properties.userProfileName));
  return errors.wrap("supplied properties not correct for \"ModelPackageCreatorProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardModelPackageCreatorPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardModelPackageCreatorPropertyValidator(properties).assertSuccess();
  return {
    "UserProfileName": cdk.stringToCloudFormation(properties.userProfileName)
  };
}

// @ts-ignore TS6133
function CfnModelCardModelPackageCreatorPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelCard.ModelPackageCreatorProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.ModelPackageCreatorProperty>();
  ret.addPropertyResult("userProfileName", "UserProfileName", (properties.UserProfileName != null ? cfn_parse.FromCloudFormation.getString(properties.UserProfileName) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `SourceAlgorithmProperty`
 *
 * @param properties - the TypeScript properties of a `SourceAlgorithmProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardSourceAlgorithmPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("algorithmName", cdk.requiredValidator)(properties.algorithmName));
  errors.collect(cdk.propertyValidator("algorithmName", cdk.validateString)(properties.algorithmName));
  errors.collect(cdk.propertyValidator("modelDataUrl", cdk.validateString)(properties.modelDataUrl));
  return errors.wrap("supplied properties not correct for \"SourceAlgorithmProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardSourceAlgorithmPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardSourceAlgorithmPropertyValidator(properties).assertSuccess();
  return {
    "AlgorithmName": cdk.stringToCloudFormation(properties.algorithmName),
    "ModelDataUrl": cdk.stringToCloudFormation(properties.modelDataUrl)
  };
}

// @ts-ignore TS6133
function CfnModelCardSourceAlgorithmPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelCard.SourceAlgorithmProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.SourceAlgorithmProperty>();
  ret.addPropertyResult("algorithmName", "AlgorithmName", (properties.AlgorithmName != null ? cfn_parse.FromCloudFormation.getString(properties.AlgorithmName) : undefined));
  ret.addPropertyResult("modelDataUrl", "ModelDataUrl", (properties.ModelDataUrl != null ? cfn_parse.FromCloudFormation.getString(properties.ModelDataUrl) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ContainerProperty`
 *
 * @param properties - the TypeScript properties of a `ContainerProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardContainerPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("image", cdk.requiredValidator)(properties.image));
  errors.collect(cdk.propertyValidator("image", cdk.validateString)(properties.image));
  errors.collect(cdk.propertyValidator("modelDataUrl", cdk.validateString)(properties.modelDataUrl));
  errors.collect(cdk.propertyValidator("nearestModelName", cdk.validateString)(properties.nearestModelName));
  return errors.wrap("supplied properties not correct for \"ContainerProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardContainerPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardContainerPropertyValidator(properties).assertSuccess();
  return {
    "Image": cdk.stringToCloudFormation(properties.image),
    "ModelDataUrl": cdk.stringToCloudFormation(properties.modelDataUrl),
    "NearestModelName": cdk.stringToCloudFormation(properties.nearestModelName)
  };
}

// @ts-ignore TS6133
function CfnModelCardContainerPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelCard.ContainerProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.ContainerProperty>();
  ret.addPropertyResult("image", "Image", (properties.Image != null ? cfn_parse.FromCloudFormation.getString(properties.Image) : undefined));
  ret.addPropertyResult("modelDataUrl", "ModelDataUrl", (properties.ModelDataUrl != null ? cfn_parse.FromCloudFormation.getString(properties.ModelDataUrl) : undefined));
  ret.addPropertyResult("nearestModelName", "NearestModelName", (properties.NearestModelName != null ? cfn_parse.FromCloudFormation.getString(properties.NearestModelName) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `InferenceSpecificationProperty`
 *
 * @param properties - the TypeScript properties of a `InferenceSpecificationProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardInferenceSpecificationPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("containers", cdk.requiredValidator)(properties.containers));
  errors.collect(cdk.propertyValidator("containers", cdk.listValidator(CfnModelCardContainerPropertyValidator))(properties.containers));
  return errors.wrap("supplied properties not correct for \"InferenceSpecificationProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardInferenceSpecificationPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardInferenceSpecificationPropertyValidator(properties).assertSuccess();
  return {
    "Containers": cdk.listMapper(convertCfnModelCardContainerPropertyToCloudFormation)(properties.containers)
  };
}

// @ts-ignore TS6133
function CfnModelCardInferenceSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelCard.InferenceSpecificationProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.InferenceSpecificationProperty>();
  ret.addPropertyResult("containers", "Containers", (properties.Containers != null ? cfn_parse.FromCloudFormation.getArray(CfnModelCardContainerPropertyFromCloudFormation)(properties.Containers) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelPackageDetailsProperty`
 *
 * @param properties - the TypeScript properties of a `ModelPackageDetailsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardModelPackageDetailsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("approvalDescription", cdk.validateString)(properties.approvalDescription));
  errors.collect(cdk.propertyValidator("createdBy", CfnModelCardModelPackageCreatorPropertyValidator)(properties.createdBy));
  errors.collect(cdk.propertyValidator("domain", cdk.validateString)(properties.domain));
  errors.collect(cdk.propertyValidator("inferenceSpecification", CfnModelCardInferenceSpecificationPropertyValidator)(properties.inferenceSpecification));
  errors.collect(cdk.propertyValidator("modelApprovalStatus", cdk.validateString)(properties.modelApprovalStatus));
  errors.collect(cdk.propertyValidator("modelPackageArn", cdk.validateString)(properties.modelPackageArn));
  errors.collect(cdk.propertyValidator("modelPackageDescription", cdk.validateString)(properties.modelPackageDescription));
  errors.collect(cdk.propertyValidator("modelPackageGroupName", cdk.validateString)(properties.modelPackageGroupName));
  errors.collect(cdk.propertyValidator("modelPackageName", cdk.validateString)(properties.modelPackageName));
  errors.collect(cdk.propertyValidator("modelPackageStatus", cdk.validateString)(properties.modelPackageStatus));
  errors.collect(cdk.propertyValidator("modelPackageVersion", cdk.validateNumber)(properties.modelPackageVersion));
  errors.collect(cdk.propertyValidator("sourceAlgorithms", cdk.listValidator(CfnModelCardSourceAlgorithmPropertyValidator))(properties.sourceAlgorithms));
  errors.collect(cdk.propertyValidator("task", cdk.validateString)(properties.task));
  return errors.wrap("supplied properties not correct for \"ModelPackageDetailsProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardModelPackageDetailsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardModelPackageDetailsPropertyValidator(properties).assertSuccess();
  return {
    "ApprovalDescription": cdk.stringToCloudFormation(properties.approvalDescription),
    "CreatedBy": convertCfnModelCardModelPackageCreatorPropertyToCloudFormation(properties.createdBy),
    "Domain": cdk.stringToCloudFormation(properties.domain),
    "InferenceSpecification": convertCfnModelCardInferenceSpecificationPropertyToCloudFormation(properties.inferenceSpecification),
    "ModelApprovalStatus": cdk.stringToCloudFormation(properties.modelApprovalStatus),
    "ModelPackageArn": cdk.stringToCloudFormation(properties.modelPackageArn),
    "ModelPackageDescription": cdk.stringToCloudFormation(properties.modelPackageDescription),
    "ModelPackageGroupName": cdk.stringToCloudFormation(properties.modelPackageGroupName),
    "ModelPackageName": cdk.stringToCloudFormation(properties.modelPackageName),
    "ModelPackageStatus": cdk.stringToCloudFormation(properties.modelPackageStatus),
    "ModelPackageVersion": cdk.numberToCloudFormation(properties.modelPackageVersion),
    "SourceAlgorithms": cdk.listMapper(convertCfnModelCardSourceAlgorithmPropertyToCloudFormation)(properties.sourceAlgorithms),
    "Task": cdk.stringToCloudFormation(properties.task)
  };
}

// @ts-ignore TS6133
function CfnModelCardModelPackageDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelCard.ModelPackageDetailsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.ModelPackageDetailsProperty>();
  ret.addPropertyResult("approvalDescription", "ApprovalDescription", (properties.ApprovalDescription != null ? cfn_parse.FromCloudFormation.getString(properties.ApprovalDescription) : undefined));
  ret.addPropertyResult("createdBy", "CreatedBy", (properties.CreatedBy != null ? CfnModelCardModelPackageCreatorPropertyFromCloudFormation(properties.CreatedBy) : undefined));
  ret.addPropertyResult("domain", "Domain", (properties.Domain != null ? cfn_parse.FromCloudFormation.getString(properties.Domain) : undefined));
  ret.addPropertyResult("inferenceSpecification", "InferenceSpecification", (properties.InferenceSpecification != null ? CfnModelCardInferenceSpecificationPropertyFromCloudFormation(properties.InferenceSpecification) : undefined));
  ret.addPropertyResult("modelApprovalStatus", "ModelApprovalStatus", (properties.ModelApprovalStatus != null ? cfn_parse.FromCloudFormation.getString(properties.ModelApprovalStatus) : undefined));
  ret.addPropertyResult("modelPackageArn", "ModelPackageArn", (properties.ModelPackageArn != null ? cfn_parse.FromCloudFormation.getString(properties.ModelPackageArn) : undefined));
  ret.addPropertyResult("modelPackageDescription", "ModelPackageDescription", (properties.ModelPackageDescription != null ? cfn_parse.FromCloudFormation.getString(properties.ModelPackageDescription) : undefined));
  ret.addPropertyResult("modelPackageGroupName", "ModelPackageGroupName", (properties.ModelPackageGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.ModelPackageGroupName) : undefined));
  ret.addPropertyResult("modelPackageName", "ModelPackageName", (properties.ModelPackageName != null ? cfn_parse.FromCloudFormation.getString(properties.ModelPackageName) : undefined));
  ret.addPropertyResult("modelPackageStatus", "ModelPackageStatus", (properties.ModelPackageStatus != null ? cfn_parse.FromCloudFormation.getString(properties.ModelPackageStatus) : undefined));
  ret.addPropertyResult("modelPackageVersion", "ModelPackageVersion", (properties.ModelPackageVersion != null ? cfn_parse.FromCloudFormation.getNumber(properties.ModelPackageVersion) : undefined));
  ret.addPropertyResult("sourceAlgorithms", "SourceAlgorithms", (properties.SourceAlgorithms != null ? cfn_parse.FromCloudFormation.getArray(CfnModelCardSourceAlgorithmPropertyFromCloudFormation)(properties.SourceAlgorithms) : undefined));
  ret.addPropertyResult("task", "Task", (properties.Task != null ? cfn_parse.FromCloudFormation.getString(properties.Task) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `BusinessDetailsProperty`
 *
 * @param properties - the TypeScript properties of a `BusinessDetailsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardBusinessDetailsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("businessProblem", cdk.validateString)(properties.businessProblem));
  errors.collect(cdk.propertyValidator("businessStakeholders", cdk.validateString)(properties.businessStakeholders));
  errors.collect(cdk.propertyValidator("lineOfBusiness", cdk.validateString)(properties.lineOfBusiness));
  return errors.wrap("supplied properties not correct for \"BusinessDetailsProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardBusinessDetailsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardBusinessDetailsPropertyValidator(properties).assertSuccess();
  return {
    "BusinessProblem": cdk.stringToCloudFormation(properties.businessProblem),
    "BusinessStakeholders": cdk.stringToCloudFormation(properties.businessStakeholders),
    "LineOfBusiness": cdk.stringToCloudFormation(properties.lineOfBusiness)
  };
}

// @ts-ignore TS6133
function CfnModelCardBusinessDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelCard.BusinessDetailsProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.BusinessDetailsProperty>();
  ret.addPropertyResult("businessProblem", "BusinessProblem", (properties.BusinessProblem != null ? cfn_parse.FromCloudFormation.getString(properties.BusinessProblem) : undefined));
  ret.addPropertyResult("businessStakeholders", "BusinessStakeholders", (properties.BusinessStakeholders != null ? cfn_parse.FromCloudFormation.getString(properties.BusinessStakeholders) : undefined));
  ret.addPropertyResult("lineOfBusiness", "LineOfBusiness", (properties.LineOfBusiness != null ? cfn_parse.FromCloudFormation.getString(properties.LineOfBusiness) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ContentProperty`
 *
 * @param properties - the TypeScript properties of a `ContentProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardContentPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("additionalInformation", CfnModelCardAdditionalInformationPropertyValidator)(properties.additionalInformation));
  errors.collect(cdk.propertyValidator("businessDetails", CfnModelCardBusinessDetailsPropertyValidator)(properties.businessDetails));
  errors.collect(cdk.propertyValidator("evaluationDetails", cdk.listValidator(CfnModelCardEvaluationDetailPropertyValidator))(properties.evaluationDetails));
  errors.collect(cdk.propertyValidator("intendedUses", CfnModelCardIntendedUsesPropertyValidator)(properties.intendedUses));
  errors.collect(cdk.propertyValidator("modelOverview", CfnModelCardModelOverviewPropertyValidator)(properties.modelOverview));
  errors.collect(cdk.propertyValidator("modelPackageDetails", CfnModelCardModelPackageDetailsPropertyValidator)(properties.modelPackageDetails));
  errors.collect(cdk.propertyValidator("trainingDetails", CfnModelCardTrainingDetailsPropertyValidator)(properties.trainingDetails));
  return errors.wrap("supplied properties not correct for \"ContentProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelCardContentPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardContentPropertyValidator(properties).assertSuccess();
  return {
    "AdditionalInformation": convertCfnModelCardAdditionalInformationPropertyToCloudFormation(properties.additionalInformation),
    "BusinessDetails": convertCfnModelCardBusinessDetailsPropertyToCloudFormation(properties.businessDetails),
    "EvaluationDetails": cdk.listMapper(convertCfnModelCardEvaluationDetailPropertyToCloudFormation)(properties.evaluationDetails),
    "IntendedUses": convertCfnModelCardIntendedUsesPropertyToCloudFormation(properties.intendedUses),
    "ModelOverview": convertCfnModelCardModelOverviewPropertyToCloudFormation(properties.modelOverview),
    "ModelPackageDetails": convertCfnModelCardModelPackageDetailsPropertyToCloudFormation(properties.modelPackageDetails),
    "TrainingDetails": convertCfnModelCardTrainingDetailsPropertyToCloudFormation(properties.trainingDetails)
  };
}

// @ts-ignore TS6133
function CfnModelCardContentPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelCard.ContentProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCard.ContentProperty>();
  ret.addPropertyResult("additionalInformation", "AdditionalInformation", (properties.AdditionalInformation != null ? CfnModelCardAdditionalInformationPropertyFromCloudFormation(properties.AdditionalInformation) : undefined));
  ret.addPropertyResult("businessDetails", "BusinessDetails", (properties.BusinessDetails != null ? CfnModelCardBusinessDetailsPropertyFromCloudFormation(properties.BusinessDetails) : undefined));
  ret.addPropertyResult("evaluationDetails", "EvaluationDetails", (properties.EvaluationDetails != null ? cfn_parse.FromCloudFormation.getArray(CfnModelCardEvaluationDetailPropertyFromCloudFormation)(properties.EvaluationDetails) : undefined));
  ret.addPropertyResult("intendedUses", "IntendedUses", (properties.IntendedUses != null ? CfnModelCardIntendedUsesPropertyFromCloudFormation(properties.IntendedUses) : undefined));
  ret.addPropertyResult("modelOverview", "ModelOverview", (properties.ModelOverview != null ? CfnModelCardModelOverviewPropertyFromCloudFormation(properties.ModelOverview) : undefined));
  ret.addPropertyResult("modelPackageDetails", "ModelPackageDetails", (properties.ModelPackageDetails != null ? CfnModelCardModelPackageDetailsPropertyFromCloudFormation(properties.ModelPackageDetails) : undefined));
  ret.addPropertyResult("trainingDetails", "TrainingDetails", (properties.TrainingDetails != null ? CfnModelCardTrainingDetailsPropertyFromCloudFormation(properties.TrainingDetails) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnModelCardProps`
 *
 * @param properties - the TypeScript properties of a `CfnModelCardProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelCardPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("content", cdk.requiredValidator)(properties.content));
  errors.collect(cdk.propertyValidator("content", CfnModelCardContentPropertyValidator)(properties.content));
  errors.collect(cdk.propertyValidator("createdBy", CfnModelCardUserContextPropertyValidator)(properties.createdBy));
  errors.collect(cdk.propertyValidator("lastModifiedBy", CfnModelCardUserContextPropertyValidator)(properties.lastModifiedBy));
  errors.collect(cdk.propertyValidator("modelCardName", cdk.requiredValidator)(properties.modelCardName));
  errors.collect(cdk.propertyValidator("modelCardName", cdk.validateString)(properties.modelCardName));
  errors.collect(cdk.propertyValidator("modelCardStatus", cdk.requiredValidator)(properties.modelCardStatus));
  errors.collect(cdk.propertyValidator("modelCardStatus", cdk.validateString)(properties.modelCardStatus));
  errors.collect(cdk.propertyValidator("securityConfig", CfnModelCardSecurityConfigPropertyValidator)(properties.securityConfig));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  return errors.wrap("supplied properties not correct for \"CfnModelCardProps\"");
}

// @ts-ignore TS6133
function convertCfnModelCardPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelCardPropsValidator(properties).assertSuccess();
  return {
    "Content": convertCfnModelCardContentPropertyToCloudFormation(properties.content),
    "CreatedBy": convertCfnModelCardUserContextPropertyToCloudFormation(properties.createdBy),
    "LastModifiedBy": convertCfnModelCardUserContextPropertyToCloudFormation(properties.lastModifiedBy),
    "ModelCardName": cdk.stringToCloudFormation(properties.modelCardName),
    "ModelCardStatus": cdk.stringToCloudFormation(properties.modelCardStatus),
    "SecurityConfig": convertCfnModelCardSecurityConfigPropertyToCloudFormation(properties.securityConfig),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
  };
}

// @ts-ignore TS6133
function CfnModelCardPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelCardProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelCardProps>();
  ret.addPropertyResult("content", "Content", (properties.Content != null ? CfnModelCardContentPropertyFromCloudFormation(properties.Content) : undefined));
  ret.addPropertyResult("createdBy", "CreatedBy", (properties.CreatedBy != null ? CfnModelCardUserContextPropertyFromCloudFormation(properties.CreatedBy) : undefined));
  ret.addPropertyResult("lastModifiedBy", "LastModifiedBy", (properties.LastModifiedBy != null ? CfnModelCardUserContextPropertyFromCloudFormation(properties.LastModifiedBy) : undefined));
  ret.addPropertyResult("modelCardName", "ModelCardName", (properties.ModelCardName != null ? cfn_parse.FromCloudFormation.getString(properties.ModelCardName) : undefined));
  ret.addPropertyResult("modelCardStatus", "ModelCardStatus", (properties.ModelCardStatus != null ? cfn_parse.FromCloudFormation.getString(properties.ModelCardStatus) : undefined));
  ret.addPropertyResult("securityConfig", "SecurityConfig", (properties.SecurityConfig != null ? CfnModelCardSecurityConfigPropertyFromCloudFormation(properties.SecurityConfig) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Creates the definition for a model explainability job.
 *
 * @cloudformationResource AWS::SageMaker::ModelExplainabilityJobDefinition
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelexplainabilityjobdefinition.html
 */
export class CfnModelExplainabilityJobDefinition extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::ModelExplainabilityJobDefinition";

  /**
   * Build a CfnModelExplainabilityJobDefinition from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnModelExplainabilityJobDefinition {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnModelExplainabilityJobDefinitionPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnModelExplainabilityJobDefinition(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The time when the job definition was created.
   *
   * @cloudformationAttribute CreationTime
   */
  public readonly attrCreationTime: string;

  /**
   * The Amazon Resource Name (ARN) of the job definition.
   *
   * @cloudformationAttribute JobDefinitionArn
   */
  public readonly attrJobDefinitionArn: string;

  /**
   * The name of the endpoint used to run the monitoring job.
   */
  public endpointName?: string;

  /**
   * The name of the model explainability job definition.
   */
  public jobDefinitionName?: string;

  /**
   * Identifies the resources to deploy for a monitoring job.
   */
  public jobResources: cdk.IResolvable | CfnModelExplainabilityJobDefinition.MonitoringResourcesProperty;

  /**
   * Configures the model explainability job to run a specified Docker container image.
   */
  public modelExplainabilityAppSpecification: cdk.IResolvable | CfnModelExplainabilityJobDefinition.ModelExplainabilityAppSpecificationProperty;

  /**
   * The baseline configuration for a model explainability job.
   */
  public modelExplainabilityBaselineConfig?: cdk.IResolvable | CfnModelExplainabilityJobDefinition.ModelExplainabilityBaselineConfigProperty;

  /**
   * Inputs for the model explainability job.
   */
  public modelExplainabilityJobInput: cdk.IResolvable | CfnModelExplainabilityJobDefinition.ModelExplainabilityJobInputProperty;

  /**
   * The output configuration for monitoring jobs.
   */
  public modelExplainabilityJobOutputConfig: cdk.IResolvable | CfnModelExplainabilityJobDefinition.MonitoringOutputConfigProperty;

  /**
   * Networking options for a model explainability job.
   */
  public networkConfig?: cdk.IResolvable | CfnModelExplainabilityJobDefinition.NetworkConfigProperty;

  /**
   * The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
   */
  public roleArn: string;

  /**
   * A time limit for how long the monitoring job is allowed to run before stopping.
   */
  public stoppingCondition?: cdk.IResolvable | CfnModelExplainabilityJobDefinition.StoppingConditionProperty;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * An array of key-value pairs to apply to this resource.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnModelExplainabilityJobDefinitionProps) {
    super(scope, id, {
      "type": CfnModelExplainabilityJobDefinition.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "jobResources", this);
    cdk.requireProperty(props, "modelExplainabilityAppSpecification", this);
    cdk.requireProperty(props, "modelExplainabilityJobInput", this);
    cdk.requireProperty(props, "modelExplainabilityJobOutputConfig", this);
    cdk.requireProperty(props, "roleArn", this);

    this.attrCreationTime = cdk.Token.asString(this.getAtt("CreationTime", cdk.ResolutionTypeHint.STRING));
    this.attrJobDefinitionArn = cdk.Token.asString(this.getAtt("JobDefinitionArn", cdk.ResolutionTypeHint.STRING));
    this.endpointName = props.endpointName;
    this.jobDefinitionName = props.jobDefinitionName;
    this.jobResources = props.jobResources;
    this.modelExplainabilityAppSpecification = props.modelExplainabilityAppSpecification;
    this.modelExplainabilityBaselineConfig = props.modelExplainabilityBaselineConfig;
    this.modelExplainabilityJobInput = props.modelExplainabilityJobInput;
    this.modelExplainabilityJobOutputConfig = props.modelExplainabilityJobOutputConfig;
    this.networkConfig = props.networkConfig;
    this.roleArn = props.roleArn;
    this.stoppingCondition = props.stoppingCondition;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::ModelExplainabilityJobDefinition", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "endpointName": this.endpointName,
      "jobDefinitionName": this.jobDefinitionName,
      "jobResources": this.jobResources,
      "modelExplainabilityAppSpecification": this.modelExplainabilityAppSpecification,
      "modelExplainabilityBaselineConfig": this.modelExplainabilityBaselineConfig,
      "modelExplainabilityJobInput": this.modelExplainabilityJobInput,
      "modelExplainabilityJobOutputConfig": this.modelExplainabilityJobOutputConfig,
      "networkConfig": this.networkConfig,
      "roleArn": this.roleArn,
      "stoppingCondition": this.stoppingCondition,
      "tags": this.tags.renderTags()
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnModelExplainabilityJobDefinition.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnModelExplainabilityJobDefinitionPropsToCloudFormation(props);
  }
}

export namespace CfnModelExplainabilityJobDefinition {
  /**
   * The output configuration for monitoring jobs.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-monitoringoutputconfig.html
   */
  export interface MonitoringOutputConfigProperty {
    /**
     * The AWS Key Management Service ( AWS KMS ) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-monitoringoutputconfig.html#cfn-sagemaker-modelexplainabilityjobdefinition-monitoringoutputconfig-kmskeyid
     */
    readonly kmsKeyId?: string;

    /**
     * Monitoring outputs for monitoring jobs.
     *
     * This is where the output of the periodic monitoring jobs is uploaded.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-monitoringoutputconfig.html#cfn-sagemaker-modelexplainabilityjobdefinition-monitoringoutputconfig-monitoringoutputs
     */
    readonly monitoringOutputs: Array<cdk.IResolvable | CfnModelExplainabilityJobDefinition.MonitoringOutputProperty> | cdk.IResolvable;
  }

  /**
   * The output object for a monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-monitoringoutput.html
   */
  export interface MonitoringOutputProperty {
    /**
     * The Amazon S3 storage location where the results of a monitoring job are saved.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-monitoringoutput.html#cfn-sagemaker-modelexplainabilityjobdefinition-monitoringoutput-s3output
     */
    readonly s3Output: cdk.IResolvable | CfnModelExplainabilityJobDefinition.S3OutputProperty;
  }

  /**
   * The Amazon S3 storage location where the results of a monitoring job are saved.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-s3output.html
   */
  export interface S3OutputProperty {
    /**
     * The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
     *
     * LocalPath is an absolute path for the output data.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-s3output.html#cfn-sagemaker-modelexplainabilityjobdefinition-s3output-localpath
     */
    readonly localPath: string;

    /**
     * Whether to upload the results of the monitoring job continuously or after the job completes.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-s3output.html#cfn-sagemaker-modelexplainabilityjobdefinition-s3output-s3uploadmode
     */
    readonly s3UploadMode?: string;

    /**
     * A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-s3output.html#cfn-sagemaker-modelexplainabilityjobdefinition-s3output-s3uri
     */
    readonly s3Uri: string;
  }

  /**
   * Specifies a limit to how long a model training job or model compilation job can run.
   *
   * It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, SageMaker ends the training or compilation job. Use this API to cap model training costs.
   *
   * To stop a training job, SageMaker sends the algorithm the `SIGTERM` signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
   *
   * The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with `CreateModel` .
   *
   * > The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-stoppingcondition.html
   */
  export interface StoppingConditionProperty {
    /**
     * The maximum length of time, in seconds, that a training or compilation job can run before it is stopped.
     *
     * For compilation jobs, if the job does not complete during this time, a `TimeOut` error is generated. We recommend starting with 900 seconds and increasing as necessary based on your model.
     *
     * For all other jobs, if the job does not complete during this time, SageMaker ends the job. When `RetryStrategy` is specified in the job request, `MaxRuntimeInSeconds` specifies the maximum time for all of the attempts in total, not each individual attempt. The default value is 1 day. The maximum value is 28 days.
     *
     * The maximum time that a `TrainingJob` can run in total, including any time spent publishing metrics or archiving and uploading models after it has been stopped, is 30 days.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-stoppingcondition.html#cfn-sagemaker-modelexplainabilityjobdefinition-stoppingcondition-maxruntimeinseconds
     */
    readonly maxRuntimeInSeconds: number;
  }

  /**
   * The configuration for a baseline model explainability job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-modelexplainabilitybaselineconfig.html
   */
  export interface ModelExplainabilityBaselineConfigProperty {
    /**
     * The name of the baseline model explainability job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-modelexplainabilitybaselineconfig.html#cfn-sagemaker-modelexplainabilityjobdefinition-modelexplainabilitybaselineconfig-baseliningjobname
     */
    readonly baseliningJobName?: string;

    /**
     * The constraints resource for a model explainability job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-modelexplainabilitybaselineconfig.html#cfn-sagemaker-modelexplainabilityjobdefinition-modelexplainabilitybaselineconfig-constraintsresource
     */
    readonly constraintsResource?: CfnModelExplainabilityJobDefinition.ConstraintsResourceProperty | cdk.IResolvable;
  }

  /**
   * Input object for the endpoint.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-constraintsresource.html
   */
  export interface ConstraintsResourceProperty {
    /**
     * The Amazon S3 URI for the constraints resource.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-constraintsresource.html#cfn-sagemaker-modelexplainabilityjobdefinition-constraintsresource-s3uri
     */
    readonly s3Uri?: string;
  }

  /**
   * Identifies the resources to deploy for a monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-monitoringresources.html
   */
  export interface MonitoringResourcesProperty {
    /**
     * The configuration for the cluster resources used to run the processing job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-monitoringresources.html#cfn-sagemaker-modelexplainabilityjobdefinition-monitoringresources-clusterconfig
     */
    readonly clusterConfig: CfnModelExplainabilityJobDefinition.ClusterConfigProperty | cdk.IResolvable;
  }

  /**
   * The configuration for the cluster resources used to run the processing job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-clusterconfig.html
   */
  export interface ClusterConfigProperty {
    /**
     * The number of ML compute instances to use in the model monitoring job.
     *
     * For distributed processing jobs, specify a value greater than 1. The default value is 1.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-clusterconfig.html#cfn-sagemaker-modelexplainabilityjobdefinition-clusterconfig-instancecount
     */
    readonly instanceCount: number;

    /**
     * The ML compute instance type for the processing job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-clusterconfig.html#cfn-sagemaker-modelexplainabilityjobdefinition-clusterconfig-instancetype
     */
    readonly instanceType: string;

    /**
     * The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-clusterconfig.html#cfn-sagemaker-modelexplainabilityjobdefinition-clusterconfig-volumekmskeyid
     */
    readonly volumeKmsKeyId?: string;

    /**
     * The size of the ML storage volume, in gigabytes, that you want to provision.
     *
     * You must specify sufficient ML storage for your scenario.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-clusterconfig.html#cfn-sagemaker-modelexplainabilityjobdefinition-clusterconfig-volumesizeingb
     */
    readonly volumeSizeInGb: number;
  }

  /**
   * Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-networkconfig.html
   */
  export interface NetworkConfigProperty {
    /**
     * Whether to encrypt all communications between distributed processing jobs.
     *
     * Choose `True` to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-networkconfig.html#cfn-sagemaker-modelexplainabilityjobdefinition-networkconfig-enableintercontainertrafficencryption
     */
    readonly enableInterContainerTrafficEncryption?: boolean | cdk.IResolvable;

    /**
     * Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-networkconfig.html#cfn-sagemaker-modelexplainabilityjobdefinition-networkconfig-enablenetworkisolation
     */
    readonly enableNetworkIsolation?: boolean | cdk.IResolvable;

    /**
     * Specifies a VPC that your training jobs and hosted models have access to.
     *
     * Control access to and from your training and model containers by configuring the VPC.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-networkconfig.html#cfn-sagemaker-modelexplainabilityjobdefinition-networkconfig-vpcconfig
     */
    readonly vpcConfig?: cdk.IResolvable | CfnModelExplainabilityJobDefinition.VpcConfigProperty;
  }

  /**
   * Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to.
   *
   * You can control access to and from your resources by configuring a VPC. For more information, see [Give SageMaker Access to Resources in your Amazon VPC](https://docs.aws.amazon.com/https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html) .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-vpcconfig.html
   */
  export interface VpcConfigProperty {
    /**
     * The VPC security group IDs, in the form `sg-xxxxxxxx` .
     *
     * Specify the security groups for the VPC that is specified in the `Subnets` field.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-vpcconfig.html#cfn-sagemaker-modelexplainabilityjobdefinition-vpcconfig-securitygroupids
     */
    readonly securityGroupIds: Array<string>;

    /**
     * The ID of the subnets in the VPC to which you want to connect your training job or model.
     *
     * For information about the availability of specific instance types, see [Supported Instance Types and Availability Zones](https://docs.aws.amazon.com/sagemaker/latest/dg/instance-types-az.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-vpcconfig.html#cfn-sagemaker-modelexplainabilityjobdefinition-vpcconfig-subnets
     */
    readonly subnets: Array<string>;
  }

  /**
   * Inputs for the model explainability job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-modelexplainabilityjobinput.html
   */
  export interface ModelExplainabilityJobInputProperty {
    /**
     * Input object for the batch transform job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-modelexplainabilityjobinput.html#cfn-sagemaker-modelexplainabilityjobdefinition-modelexplainabilityjobinput-batchtransforminput
     */
    readonly batchTransformInput?: CfnModelExplainabilityJobDefinition.BatchTransformInputProperty | cdk.IResolvable;

    /**
     * The endpoint for a monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-modelexplainabilityjobinput.html#cfn-sagemaker-modelexplainabilityjobdefinition-modelexplainabilityjobinput-endpointinput
     */
    readonly endpointInput?: CfnModelExplainabilityJobDefinition.EndpointInputProperty | cdk.IResolvable;
  }

  /**
   * Input object for the batch transform job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-batchtransforminput.html
   */
  export interface BatchTransformInputProperty {
    /**
     * The Amazon S3 location being used to capture the data.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-batchtransforminput.html#cfn-sagemaker-modelexplainabilityjobdefinition-batchtransforminput-datacaptureddestinations3uri
     */
    readonly dataCapturedDestinationS3Uri: string;

    /**
     * The dataset format for your batch transform job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-batchtransforminput.html#cfn-sagemaker-modelexplainabilityjobdefinition-batchtransforminput-datasetformat
     */
    readonly datasetFormat: CfnModelExplainabilityJobDefinition.DatasetFormatProperty | cdk.IResolvable;

    /**
     * The attributes of the input data that are the input features.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-batchtransforminput.html#cfn-sagemaker-modelexplainabilityjobdefinition-batchtransforminput-featuresattribute
     */
    readonly featuresAttribute?: string;

    /**
     * The attribute of the input data that represents the ground truth label.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-batchtransforminput.html#cfn-sagemaker-modelexplainabilityjobdefinition-batchtransforminput-inferenceattribute
     */
    readonly inferenceAttribute?: string;

    /**
     * Path to the filesystem where the batch transform data is available to the container.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-batchtransforminput.html#cfn-sagemaker-modelexplainabilityjobdefinition-batchtransforminput-localpath
     */
    readonly localPath: string;

    /**
     * In a classification problem, the attribute that represents the class probability.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-batchtransforminput.html#cfn-sagemaker-modelexplainabilityjobdefinition-batchtransforminput-probabilityattribute
     */
    readonly probabilityAttribute?: string;

    /**
     * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key.
     *
     * Defaults to `FullyReplicated`
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-batchtransforminput.html#cfn-sagemaker-modelexplainabilityjobdefinition-batchtransforminput-s3datadistributiontype
     */
    readonly s3DataDistributionType?: string;

    /**
     * Whether the `Pipe` or `File` is used as the input mode for transferring data for the monitoring job.
     *
     * `Pipe` mode is recommended for large datasets. `File` mode is useful for small files that fit in memory. Defaults to `File` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-batchtransforminput.html#cfn-sagemaker-modelexplainabilityjobdefinition-batchtransforminput-s3inputmode
     */
    readonly s3InputMode?: string;
  }

  /**
   * The dataset format of the data to monitor.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-datasetformat.html
   */
  export interface DatasetFormatProperty {
    /**
     * The CSV format.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-datasetformat.html#cfn-sagemaker-modelexplainabilityjobdefinition-datasetformat-csv
     */
    readonly csv?: CfnModelExplainabilityJobDefinition.CsvProperty | cdk.IResolvable;

    /**
     * The Json format.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-datasetformat.html#cfn-sagemaker-modelexplainabilityjobdefinition-datasetformat-json
     */
    readonly json?: cdk.IResolvable | CfnModelExplainabilityJobDefinition.JsonProperty;

    /**
     * A flag indicating if the dataset format is Parquet.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-datasetformat.html#cfn-sagemaker-modelexplainabilityjobdefinition-datasetformat-parquet
     */
    readonly parquet?: boolean | cdk.IResolvable;
  }

  /**
   * The CSV format.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-csv.html
   */
  export interface CsvProperty {
    /**
     * A boolean flag indicating if given CSV has header.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-csv.html#cfn-sagemaker-modelexplainabilityjobdefinition-csv-header
     */
    readonly header?: boolean | cdk.IResolvable;
  }

  /**
   * The Json format.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-json.html
   */
  export interface JsonProperty {
    /**
     * A boolean flag indicating if it is JSON line format.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-json.html#cfn-sagemaker-modelexplainabilityjobdefinition-json-line
     */
    readonly line?: boolean | cdk.IResolvable;
  }

  /**
   * Input object for the endpoint.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-endpointinput.html
   */
  export interface EndpointInputProperty {
    /**
     * An endpoint in customer's account which has enabled `DataCaptureConfig` enabled.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-endpointinput.html#cfn-sagemaker-modelexplainabilityjobdefinition-endpointinput-endpointname
     */
    readonly endpointName: string;

    /**
     * The attributes of the input data that are the input features.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-endpointinput.html#cfn-sagemaker-modelexplainabilityjobdefinition-endpointinput-featuresattribute
     */
    readonly featuresAttribute?: string;

    /**
     * The attribute of the input data that represents the ground truth label.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-endpointinput.html#cfn-sagemaker-modelexplainabilityjobdefinition-endpointinput-inferenceattribute
     */
    readonly inferenceAttribute?: string;

    /**
     * Path to the filesystem where the endpoint data is available to the container.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-endpointinput.html#cfn-sagemaker-modelexplainabilityjobdefinition-endpointinput-localpath
     */
    readonly localPath: string;

    /**
     * In a classification problem, the attribute that represents the class probability.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-endpointinput.html#cfn-sagemaker-modelexplainabilityjobdefinition-endpointinput-probabilityattribute
     */
    readonly probabilityAttribute?: string;

    /**
     * Whether input data distributed in Amazon S3 is fully replicated or sharded by an Amazon S3 key.
     *
     * Defaults to `FullyReplicated`
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-endpointinput.html#cfn-sagemaker-modelexplainabilityjobdefinition-endpointinput-s3datadistributiontype
     */
    readonly s3DataDistributionType?: string;

    /**
     * Whether the `Pipe` or `File` is used as the input mode for transferring data for the monitoring job.
     *
     * `Pipe` mode is recommended for large datasets. `File` mode is useful for small files that fit in memory. Defaults to `File` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-endpointinput.html#cfn-sagemaker-modelexplainabilityjobdefinition-endpointinput-s3inputmode
     */
    readonly s3InputMode?: string;
  }

  /**
   * Docker container image configuration object for the model explainability job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-modelexplainabilityappspecification.html
   */
  export interface ModelExplainabilityAppSpecificationProperty {
    /**
     * JSON formatted Amazon S3 file that defines explainability parameters.
     *
     * For more information on this JSON configuration file, see [Configure model explainability parameters](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-config-json-monitor-model-explainability-parameters.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-modelexplainabilityappspecification.html#cfn-sagemaker-modelexplainabilityjobdefinition-modelexplainabilityappspecification-configuri
     */
    readonly configUri: string;

    /**
     * Sets the environment variables in the Docker container.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-modelexplainabilityappspecification.html#cfn-sagemaker-modelexplainabilityjobdefinition-modelexplainabilityappspecification-environment
     */
    readonly environment?: cdk.IResolvable | Record<string, string>;

    /**
     * The container image to be run by the model explainability job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-modelexplainabilityappspecification.html#cfn-sagemaker-modelexplainabilityjobdefinition-modelexplainabilityappspecification-imageuri
     */
    readonly imageUri: string;
  }
}

/**
 * Properties for defining a `CfnModelExplainabilityJobDefinition`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelexplainabilityjobdefinition.html
 */
export interface CfnModelExplainabilityJobDefinitionProps {
  /**
   * The name of the endpoint used to run the monitoring job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelexplainabilityjobdefinition.html#cfn-sagemaker-modelexplainabilityjobdefinition-endpointname
   */
  readonly endpointName?: string;

  /**
   * The name of the model explainability job definition.
   *
   * The name must be unique within an AWS Region in the AWS account.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelexplainabilityjobdefinition.html#cfn-sagemaker-modelexplainabilityjobdefinition-jobdefinitionname
   */
  readonly jobDefinitionName?: string;

  /**
   * Identifies the resources to deploy for a monitoring job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelexplainabilityjobdefinition.html#cfn-sagemaker-modelexplainabilityjobdefinition-jobresources
   */
  readonly jobResources: cdk.IResolvable | CfnModelExplainabilityJobDefinition.MonitoringResourcesProperty;

  /**
   * Configures the model explainability job to run a specified Docker container image.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelexplainabilityjobdefinition.html#cfn-sagemaker-modelexplainabilityjobdefinition-modelexplainabilityappspecification
   */
  readonly modelExplainabilityAppSpecification: cdk.IResolvable | CfnModelExplainabilityJobDefinition.ModelExplainabilityAppSpecificationProperty;

  /**
   * The baseline configuration for a model explainability job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelexplainabilityjobdefinition.html#cfn-sagemaker-modelexplainabilityjobdefinition-modelexplainabilitybaselineconfig
   */
  readonly modelExplainabilityBaselineConfig?: cdk.IResolvable | CfnModelExplainabilityJobDefinition.ModelExplainabilityBaselineConfigProperty;

  /**
   * Inputs for the model explainability job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelexplainabilityjobdefinition.html#cfn-sagemaker-modelexplainabilityjobdefinition-modelexplainabilityjobinput
   */
  readonly modelExplainabilityJobInput: cdk.IResolvable | CfnModelExplainabilityJobDefinition.ModelExplainabilityJobInputProperty;

  /**
   * The output configuration for monitoring jobs.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelexplainabilityjobdefinition.html#cfn-sagemaker-modelexplainabilityjobdefinition-modelexplainabilityjoboutputconfig
   */
  readonly modelExplainabilityJobOutputConfig: cdk.IResolvable | CfnModelExplainabilityJobDefinition.MonitoringOutputConfigProperty;

  /**
   * Networking options for a model explainability job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelexplainabilityjobdefinition.html#cfn-sagemaker-modelexplainabilityjobdefinition-networkconfig
   */
  readonly networkConfig?: cdk.IResolvable | CfnModelExplainabilityJobDefinition.NetworkConfigProperty;

  /**
   * The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelexplainabilityjobdefinition.html#cfn-sagemaker-modelexplainabilityjobdefinition-rolearn
   */
  readonly roleArn: string;

  /**
   * A time limit for how long the monitoring job is allowed to run before stopping.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelexplainabilityjobdefinition.html#cfn-sagemaker-modelexplainabilityjobdefinition-stoppingcondition
   */
  readonly stoppingCondition?: cdk.IResolvable | CfnModelExplainabilityJobDefinition.StoppingConditionProperty;

  /**
   * An array of key-value pairs to apply to this resource.
   *
   * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelexplainabilityjobdefinition.html#cfn-sagemaker-modelexplainabilityjobdefinition-tags
   */
  readonly tags?: Array<cdk.CfnTag>;
}

/**
 * Determine whether the given properties match those of a `S3OutputProperty`
 *
 * @param properties - the TypeScript properties of a `S3OutputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionS3OutputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("localPath", cdk.requiredValidator)(properties.localPath));
  errors.collect(cdk.propertyValidator("localPath", cdk.validateString)(properties.localPath));
  errors.collect(cdk.propertyValidator("s3UploadMode", cdk.validateString)(properties.s3UploadMode));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.requiredValidator)(properties.s3Uri));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.validateString)(properties.s3Uri));
  return errors.wrap("supplied properties not correct for \"S3OutputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelExplainabilityJobDefinitionS3OutputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelExplainabilityJobDefinitionS3OutputPropertyValidator(properties).assertSuccess();
  return {
    "LocalPath": cdk.stringToCloudFormation(properties.localPath),
    "S3UploadMode": cdk.stringToCloudFormation(properties.s3UploadMode),
    "S3Uri": cdk.stringToCloudFormation(properties.s3Uri)
  };
}

// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionS3OutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelExplainabilityJobDefinition.S3OutputProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.S3OutputProperty>();
  ret.addPropertyResult("localPath", "LocalPath", (properties.LocalPath != null ? cfn_parse.FromCloudFormation.getString(properties.LocalPath) : undefined));
  ret.addPropertyResult("s3UploadMode", "S3UploadMode", (properties.S3UploadMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3UploadMode) : undefined));
  ret.addPropertyResult("s3Uri", "S3Uri", (properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringOutputProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringOutputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionMonitoringOutputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("s3Output", cdk.requiredValidator)(properties.s3Output));
  errors.collect(cdk.propertyValidator("s3Output", CfnModelExplainabilityJobDefinitionS3OutputPropertyValidator)(properties.s3Output));
  return errors.wrap("supplied properties not correct for \"MonitoringOutputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelExplainabilityJobDefinitionMonitoringOutputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelExplainabilityJobDefinitionMonitoringOutputPropertyValidator(properties).assertSuccess();
  return {
    "S3Output": convertCfnModelExplainabilityJobDefinitionS3OutputPropertyToCloudFormation(properties.s3Output)
  };
}

// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionMonitoringOutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelExplainabilityJobDefinition.MonitoringOutputProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.MonitoringOutputProperty>();
  ret.addPropertyResult("s3Output", "S3Output", (properties.S3Output != null ? CfnModelExplainabilityJobDefinitionS3OutputPropertyFromCloudFormation(properties.S3Output) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringOutputConfigProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringOutputConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionMonitoringOutputConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("kmsKeyId", cdk.validateString)(properties.kmsKeyId));
  errors.collect(cdk.propertyValidator("monitoringOutputs", cdk.requiredValidator)(properties.monitoringOutputs));
  errors.collect(cdk.propertyValidator("monitoringOutputs", cdk.listValidator(CfnModelExplainabilityJobDefinitionMonitoringOutputPropertyValidator))(properties.monitoringOutputs));
  return errors.wrap("supplied properties not correct for \"MonitoringOutputConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelExplainabilityJobDefinitionMonitoringOutputConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelExplainabilityJobDefinitionMonitoringOutputConfigPropertyValidator(properties).assertSuccess();
  return {
    "KmsKeyId": cdk.stringToCloudFormation(properties.kmsKeyId),
    "MonitoringOutputs": cdk.listMapper(convertCfnModelExplainabilityJobDefinitionMonitoringOutputPropertyToCloudFormation)(properties.monitoringOutputs)
  };
}

// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionMonitoringOutputConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelExplainabilityJobDefinition.MonitoringOutputConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.MonitoringOutputConfigProperty>();
  ret.addPropertyResult("kmsKeyId", "KmsKeyId", (properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined));
  ret.addPropertyResult("monitoringOutputs", "MonitoringOutputs", (properties.MonitoringOutputs != null ? cfn_parse.FromCloudFormation.getArray(CfnModelExplainabilityJobDefinitionMonitoringOutputPropertyFromCloudFormation)(properties.MonitoringOutputs) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `StoppingConditionProperty`
 *
 * @param properties - the TypeScript properties of a `StoppingConditionProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionStoppingConditionPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("maxRuntimeInSeconds", cdk.requiredValidator)(properties.maxRuntimeInSeconds));
  errors.collect(cdk.propertyValidator("maxRuntimeInSeconds", cdk.validateNumber)(properties.maxRuntimeInSeconds));
  return errors.wrap("supplied properties not correct for \"StoppingConditionProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelExplainabilityJobDefinitionStoppingConditionPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelExplainabilityJobDefinitionStoppingConditionPropertyValidator(properties).assertSuccess();
  return {
    "MaxRuntimeInSeconds": cdk.numberToCloudFormation(properties.maxRuntimeInSeconds)
  };
}

// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionStoppingConditionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelExplainabilityJobDefinition.StoppingConditionProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.StoppingConditionProperty>();
  ret.addPropertyResult("maxRuntimeInSeconds", "MaxRuntimeInSeconds", (properties.MaxRuntimeInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxRuntimeInSeconds) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ConstraintsResourceProperty`
 *
 * @param properties - the TypeScript properties of a `ConstraintsResourceProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionConstraintsResourcePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("s3Uri", cdk.validateString)(properties.s3Uri));
  return errors.wrap("supplied properties not correct for \"ConstraintsResourceProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelExplainabilityJobDefinitionConstraintsResourcePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelExplainabilityJobDefinitionConstraintsResourcePropertyValidator(properties).assertSuccess();
  return {
    "S3Uri": cdk.stringToCloudFormation(properties.s3Uri)
  };
}

// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionConstraintsResourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinition.ConstraintsResourceProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.ConstraintsResourceProperty>();
  ret.addPropertyResult("s3Uri", "S3Uri", (properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelExplainabilityBaselineConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ModelExplainabilityBaselineConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("baseliningJobName", cdk.validateString)(properties.baseliningJobName));
  errors.collect(cdk.propertyValidator("constraintsResource", CfnModelExplainabilityJobDefinitionConstraintsResourcePropertyValidator)(properties.constraintsResource));
  return errors.wrap("supplied properties not correct for \"ModelExplainabilityBaselineConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigPropertyValidator(properties).assertSuccess();
  return {
    "BaseliningJobName": cdk.stringToCloudFormation(properties.baseliningJobName),
    "ConstraintsResource": convertCfnModelExplainabilityJobDefinitionConstraintsResourcePropertyToCloudFormation(properties.constraintsResource)
  };
}

// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelExplainabilityJobDefinition.ModelExplainabilityBaselineConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.ModelExplainabilityBaselineConfigProperty>();
  ret.addPropertyResult("baseliningJobName", "BaseliningJobName", (properties.BaseliningJobName != null ? cfn_parse.FromCloudFormation.getString(properties.BaseliningJobName) : undefined));
  ret.addPropertyResult("constraintsResource", "ConstraintsResource", (properties.ConstraintsResource != null ? CfnModelExplainabilityJobDefinitionConstraintsResourcePropertyFromCloudFormation(properties.ConstraintsResource) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ClusterConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ClusterConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionClusterConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("instanceCount", cdk.requiredValidator)(properties.instanceCount));
  errors.collect(cdk.propertyValidator("instanceCount", cdk.validateNumber)(properties.instanceCount));
  errors.collect(cdk.propertyValidator("instanceType", cdk.requiredValidator)(properties.instanceType));
  errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
  errors.collect(cdk.propertyValidator("volumeKmsKeyId", cdk.validateString)(properties.volumeKmsKeyId));
  errors.collect(cdk.propertyValidator("volumeSizeInGb", cdk.requiredValidator)(properties.volumeSizeInGb));
  errors.collect(cdk.propertyValidator("volumeSizeInGb", cdk.validateNumber)(properties.volumeSizeInGb));
  return errors.wrap("supplied properties not correct for \"ClusterConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelExplainabilityJobDefinitionClusterConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelExplainabilityJobDefinitionClusterConfigPropertyValidator(properties).assertSuccess();
  return {
    "InstanceCount": cdk.numberToCloudFormation(properties.instanceCount),
    "InstanceType": cdk.stringToCloudFormation(properties.instanceType),
    "VolumeKmsKeyId": cdk.stringToCloudFormation(properties.volumeKmsKeyId),
    "VolumeSizeInGB": cdk.numberToCloudFormation(properties.volumeSizeInGb)
  };
}

// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionClusterConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinition.ClusterConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.ClusterConfigProperty>();
  ret.addPropertyResult("instanceCount", "InstanceCount", (properties.InstanceCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.InstanceCount) : undefined));
  ret.addPropertyResult("instanceType", "InstanceType", (properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined));
  ret.addPropertyResult("volumeKmsKeyId", "VolumeKmsKeyId", (properties.VolumeKmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeKmsKeyId) : undefined));
  ret.addPropertyResult("volumeSizeInGb", "VolumeSizeInGB", (properties.VolumeSizeInGB != null ? cfn_parse.FromCloudFormation.getNumber(properties.VolumeSizeInGB) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringResourcesProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringResourcesProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionMonitoringResourcesPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("clusterConfig", cdk.requiredValidator)(properties.clusterConfig));
  errors.collect(cdk.propertyValidator("clusterConfig", CfnModelExplainabilityJobDefinitionClusterConfigPropertyValidator)(properties.clusterConfig));
  return errors.wrap("supplied properties not correct for \"MonitoringResourcesProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelExplainabilityJobDefinitionMonitoringResourcesPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelExplainabilityJobDefinitionMonitoringResourcesPropertyValidator(properties).assertSuccess();
  return {
    "ClusterConfig": convertCfnModelExplainabilityJobDefinitionClusterConfigPropertyToCloudFormation(properties.clusterConfig)
  };
}

// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionMonitoringResourcesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelExplainabilityJobDefinition.MonitoringResourcesProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.MonitoringResourcesProperty>();
  ret.addPropertyResult("clusterConfig", "ClusterConfig", (properties.ClusterConfig != null ? CfnModelExplainabilityJobDefinitionClusterConfigPropertyFromCloudFormation(properties.ClusterConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `VpcConfigProperty`
 *
 * @param properties - the TypeScript properties of a `VpcConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionVpcConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("securityGroupIds", cdk.requiredValidator)(properties.securityGroupIds));
  errors.collect(cdk.propertyValidator("securityGroupIds", cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
  errors.collect(cdk.propertyValidator("subnets", cdk.requiredValidator)(properties.subnets));
  errors.collect(cdk.propertyValidator("subnets", cdk.listValidator(cdk.validateString))(properties.subnets));
  return errors.wrap("supplied properties not correct for \"VpcConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelExplainabilityJobDefinitionVpcConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelExplainabilityJobDefinitionVpcConfigPropertyValidator(properties).assertSuccess();
  return {
    "SecurityGroupIds": cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
    "Subnets": cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets)
  };
}

// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionVpcConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelExplainabilityJobDefinition.VpcConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.VpcConfigProperty>();
  ret.addPropertyResult("securityGroupIds", "SecurityGroupIds", (properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SecurityGroupIds) : undefined));
  ret.addPropertyResult("subnets", "Subnets", (properties.Subnets != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.Subnets) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `NetworkConfigProperty`
 *
 * @param properties - the TypeScript properties of a `NetworkConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionNetworkConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("enableInterContainerTrafficEncryption", cdk.validateBoolean)(properties.enableInterContainerTrafficEncryption));
  errors.collect(cdk.propertyValidator("enableNetworkIsolation", cdk.validateBoolean)(properties.enableNetworkIsolation));
  errors.collect(cdk.propertyValidator("vpcConfig", CfnModelExplainabilityJobDefinitionVpcConfigPropertyValidator)(properties.vpcConfig));
  return errors.wrap("supplied properties not correct for \"NetworkConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelExplainabilityJobDefinitionNetworkConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelExplainabilityJobDefinitionNetworkConfigPropertyValidator(properties).assertSuccess();
  return {
    "EnableInterContainerTrafficEncryption": cdk.booleanToCloudFormation(properties.enableInterContainerTrafficEncryption),
    "EnableNetworkIsolation": cdk.booleanToCloudFormation(properties.enableNetworkIsolation),
    "VpcConfig": convertCfnModelExplainabilityJobDefinitionVpcConfigPropertyToCloudFormation(properties.vpcConfig)
  };
}

// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionNetworkConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelExplainabilityJobDefinition.NetworkConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.NetworkConfigProperty>();
  ret.addPropertyResult("enableInterContainerTrafficEncryption", "EnableInterContainerTrafficEncryption", (properties.EnableInterContainerTrafficEncryption != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableInterContainerTrafficEncryption) : undefined));
  ret.addPropertyResult("enableNetworkIsolation", "EnableNetworkIsolation", (properties.EnableNetworkIsolation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableNetworkIsolation) : undefined));
  ret.addPropertyResult("vpcConfig", "VpcConfig", (properties.VpcConfig != null ? CfnModelExplainabilityJobDefinitionVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CsvProperty`
 *
 * @param properties - the TypeScript properties of a `CsvProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionCsvPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("header", cdk.validateBoolean)(properties.header));
  return errors.wrap("supplied properties not correct for \"CsvProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelExplainabilityJobDefinitionCsvPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelExplainabilityJobDefinitionCsvPropertyValidator(properties).assertSuccess();
  return {
    "Header": cdk.booleanToCloudFormation(properties.header)
  };
}

// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionCsvPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinition.CsvProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.CsvProperty>();
  ret.addPropertyResult("header", "Header", (properties.Header != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Header) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `JsonProperty`
 *
 * @param properties - the TypeScript properties of a `JsonProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionJsonPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("line", cdk.validateBoolean)(properties.line));
  return errors.wrap("supplied properties not correct for \"JsonProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelExplainabilityJobDefinitionJsonPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelExplainabilityJobDefinitionJsonPropertyValidator(properties).assertSuccess();
  return {
    "Line": cdk.booleanToCloudFormation(properties.line)
  };
}

// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionJsonPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelExplainabilityJobDefinition.JsonProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.JsonProperty>();
  ret.addPropertyResult("line", "Line", (properties.Line != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Line) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DatasetFormatProperty`
 *
 * @param properties - the TypeScript properties of a `DatasetFormatProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionDatasetFormatPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("csv", CfnModelExplainabilityJobDefinitionCsvPropertyValidator)(properties.csv));
  errors.collect(cdk.propertyValidator("json", CfnModelExplainabilityJobDefinitionJsonPropertyValidator)(properties.json));
  errors.collect(cdk.propertyValidator("parquet", cdk.validateBoolean)(properties.parquet));
  return errors.wrap("supplied properties not correct for \"DatasetFormatProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelExplainabilityJobDefinitionDatasetFormatPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelExplainabilityJobDefinitionDatasetFormatPropertyValidator(properties).assertSuccess();
  return {
    "Csv": convertCfnModelExplainabilityJobDefinitionCsvPropertyToCloudFormation(properties.csv),
    "Json": convertCfnModelExplainabilityJobDefinitionJsonPropertyToCloudFormation(properties.json),
    "Parquet": cdk.booleanToCloudFormation(properties.parquet)
  };
}

// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionDatasetFormatPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinition.DatasetFormatProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.DatasetFormatProperty>();
  ret.addPropertyResult("csv", "Csv", (properties.Csv != null ? CfnModelExplainabilityJobDefinitionCsvPropertyFromCloudFormation(properties.Csv) : undefined));
  ret.addPropertyResult("json", "Json", (properties.Json != null ? CfnModelExplainabilityJobDefinitionJsonPropertyFromCloudFormation(properties.Json) : undefined));
  ret.addPropertyResult("parquet", "Parquet", (properties.Parquet != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Parquet) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `BatchTransformInputProperty`
 *
 * @param properties - the TypeScript properties of a `BatchTransformInputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionBatchTransformInputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("dataCapturedDestinationS3Uri", cdk.requiredValidator)(properties.dataCapturedDestinationS3Uri));
  errors.collect(cdk.propertyValidator("dataCapturedDestinationS3Uri", cdk.validateString)(properties.dataCapturedDestinationS3Uri));
  errors.collect(cdk.propertyValidator("datasetFormat", cdk.requiredValidator)(properties.datasetFormat));
  errors.collect(cdk.propertyValidator("datasetFormat", CfnModelExplainabilityJobDefinitionDatasetFormatPropertyValidator)(properties.datasetFormat));
  errors.collect(cdk.propertyValidator("featuresAttribute", cdk.validateString)(properties.featuresAttribute));
  errors.collect(cdk.propertyValidator("inferenceAttribute", cdk.validateString)(properties.inferenceAttribute));
  errors.collect(cdk.propertyValidator("localPath", cdk.requiredValidator)(properties.localPath));
  errors.collect(cdk.propertyValidator("localPath", cdk.validateString)(properties.localPath));
  errors.collect(cdk.propertyValidator("probabilityAttribute", cdk.validateString)(properties.probabilityAttribute));
  errors.collect(cdk.propertyValidator("s3DataDistributionType", cdk.validateString)(properties.s3DataDistributionType));
  errors.collect(cdk.propertyValidator("s3InputMode", cdk.validateString)(properties.s3InputMode));
  return errors.wrap("supplied properties not correct for \"BatchTransformInputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelExplainabilityJobDefinitionBatchTransformInputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelExplainabilityJobDefinitionBatchTransformInputPropertyValidator(properties).assertSuccess();
  return {
    "DataCapturedDestinationS3Uri": cdk.stringToCloudFormation(properties.dataCapturedDestinationS3Uri),
    "DatasetFormat": convertCfnModelExplainabilityJobDefinitionDatasetFormatPropertyToCloudFormation(properties.datasetFormat),
    "FeaturesAttribute": cdk.stringToCloudFormation(properties.featuresAttribute),
    "InferenceAttribute": cdk.stringToCloudFormation(properties.inferenceAttribute),
    "LocalPath": cdk.stringToCloudFormation(properties.localPath),
    "ProbabilityAttribute": cdk.stringToCloudFormation(properties.probabilityAttribute),
    "S3DataDistributionType": cdk.stringToCloudFormation(properties.s3DataDistributionType),
    "S3InputMode": cdk.stringToCloudFormation(properties.s3InputMode)
  };
}

// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionBatchTransformInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinition.BatchTransformInputProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.BatchTransformInputProperty>();
  ret.addPropertyResult("dataCapturedDestinationS3Uri", "DataCapturedDestinationS3Uri", (properties.DataCapturedDestinationS3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.DataCapturedDestinationS3Uri) : undefined));
  ret.addPropertyResult("datasetFormat", "DatasetFormat", (properties.DatasetFormat != null ? CfnModelExplainabilityJobDefinitionDatasetFormatPropertyFromCloudFormation(properties.DatasetFormat) : undefined));
  ret.addPropertyResult("featuresAttribute", "FeaturesAttribute", (properties.FeaturesAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.FeaturesAttribute) : undefined));
  ret.addPropertyResult("inferenceAttribute", "InferenceAttribute", (properties.InferenceAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.InferenceAttribute) : undefined));
  ret.addPropertyResult("localPath", "LocalPath", (properties.LocalPath != null ? cfn_parse.FromCloudFormation.getString(properties.LocalPath) : undefined));
  ret.addPropertyResult("probabilityAttribute", "ProbabilityAttribute", (properties.ProbabilityAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.ProbabilityAttribute) : undefined));
  ret.addPropertyResult("s3DataDistributionType", "S3DataDistributionType", (properties.S3DataDistributionType != null ? cfn_parse.FromCloudFormation.getString(properties.S3DataDistributionType) : undefined));
  ret.addPropertyResult("s3InputMode", "S3InputMode", (properties.S3InputMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3InputMode) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `EndpointInputProperty`
 *
 * @param properties - the TypeScript properties of a `EndpointInputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionEndpointInputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("endpointName", cdk.requiredValidator)(properties.endpointName));
  errors.collect(cdk.propertyValidator("endpointName", cdk.validateString)(properties.endpointName));
  errors.collect(cdk.propertyValidator("featuresAttribute", cdk.validateString)(properties.featuresAttribute));
  errors.collect(cdk.propertyValidator("inferenceAttribute", cdk.validateString)(properties.inferenceAttribute));
  errors.collect(cdk.propertyValidator("localPath", cdk.requiredValidator)(properties.localPath));
  errors.collect(cdk.propertyValidator("localPath", cdk.validateString)(properties.localPath));
  errors.collect(cdk.propertyValidator("probabilityAttribute", cdk.validateString)(properties.probabilityAttribute));
  errors.collect(cdk.propertyValidator("s3DataDistributionType", cdk.validateString)(properties.s3DataDistributionType));
  errors.collect(cdk.propertyValidator("s3InputMode", cdk.validateString)(properties.s3InputMode));
  return errors.wrap("supplied properties not correct for \"EndpointInputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelExplainabilityJobDefinitionEndpointInputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelExplainabilityJobDefinitionEndpointInputPropertyValidator(properties).assertSuccess();
  return {
    "EndpointName": cdk.stringToCloudFormation(properties.endpointName),
    "FeaturesAttribute": cdk.stringToCloudFormation(properties.featuresAttribute),
    "InferenceAttribute": cdk.stringToCloudFormation(properties.inferenceAttribute),
    "LocalPath": cdk.stringToCloudFormation(properties.localPath),
    "ProbabilityAttribute": cdk.stringToCloudFormation(properties.probabilityAttribute),
    "S3DataDistributionType": cdk.stringToCloudFormation(properties.s3DataDistributionType),
    "S3InputMode": cdk.stringToCloudFormation(properties.s3InputMode)
  };
}

// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionEndpointInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinition.EndpointInputProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.EndpointInputProperty>();
  ret.addPropertyResult("endpointName", "EndpointName", (properties.EndpointName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointName) : undefined));
  ret.addPropertyResult("featuresAttribute", "FeaturesAttribute", (properties.FeaturesAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.FeaturesAttribute) : undefined));
  ret.addPropertyResult("inferenceAttribute", "InferenceAttribute", (properties.InferenceAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.InferenceAttribute) : undefined));
  ret.addPropertyResult("localPath", "LocalPath", (properties.LocalPath != null ? cfn_parse.FromCloudFormation.getString(properties.LocalPath) : undefined));
  ret.addPropertyResult("probabilityAttribute", "ProbabilityAttribute", (properties.ProbabilityAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.ProbabilityAttribute) : undefined));
  ret.addPropertyResult("s3DataDistributionType", "S3DataDistributionType", (properties.S3DataDistributionType != null ? cfn_parse.FromCloudFormation.getString(properties.S3DataDistributionType) : undefined));
  ret.addPropertyResult("s3InputMode", "S3InputMode", (properties.S3InputMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3InputMode) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelExplainabilityJobInputProperty`
 *
 * @param properties - the TypeScript properties of a `ModelExplainabilityJobInputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionModelExplainabilityJobInputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("batchTransformInput", CfnModelExplainabilityJobDefinitionBatchTransformInputPropertyValidator)(properties.batchTransformInput));
  errors.collect(cdk.propertyValidator("endpointInput", CfnModelExplainabilityJobDefinitionEndpointInputPropertyValidator)(properties.endpointInput));
  return errors.wrap("supplied properties not correct for \"ModelExplainabilityJobInputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelExplainabilityJobDefinitionModelExplainabilityJobInputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelExplainabilityJobDefinitionModelExplainabilityJobInputPropertyValidator(properties).assertSuccess();
  return {
    "BatchTransformInput": convertCfnModelExplainabilityJobDefinitionBatchTransformInputPropertyToCloudFormation(properties.batchTransformInput),
    "EndpointInput": convertCfnModelExplainabilityJobDefinitionEndpointInputPropertyToCloudFormation(properties.endpointInput)
  };
}

// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionModelExplainabilityJobInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelExplainabilityJobDefinition.ModelExplainabilityJobInputProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.ModelExplainabilityJobInputProperty>();
  ret.addPropertyResult("batchTransformInput", "BatchTransformInput", (properties.BatchTransformInput != null ? CfnModelExplainabilityJobDefinitionBatchTransformInputPropertyFromCloudFormation(properties.BatchTransformInput) : undefined));
  ret.addPropertyResult("endpointInput", "EndpointInput", (properties.EndpointInput != null ? CfnModelExplainabilityJobDefinitionEndpointInputPropertyFromCloudFormation(properties.EndpointInput) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelExplainabilityAppSpecificationProperty`
 *
 * @param properties - the TypeScript properties of a `ModelExplainabilityAppSpecificationProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionModelExplainabilityAppSpecificationPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("configUri", cdk.requiredValidator)(properties.configUri));
  errors.collect(cdk.propertyValidator("configUri", cdk.validateString)(properties.configUri));
  errors.collect(cdk.propertyValidator("environment", cdk.hashValidator(cdk.validateString))(properties.environment));
  errors.collect(cdk.propertyValidator("imageUri", cdk.requiredValidator)(properties.imageUri));
  errors.collect(cdk.propertyValidator("imageUri", cdk.validateString)(properties.imageUri));
  return errors.wrap("supplied properties not correct for \"ModelExplainabilityAppSpecificationProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelExplainabilityJobDefinitionModelExplainabilityAppSpecificationPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelExplainabilityJobDefinitionModelExplainabilityAppSpecificationPropertyValidator(properties).assertSuccess();
  return {
    "ConfigUri": cdk.stringToCloudFormation(properties.configUri),
    "Environment": cdk.hashMapper(cdk.stringToCloudFormation)(properties.environment),
    "ImageUri": cdk.stringToCloudFormation(properties.imageUri)
  };
}

// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionModelExplainabilityAppSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelExplainabilityJobDefinition.ModelExplainabilityAppSpecificationProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinition.ModelExplainabilityAppSpecificationProperty>();
  ret.addPropertyResult("configUri", "ConfigUri", (properties.ConfigUri != null ? cfn_parse.FromCloudFormation.getString(properties.ConfigUri) : undefined));
  ret.addPropertyResult("environment", "Environment", (properties.Environment != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Environment) : undefined));
  ret.addPropertyResult("imageUri", "ImageUri", (properties.ImageUri != null ? cfn_parse.FromCloudFormation.getString(properties.ImageUri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnModelExplainabilityJobDefinitionProps`
 *
 * @param properties - the TypeScript properties of a `CfnModelExplainabilityJobDefinitionProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("endpointName", cdk.validateString)(properties.endpointName));
  errors.collect(cdk.propertyValidator("jobDefinitionName", cdk.validateString)(properties.jobDefinitionName));
  errors.collect(cdk.propertyValidator("jobResources", cdk.requiredValidator)(properties.jobResources));
  errors.collect(cdk.propertyValidator("jobResources", CfnModelExplainabilityJobDefinitionMonitoringResourcesPropertyValidator)(properties.jobResources));
  errors.collect(cdk.propertyValidator("modelExplainabilityAppSpecification", cdk.requiredValidator)(properties.modelExplainabilityAppSpecification));
  errors.collect(cdk.propertyValidator("modelExplainabilityAppSpecification", CfnModelExplainabilityJobDefinitionModelExplainabilityAppSpecificationPropertyValidator)(properties.modelExplainabilityAppSpecification));
  errors.collect(cdk.propertyValidator("modelExplainabilityBaselineConfig", CfnModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigPropertyValidator)(properties.modelExplainabilityBaselineConfig));
  errors.collect(cdk.propertyValidator("modelExplainabilityJobInput", cdk.requiredValidator)(properties.modelExplainabilityJobInput));
  errors.collect(cdk.propertyValidator("modelExplainabilityJobInput", CfnModelExplainabilityJobDefinitionModelExplainabilityJobInputPropertyValidator)(properties.modelExplainabilityJobInput));
  errors.collect(cdk.propertyValidator("modelExplainabilityJobOutputConfig", cdk.requiredValidator)(properties.modelExplainabilityJobOutputConfig));
  errors.collect(cdk.propertyValidator("modelExplainabilityJobOutputConfig", CfnModelExplainabilityJobDefinitionMonitoringOutputConfigPropertyValidator)(properties.modelExplainabilityJobOutputConfig));
  errors.collect(cdk.propertyValidator("networkConfig", CfnModelExplainabilityJobDefinitionNetworkConfigPropertyValidator)(properties.networkConfig));
  errors.collect(cdk.propertyValidator("roleArn", cdk.requiredValidator)(properties.roleArn));
  errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
  errors.collect(cdk.propertyValidator("stoppingCondition", CfnModelExplainabilityJobDefinitionStoppingConditionPropertyValidator)(properties.stoppingCondition));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  return errors.wrap("supplied properties not correct for \"CfnModelExplainabilityJobDefinitionProps\"");
}

// @ts-ignore TS6133
function convertCfnModelExplainabilityJobDefinitionPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelExplainabilityJobDefinitionPropsValidator(properties).assertSuccess();
  return {
    "EndpointName": cdk.stringToCloudFormation(properties.endpointName),
    "JobDefinitionName": cdk.stringToCloudFormation(properties.jobDefinitionName),
    "JobResources": convertCfnModelExplainabilityJobDefinitionMonitoringResourcesPropertyToCloudFormation(properties.jobResources),
    "ModelExplainabilityAppSpecification": convertCfnModelExplainabilityJobDefinitionModelExplainabilityAppSpecificationPropertyToCloudFormation(properties.modelExplainabilityAppSpecification),
    "ModelExplainabilityBaselineConfig": convertCfnModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigPropertyToCloudFormation(properties.modelExplainabilityBaselineConfig),
    "ModelExplainabilityJobInput": convertCfnModelExplainabilityJobDefinitionModelExplainabilityJobInputPropertyToCloudFormation(properties.modelExplainabilityJobInput),
    "ModelExplainabilityJobOutputConfig": convertCfnModelExplainabilityJobDefinitionMonitoringOutputConfigPropertyToCloudFormation(properties.modelExplainabilityJobOutputConfig),
    "NetworkConfig": convertCfnModelExplainabilityJobDefinitionNetworkConfigPropertyToCloudFormation(properties.networkConfig),
    "RoleArn": cdk.stringToCloudFormation(properties.roleArn),
    "StoppingCondition": convertCfnModelExplainabilityJobDefinitionStoppingConditionPropertyToCloudFormation(properties.stoppingCondition),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
  };
}

// @ts-ignore TS6133
function CfnModelExplainabilityJobDefinitionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelExplainabilityJobDefinitionProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelExplainabilityJobDefinitionProps>();
  ret.addPropertyResult("endpointName", "EndpointName", (properties.EndpointName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointName) : undefined));
  ret.addPropertyResult("jobDefinitionName", "JobDefinitionName", (properties.JobDefinitionName != null ? cfn_parse.FromCloudFormation.getString(properties.JobDefinitionName) : undefined));
  ret.addPropertyResult("jobResources", "JobResources", (properties.JobResources != null ? CfnModelExplainabilityJobDefinitionMonitoringResourcesPropertyFromCloudFormation(properties.JobResources) : undefined));
  ret.addPropertyResult("modelExplainabilityAppSpecification", "ModelExplainabilityAppSpecification", (properties.ModelExplainabilityAppSpecification != null ? CfnModelExplainabilityJobDefinitionModelExplainabilityAppSpecificationPropertyFromCloudFormation(properties.ModelExplainabilityAppSpecification) : undefined));
  ret.addPropertyResult("modelExplainabilityBaselineConfig", "ModelExplainabilityBaselineConfig", (properties.ModelExplainabilityBaselineConfig != null ? CfnModelExplainabilityJobDefinitionModelExplainabilityBaselineConfigPropertyFromCloudFormation(properties.ModelExplainabilityBaselineConfig) : undefined));
  ret.addPropertyResult("modelExplainabilityJobInput", "ModelExplainabilityJobInput", (properties.ModelExplainabilityJobInput != null ? CfnModelExplainabilityJobDefinitionModelExplainabilityJobInputPropertyFromCloudFormation(properties.ModelExplainabilityJobInput) : undefined));
  ret.addPropertyResult("modelExplainabilityJobOutputConfig", "ModelExplainabilityJobOutputConfig", (properties.ModelExplainabilityJobOutputConfig != null ? CfnModelExplainabilityJobDefinitionMonitoringOutputConfigPropertyFromCloudFormation(properties.ModelExplainabilityJobOutputConfig) : undefined));
  ret.addPropertyResult("networkConfig", "NetworkConfig", (properties.NetworkConfig != null ? CfnModelExplainabilityJobDefinitionNetworkConfigPropertyFromCloudFormation(properties.NetworkConfig) : undefined));
  ret.addPropertyResult("roleArn", "RoleArn", (properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined));
  ret.addPropertyResult("stoppingCondition", "StoppingCondition", (properties.StoppingCondition != null ? CfnModelExplainabilityJobDefinitionStoppingConditionPropertyFromCloudFormation(properties.StoppingCondition) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * A versioned model that can be deployed for SageMaker inference.
 *
 * @cloudformationResource AWS::SageMaker::ModelPackage
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html
 */
export class CfnModelPackage extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::ModelPackage";

  /**
   * Build a CfnModelPackage from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnModelPackage {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnModelPackagePropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnModelPackage(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The time that the model package was created.
   *
   * @cloudformationAttribute CreationTime
   */
  public readonly attrCreationTime: string;

  /**
   * The Amazon Resource Name (ARN) of the model package.
   *
   * @cloudformationAttribute ModelPackageArn
   */
  public readonly attrModelPackageArn: string;

  /**
   * The status of the model package. This can be one of the following values.
   *
   * - `PENDING` - The model package creation is pending.
   * - `IN_PROGRESS` - The model package is in the process of being created.
   * - `COMPLETED` - The model package was successfully created.
   * - `FAILED` - The model package creation failed.
   * - `DELETING` - The model package is in the process of being deleted.
   *
   * @cloudformationAttribute ModelPackageStatus
   */
  public readonly attrModelPackageStatus: string;

  /**
   * An array of additional Inference Specification objects.
   */
  public additionalInferenceSpecifications?: Array<CfnModelPackage.AdditionalInferenceSpecificationDefinitionProperty | cdk.IResolvable> | cdk.IResolvable;

  /**
   * An array of additional Inference Specification objects to be added to the existing array.
   */
  public additionalInferenceSpecificationsToAdd?: Array<CfnModelPackage.AdditionalInferenceSpecificationDefinitionProperty | cdk.IResolvable> | cdk.IResolvable;

  /**
   * A description provided when the model approval is set.
   */
  public approvalDescription?: string;

  /**
   * Whether the model package is to be certified to be listed on AWS Marketplace.
   */
  public certifyForMarketplace?: boolean | cdk.IResolvable;

  /**
   * A unique token that guarantees that the call to this API is idempotent.
   */
  public clientToken?: string;

  /**
   * The metadata properties for the model package.
   */
  public customerMetadataProperties?: cdk.IResolvable | Record<string, string>;

  /**
   * The machine learning domain of your model package and its components.
   */
  public domain?: string;

  /**
   * Represents the drift check baselines that can be used when the model monitor is set using the model package.
   */
  public driftCheckBaselines?: CfnModelPackage.DriftCheckBaselinesProperty | cdk.IResolvable;

  /**
   * Defines how to perform inference generation after a training job is run.
   */
  public inferenceSpecification?: CfnModelPackage.InferenceSpecificationProperty | cdk.IResolvable;

  /**
   * The last time the model package was modified.
   */
  public lastModifiedTime?: string;

  /**
   * Metadata properties of the tracking entity, trial, or trial component.
   */
  public metadataProperties?: cdk.IResolvable | CfnModelPackage.MetadataPropertiesProperty;

  /**
   * The approval status of the model. This can be one of the following values.
   */
  public modelApprovalStatus?: string;

  /**
   * Metrics for the model.
   */
  public modelMetrics?: cdk.IResolvable | CfnModelPackage.ModelMetricsProperty;

  /**
   * The description of the model package.
   */
  public modelPackageDescription?: string;

  /**
   * The model group to which the model belongs.
   */
  public modelPackageGroupName?: string;

  /**
   * The name of the model.
   */
  public modelPackageName?: string;

  /**
   * Specifies the validation and image scan statuses of the model package.
   */
  public modelPackageStatusDetails?: cdk.IResolvable | CfnModelPackage.ModelPackageStatusDetailsProperty;

  /**
   * The version number of a versioned model.
   */
  public modelPackageVersion?: number;

  /**
   * The Amazon Simple Storage Service path where the sample payload are stored.
   */
  public samplePayloadUrl?: string;

  /**
   * Indicates if you want to skip model validation.
   */
  public skipModelValidation?: string;

  /**
   * A list of algorithms that were used to create a model package.
   */
  public sourceAlgorithmSpecification?: cdk.IResolvable | CfnModelPackage.SourceAlgorithmSpecificationProperty;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * A list of the tags associated with the model package.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * The machine learning task your model package accomplishes.
   */
  public task?: string;

  /**
   * Specifies batch transform jobs that SageMaker runs to validate your model package.
   */
  public validationSpecification?: cdk.IResolvable | CfnModelPackage.ValidationSpecificationProperty;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnModelPackageProps = {}) {
    super(scope, id, {
      "type": CfnModelPackage.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    this.attrCreationTime = cdk.Token.asString(this.getAtt("CreationTime", cdk.ResolutionTypeHint.STRING));
    this.attrModelPackageArn = cdk.Token.asString(this.getAtt("ModelPackageArn", cdk.ResolutionTypeHint.STRING));
    this.attrModelPackageStatus = cdk.Token.asString(this.getAtt("ModelPackageStatus", cdk.ResolutionTypeHint.STRING));
    this.additionalInferenceSpecifications = props.additionalInferenceSpecifications;
    this.additionalInferenceSpecificationsToAdd = props.additionalInferenceSpecificationsToAdd;
    this.approvalDescription = props.approvalDescription;
    this.certifyForMarketplace = props.certifyForMarketplace;
    this.clientToken = props.clientToken;
    this.customerMetadataProperties = props.customerMetadataProperties;
    this.domain = props.domain;
    this.driftCheckBaselines = props.driftCheckBaselines;
    this.inferenceSpecification = props.inferenceSpecification;
    this.lastModifiedTime = props.lastModifiedTime;
    this.metadataProperties = props.metadataProperties;
    this.modelApprovalStatus = props.modelApprovalStatus;
    this.modelMetrics = props.modelMetrics;
    this.modelPackageDescription = props.modelPackageDescription;
    this.modelPackageGroupName = props.modelPackageGroupName;
    this.modelPackageName = props.modelPackageName;
    this.modelPackageStatusDetails = props.modelPackageStatusDetails;
    this.modelPackageVersion = props.modelPackageVersion;
    this.samplePayloadUrl = props.samplePayloadUrl;
    this.skipModelValidation = props.skipModelValidation;
    this.sourceAlgorithmSpecification = props.sourceAlgorithmSpecification;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::ModelPackage", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
    this.task = props.task;
    this.validationSpecification = props.validationSpecification;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "additionalInferenceSpecifications": this.additionalInferenceSpecifications,
      "additionalInferenceSpecificationsToAdd": this.additionalInferenceSpecificationsToAdd,
      "approvalDescription": this.approvalDescription,
      "certifyForMarketplace": this.certifyForMarketplace,
      "clientToken": this.clientToken,
      "customerMetadataProperties": this.customerMetadataProperties,
      "domain": this.domain,
      "driftCheckBaselines": this.driftCheckBaselines,
      "inferenceSpecification": this.inferenceSpecification,
      "lastModifiedTime": this.lastModifiedTime,
      "metadataProperties": this.metadataProperties,
      "modelApprovalStatus": this.modelApprovalStatus,
      "modelMetrics": this.modelMetrics,
      "modelPackageDescription": this.modelPackageDescription,
      "modelPackageGroupName": this.modelPackageGroupName,
      "modelPackageName": this.modelPackageName,
      "modelPackageStatusDetails": this.modelPackageStatusDetails,
      "modelPackageVersion": this.modelPackageVersion,
      "samplePayloadUrl": this.samplePayloadUrl,
      "skipModelValidation": this.skipModelValidation,
      "sourceAlgorithmSpecification": this.sourceAlgorithmSpecification,
      "tags": this.tags.renderTags(),
      "task": this.task,
      "validationSpecification": this.validationSpecification
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnModelPackage.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnModelPackagePropsToCloudFormation(props);
  }
}

export namespace CfnModelPackage {
  /**
   * Represents the drift check baselines that can be used when the model monitor is set using the model package.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckbaselines.html
   */
  export interface DriftCheckBaselinesProperty {
    /**
     * Represents the drift check bias baselines that can be used when the model monitor is set using the model package.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckbaselines.html#cfn-sagemaker-modelpackage-driftcheckbaselines-bias
     */
    readonly bias?: CfnModelPackage.DriftCheckBiasProperty | cdk.IResolvable;

    /**
     * Represents the drift check explainability baselines that can be used when the model monitor is set using the model package.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckbaselines.html#cfn-sagemaker-modelpackage-driftcheckbaselines-explainability
     */
    readonly explainability?: CfnModelPackage.DriftCheckExplainabilityProperty | cdk.IResolvable;

    /**
     * Represents the drift check model data quality baselines that can be used when the model monitor is set using the model package.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckbaselines.html#cfn-sagemaker-modelpackage-driftcheckbaselines-modeldataquality
     */
    readonly modelDataQuality?: CfnModelPackage.DriftCheckModelDataQualityProperty | cdk.IResolvable;

    /**
     * Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckbaselines.html#cfn-sagemaker-modelpackage-driftcheckbaselines-modelquality
     */
    readonly modelQuality?: CfnModelPackage.DriftCheckModelQualityProperty | cdk.IResolvable;
  }

  /**
   * Represents the drift check data quality baselines that can be used when the model monitor is set using the model package.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckmodeldataquality.html
   */
  export interface DriftCheckModelDataQualityProperty {
    /**
     * The drift check model data quality constraints.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckmodeldataquality.html#cfn-sagemaker-modelpackage-driftcheckmodeldataquality-constraints
     */
    readonly constraints?: cdk.IResolvable | CfnModelPackage.MetricsSourceProperty;

    /**
     * The drift check model data quality statistics.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckmodeldataquality.html#cfn-sagemaker-modelpackage-driftcheckmodeldataquality-statistics
     */
    readonly statistics?: cdk.IResolvable | CfnModelPackage.MetricsSourceProperty;
  }

  /**
   * Details about the metrics source.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-metricssource.html
   */
  export interface MetricsSourceProperty {
    /**
     * The hash key used for the metrics source.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-metricssource.html#cfn-sagemaker-modelpackage-metricssource-contentdigest
     */
    readonly contentDigest?: string;

    /**
     * The metric source content type.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-metricssource.html#cfn-sagemaker-modelpackage-metricssource-contenttype
     */
    readonly contentType: string;

    /**
     * The S3 URI for the metrics source.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-metricssource.html#cfn-sagemaker-modelpackage-metricssource-s3uri
     */
    readonly s3Uri: string;
  }

  /**
   * Represents the drift check bias baselines that can be used when the model monitor is set using the model package.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckbias.html
   */
  export interface DriftCheckBiasProperty {
    /**
     * The bias config file for a model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckbias.html#cfn-sagemaker-modelpackage-driftcheckbias-configfile
     */
    readonly configFile?: CfnModelPackage.FileSourceProperty | cdk.IResolvable;

    /**
     * The post-training constraints.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckbias.html#cfn-sagemaker-modelpackage-driftcheckbias-posttrainingconstraints
     */
    readonly postTrainingConstraints?: cdk.IResolvable | CfnModelPackage.MetricsSourceProperty;

    /**
     * The pre-training constraints.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckbias.html#cfn-sagemaker-modelpackage-driftcheckbias-pretrainingconstraints
     */
    readonly preTrainingConstraints?: cdk.IResolvable | CfnModelPackage.MetricsSourceProperty;
  }

  /**
   * Contains details regarding the file source.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-filesource.html
   */
  export interface FileSourceProperty {
    /**
     * The digest of the file source.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-filesource.html#cfn-sagemaker-modelpackage-filesource-contentdigest
     */
    readonly contentDigest?: string;

    /**
     * The type of content stored in the file source.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-filesource.html#cfn-sagemaker-modelpackage-filesource-contenttype
     */
    readonly contentType?: string;

    /**
     * The Amazon S3 URI for the file source.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-filesource.html#cfn-sagemaker-modelpackage-filesource-s3uri
     */
    readonly s3Uri: string;
  }

  /**
   * Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckmodelquality.html
   */
  export interface DriftCheckModelQualityProperty {
    /**
     * The drift check model quality constraints.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckmodelquality.html#cfn-sagemaker-modelpackage-driftcheckmodelquality-constraints
     */
    readonly constraints?: cdk.IResolvable | CfnModelPackage.MetricsSourceProperty;

    /**
     * The drift check model quality statistics.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckmodelquality.html#cfn-sagemaker-modelpackage-driftcheckmodelquality-statistics
     */
    readonly statistics?: cdk.IResolvable | CfnModelPackage.MetricsSourceProperty;
  }

  /**
   * Represents the drift check explainability baselines that can be used when the model monitor is set using the model package.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckexplainability.html
   */
  export interface DriftCheckExplainabilityProperty {
    /**
     * The explainability config file for the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckexplainability.html#cfn-sagemaker-modelpackage-driftcheckexplainability-configfile
     */
    readonly configFile?: CfnModelPackage.FileSourceProperty | cdk.IResolvable;

    /**
     * The drift check explainability constraints.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckexplainability.html#cfn-sagemaker-modelpackage-driftcheckexplainability-constraints
     */
    readonly constraints?: cdk.IResolvable | CfnModelPackage.MetricsSourceProperty;
  }

  /**
   * Contains metrics captured from a model.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelmetrics.html
   */
  export interface ModelMetricsProperty {
    /**
     * Metrics that measure bais in a model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelmetrics.html#cfn-sagemaker-modelpackage-modelmetrics-bias
     */
    readonly bias?: CfnModelPackage.BiasProperty | cdk.IResolvable;

    /**
     * Metrics that help explain a model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelmetrics.html#cfn-sagemaker-modelpackage-modelmetrics-explainability
     */
    readonly explainability?: CfnModelPackage.ExplainabilityProperty | cdk.IResolvable;

    /**
     * Metrics that measure the quality of the input data for a model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelmetrics.html#cfn-sagemaker-modelpackage-modelmetrics-modeldataquality
     */
    readonly modelDataQuality?: cdk.IResolvable | CfnModelPackage.ModelDataQualityProperty;

    /**
     * Metrics that measure the quality of a model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelmetrics.html#cfn-sagemaker-modelpackage-modelmetrics-modelquality
     */
    readonly modelQuality?: cdk.IResolvable | CfnModelPackage.ModelQualityProperty;
  }

  /**
   * Data quality constraints and statistics for a model.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modeldataquality.html
   */
  export interface ModelDataQualityProperty {
    /**
     * Data quality constraints for a model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modeldataquality.html#cfn-sagemaker-modelpackage-modeldataquality-constraints
     */
    readonly constraints?: cdk.IResolvable | CfnModelPackage.MetricsSourceProperty;

    /**
     * Data quality statistics for a model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modeldataquality.html#cfn-sagemaker-modelpackage-modeldataquality-statistics
     */
    readonly statistics?: cdk.IResolvable | CfnModelPackage.MetricsSourceProperty;
  }

  /**
   * Contains bias metrics for a model.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-bias.html
   */
  export interface BiasProperty {
    /**
     * The post-training bias report for a model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-bias.html#cfn-sagemaker-modelpackage-bias-posttrainingreport
     */
    readonly postTrainingReport?: cdk.IResolvable | CfnModelPackage.MetricsSourceProperty;

    /**
     * The pre-training bias report for a model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-bias.html#cfn-sagemaker-modelpackage-bias-pretrainingreport
     */
    readonly preTrainingReport?: cdk.IResolvable | CfnModelPackage.MetricsSourceProperty;

    /**
     * The bias report for a model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-bias.html#cfn-sagemaker-modelpackage-bias-report
     */
    readonly report?: cdk.IResolvable | CfnModelPackage.MetricsSourceProperty;
  }

  /**
   * Model quality statistics and constraints.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelquality.html
   */
  export interface ModelQualityProperty {
    /**
     * Model quality constraints.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelquality.html#cfn-sagemaker-modelpackage-modelquality-constraints
     */
    readonly constraints?: cdk.IResolvable | CfnModelPackage.MetricsSourceProperty;

    /**
     * Model quality statistics.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelquality.html#cfn-sagemaker-modelpackage-modelquality-statistics
     */
    readonly statistics?: cdk.IResolvable | CfnModelPackage.MetricsSourceProperty;
  }

  /**
   * Contains explainability metrics for a model.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-explainability.html
   */
  export interface ExplainabilityProperty {
    /**
     * The explainability report for a model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-explainability.html#cfn-sagemaker-modelpackage-explainability-report
     */
    readonly report?: cdk.IResolvable | CfnModelPackage.MetricsSourceProperty;
  }

  /**
   * Metadata properties of the tracking entity, trial, or trial component.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-metadataproperties.html
   */
  export interface MetadataPropertiesProperty {
    /**
     * The commit ID.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-metadataproperties.html#cfn-sagemaker-modelpackage-metadataproperties-commitid
     */
    readonly commitId?: string;

    /**
     * The entity this entity was generated by.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-metadataproperties.html#cfn-sagemaker-modelpackage-metadataproperties-generatedby
     */
    readonly generatedBy?: string;

    /**
     * The project ID.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-metadataproperties.html#cfn-sagemaker-modelpackage-metadataproperties-projectid
     */
    readonly projectId?: string;

    /**
     * The repository.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-metadataproperties.html#cfn-sagemaker-modelpackage-metadataproperties-repository
     */
    readonly repository?: string;
  }

  /**
   * Specifies batch transform jobs that SageMaker runs to validate your model package.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-validationspecification.html
   */
  export interface ValidationSpecificationProperty {
    /**
     * An array of `ModelPackageValidationProfile` objects, each of which specifies a batch transform job that SageMaker runs to validate your model package.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-validationspecification.html#cfn-sagemaker-modelpackage-validationspecification-validationprofiles
     */
    readonly validationProfiles: Array<cdk.IResolvable | CfnModelPackage.ValidationProfileProperty> | cdk.IResolvable;

    /**
     * The IAM roles to be used for the validation of the model package.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-validationspecification.html#cfn-sagemaker-modelpackage-validationspecification-validationrole
     */
    readonly validationRole: string;
  }

  /**
   * Contains data, such as the inputs and targeted instance types that are used in the process of validating the model package.
   *
   * The data provided in the validation profile is made available to your buyers on AWS Marketplace.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-validationprofile.html
   */
  export interface ValidationProfileProperty {
    /**
     * The name of the profile for the model package.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-validationprofile.html#cfn-sagemaker-modelpackage-validationprofile-profilename
     */
    readonly profileName: string;

    /**
     * The `TransformJobDefinition` object that describes the transform job used for the validation of the model package.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-validationprofile.html#cfn-sagemaker-modelpackage-validationprofile-transformjobdefinition
     */
    readonly transformJobDefinition: cdk.IResolvable | CfnModelPackage.TransformJobDefinitionProperty;
  }

  /**
   * Defines the input needed to run a transform job using the inference specification specified in the algorithm.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformjobdefinition.html
   */
  export interface TransformJobDefinitionProperty {
    /**
     * A string that determines the number of records included in a single mini-batch.
     *
     * `SingleRecord` means only one record is used per mini-batch. `MultiRecord` means a mini-batch is set to contain as many records that can fit within the `MaxPayloadInMB` limit.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformjobdefinition.html#cfn-sagemaker-modelpackage-transformjobdefinition-batchstrategy
     */
    readonly batchStrategy?: string;

    /**
     * The environment variables to set in the Docker container.
     *
     * We support up to 16 key and values entries in the map.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformjobdefinition.html#cfn-sagemaker-modelpackage-transformjobdefinition-environment
     */
    readonly environment?: cdk.IResolvable | Record<string, string>;

    /**
     * The maximum number of parallel requests that can be sent to each instance in a transform job.
     *
     * The default value is 1.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformjobdefinition.html#cfn-sagemaker-modelpackage-transformjobdefinition-maxconcurrenttransforms
     */
    readonly maxConcurrentTransforms?: number;

    /**
     * The maximum payload size allowed, in MB.
     *
     * A payload is the data portion of a record (without metadata).
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformjobdefinition.html#cfn-sagemaker-modelpackage-transformjobdefinition-maxpayloadinmb
     */
    readonly maxPayloadInMb?: number;

    /**
     * A description of the input source and the way the transform job consumes it.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformjobdefinition.html#cfn-sagemaker-modelpackage-transformjobdefinition-transforminput
     */
    readonly transformInput: cdk.IResolvable | CfnModelPackage.TransformInputProperty;

    /**
     * Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformjobdefinition.html#cfn-sagemaker-modelpackage-transformjobdefinition-transformoutput
     */
    readonly transformOutput: cdk.IResolvable | CfnModelPackage.TransformOutputProperty;

    /**
     * Identifies the ML compute instances for the transform job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformjobdefinition.html#cfn-sagemaker-modelpackage-transformjobdefinition-transformresources
     */
    readonly transformResources: cdk.IResolvable | CfnModelPackage.TransformResourcesProperty;
  }

  /**
   * Describes the resources, including ML instance types and ML instance count, to use for transform job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformresources.html
   */
  export interface TransformResourcesProperty {
    /**
     * The number of ML compute instances to use in the transform job.
     *
     * The default value is `1` , and the maximum is `100` . For distributed transform jobs, specify a value greater than `1` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformresources.html#cfn-sagemaker-modelpackage-transformresources-instancecount
     */
    readonly instanceCount: number;

    /**
     * The ML compute instance type for the transform job.
     *
     * If you are using built-in algorithms to transform moderately sized datasets, we recommend using ml.m4.xlarge or `ml.m5.large` instance types.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformresources.html#cfn-sagemaker-modelpackage-transformresources-instancetype
     */
    readonly instanceType: string;

    /**
     * The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt model data on the storage volume attached to the ML compute instance(s) that run the batch transform job.
     *
     * > Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a `VolumeKmsKeyId` when using an instance type with local storage.
     * >
     * > For a list of instance types that support local instance storage, see [Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes) .
     * >
     * > For more information about local instance storage encryption, see [SSD Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html) .
     *
     * The `VolumeKmsKeyId` can be any of the following formats:
     *
     * - Key ID: `1234abcd-12ab-34cd-56ef-1234567890ab`
     * - Key ARN: `arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`
     * - Alias name: `alias/ExampleAlias`
     * - Alias name ARN: `arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias`
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformresources.html#cfn-sagemaker-modelpackage-transformresources-volumekmskeyid
     */
    readonly volumeKmsKeyId?: string;
  }

  /**
   * Describes the results of a transform job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformoutput.html
   */
  export interface TransformOutputProperty {
    /**
     * The MIME type used to specify the output data.
     *
     * Amazon SageMaker uses the MIME type with each http call to transfer data from the transform job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformoutput.html#cfn-sagemaker-modelpackage-transformoutput-accept
     */
    readonly accept?: string;

    /**
     * Defines how to assemble the results of the transform job as a single S3 object.
     *
     * Choose a format that is most convenient to you. To concatenate the results in binary format, specify `None` . To add a newline character at the end of every transformed record, specify `Line` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformoutput.html#cfn-sagemaker-modelpackage-transformoutput-assemblewith
     */
    readonly assembleWith?: string;

    /**
     * The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
     *
     * The `KmsKeyId` can be any of the following formats:
     *
     * - Key ID: `1234abcd-12ab-34cd-56ef-1234567890ab`
     * - Key ARN: `arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`
     * - Alias name: `alias/ExampleAlias`
     * - Alias name ARN: `arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias`
     *
     * If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account. For more information, see [KMS-Managed Encryption Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html) in the *Amazon Simple Storage Service Developer Guide.*
     *
     * The KMS key policy must grant permission to the IAM role that you specify in your [CreateModel](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html) request. For more information, see [Using Key Policies in AWS KMS](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html) in the *AWS Key Management Service Developer Guide* .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformoutput.html#cfn-sagemaker-modelpackage-transformoutput-kmskeyid
     */
    readonly kmsKeyId?: string;

    /**
     * The Amazon S3 path where you want Amazon SageMaker to store the results of the transform job.
     *
     * For example, `s3://bucket-name/key-name-prefix` .
     *
     * For every S3 object used as input for the transform job, batch transform stores the transformed data with an . `out` suffix in a corresponding subfolder in the location in the output prefix. For example, for the input data stored at `s3://bucket-name/input-name-prefix/dataset01/data.csv` , batch transform stores the transformed data at `s3://bucket-name/output-name-prefix/input-name-prefix/data.csv.out` . Batch transform doesn't upload partially processed objects. For an input S3 object that contains multiple records, it creates an . `out` file only if the transform job succeeds on the entire file. When the input contains multiple S3 objects, the batch transform job processes the listed S3 objects and uploads only the output for successfully processed objects. If any object fails in the transform job batch transform marks the job as failed to prompt investigation.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformoutput.html#cfn-sagemaker-modelpackage-transformoutput-s3outputpath
     */
    readonly s3OutputPath: string;
  }

  /**
   * Describes the input source of a transform job and the way the transform job consumes it.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transforminput.html
   */
  export interface TransformInputProperty {
    /**
     * If your transform data is compressed, specify the compression type.
     *
     * Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is `None` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transforminput.html#cfn-sagemaker-modelpackage-transforminput-compressiontype
     */
    readonly compressionType?: string;

    /**
     * The multipurpose internet mail extension (MIME) type of the data.
     *
     * Amazon SageMaker uses the MIME type with each http call to transfer data to the transform job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transforminput.html#cfn-sagemaker-modelpackage-transforminput-contenttype
     */
    readonly contentType?: string;

    /**
     * Describes the location of the channel data, which is, the S3 location of the input data that the model can consume.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transforminput.html#cfn-sagemaker-modelpackage-transforminput-datasource
     */
    readonly dataSource: CfnModelPackage.DataSourceProperty | cdk.IResolvable;

    /**
     * The method to use to split the transform job's data files into smaller batches.
     *
     * Splitting is necessary when the total size of each object is too large to fit in a single request. You can also use data splitting to improve performance by processing multiple concurrent mini-batches. The default value for `SplitType` is `None` , which indicates that input data files are not split, and request payloads contain the entire contents of an input object. Set the value of this parameter to `Line` to split records on a newline character boundary. `SplitType` also supports a number of record-oriented binary data formats. Currently, the supported record formats are:
     *
     * - RecordIO
     * - TFRecord
     *
     * When splitting is enabled, the size of a mini-batch depends on the values of the `BatchStrategy` and `MaxPayloadInMB` parameters. When the value of `BatchStrategy` is `MultiRecord` , Amazon SageMaker sends the maximum number of records in each request, up to the `MaxPayloadInMB` limit. If the value of `BatchStrategy` is `SingleRecord` , Amazon SageMaker sends individual records in each request.
     *
     * > Some data formats represent a record as a binary payload wrapped with extra padding bytes. When splitting is applied to a binary data format, padding is removed if the value of `BatchStrategy` is set to `SingleRecord` . Padding is not removed if the value of `BatchStrategy` is set to `MultiRecord` .
     * >
     * > For more information about `RecordIO` , see [Create a Dataset Using RecordIO](https://docs.aws.amazon.com/https://mxnet.apache.org/api/faq/recordio) in the MXNet documentation. For more information about `TFRecord` , see [Consuming TFRecord data](https://docs.aws.amazon.com/https://www.tensorflow.org/guide/data#consuming_tfrecord_data) in the TensorFlow documentation.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transforminput.html#cfn-sagemaker-modelpackage-transforminput-splittype
     */
    readonly splitType?: string;
  }

  /**
   * Describes the location of the channel data.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-datasource.html
   */
  export interface DataSourceProperty {
    /**
     * The S3 location of the data source that is associated with a channel.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-datasource.html#cfn-sagemaker-modelpackage-datasource-s3datasource
     */
    readonly s3DataSource: cdk.IResolvable | CfnModelPackage.S3DataSourceProperty;
  }

  /**
   * Describes the S3 data source.
   *
   * Your input bucket must be in the same AWS region as your training job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-s3datasource.html
   */
  export interface S3DataSourceProperty {
    /**
     * If you choose `S3Prefix` , `S3Uri` identifies a key name prefix.
     *
     * SageMaker uses all objects that match the specified key name prefix for model training.
     *
     * If you choose `ManifestFile` , `S3Uri` identifies an object that is a manifest file containing a list of object keys that you want SageMaker to use for model training.
     *
     * If you choose `AugmentedManifestFile` , S3Uri identifies an object that is an augmented manifest file in JSON lines format. This file contains the data you want to use for model training. `AugmentedManifestFile` can only be used if the Channel's input mode is `Pipe` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-s3datasource.html#cfn-sagemaker-modelpackage-s3datasource-s3datatype
     */
    readonly s3DataType: string;

    /**
     * Depending on the value specified for the `S3DataType` , identifies either a key name prefix or a manifest.
     *
     * For example:
     *
     * - A key name prefix might look like this: `s3://bucketname/exampleprefix/`
     * - A manifest might look like this: `s3://bucketname/example.manifest`
     *
     * A manifest is an S3 object which is a JSON file consisting of an array of elements. The first element is a prefix which is followed by one or more suffixes. SageMaker appends the suffix elements to the prefix to get a full set of `S3Uri` . Note that the prefix must be a valid non-empty `S3Uri` that precludes users from specifying a manifest whose individual `S3Uri` is sourced from different S3 buckets.
     *
     * The following code example shows a valid manifest format:
     *
     * `[ {"prefix": "s3://customer_bucket/some/prefix/"},`
     *
     * `"relative/path/to/custdata-1",`
     *
     * `"relative/path/custdata-2",`
     *
     * `...`
     *
     * `"relative/path/custdata-N"`
     *
     * `]`
     *
     * This JSON is equivalent to the following `S3Uri` list:
     *
     * `s3://customer_bucket/some/prefix/relative/path/to/custdata-1`
     *
     * `s3://customer_bucket/some/prefix/relative/path/custdata-2`
     *
     * `...`
     *
     * `s3://customer_bucket/some/prefix/relative/path/custdata-N`
     *
     * The complete set of `S3Uri` in this manifest is the input data for the channel for this data source. The object that each `S3Uri` points to must be readable by the IAM role that SageMaker uses to perform tasks on your behalf.
     *
     * Your input bucket must be located in same AWS region as your training job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-s3datasource.html#cfn-sagemaker-modelpackage-s3datasource-s3uri
     */
    readonly s3Uri: string;
  }

  /**
   * A list of algorithms that were used to create a model package.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-sourcealgorithmspecification.html
   */
  export interface SourceAlgorithmSpecificationProperty {
    /**
     * A list of the algorithms that were used to create a model package.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-sourcealgorithmspecification.html#cfn-sagemaker-modelpackage-sourcealgorithmspecification-sourcealgorithms
     */
    readonly sourceAlgorithms: Array<cdk.IResolvable | CfnModelPackage.SourceAlgorithmProperty> | cdk.IResolvable;
  }

  /**
   * Specifies an algorithm that was used to create the model package.
   *
   * The algorithm must be either an algorithm resource in your SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-sourcealgorithm.html
   */
  export interface SourceAlgorithmProperty {
    /**
     * The name of an algorithm that was used to create the model package.
     *
     * The algorithm must be either an algorithm resource in your SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-sourcealgorithm.html#cfn-sagemaker-modelpackage-sourcealgorithm-algorithmname
     */
    readonly algorithmName: string;

    /**
     * The Amazon S3 path where the model artifacts, which result from model training, are stored.
     *
     * This path must point to a single `gzip` compressed tar archive ( `.tar.gz` suffix).
     *
     * > The model artifacts must be in an S3 bucket that is in the same AWS region as the algorithm.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-sourcealgorithm.html#cfn-sagemaker-modelpackage-sourcealgorithm-modeldataurl
     */
    readonly modelDataUrl?: string;
  }

  /**
   * Specifies the validation and image scan statuses of the model package.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelpackagestatusdetails.html
   */
  export interface ModelPackageStatusDetailsProperty {
    /**
     * The validation status of the model package.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelpackagestatusdetails.html#cfn-sagemaker-modelpackage-modelpackagestatusdetails-validationstatuses
     */
    readonly validationStatuses?: Array<cdk.IResolvable | CfnModelPackage.ModelPackageStatusItemProperty> | cdk.IResolvable;
  }

  /**
   * Represents the overall status of a model package.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelpackagestatusitem.html
   */
  export interface ModelPackageStatusItemProperty {
    /**
     * if the overall status is `Failed` , the reason for the failure.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelpackagestatusitem.html#cfn-sagemaker-modelpackage-modelpackagestatusitem-failurereason
     */
    readonly failureReason?: string;

    /**
     * The name of the model package for which the overall status is being reported.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelpackagestatusitem.html#cfn-sagemaker-modelpackage-modelpackagestatusitem-name
     */
    readonly name: string;

    /**
     * The current status.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelpackagestatusitem.html#cfn-sagemaker-modelpackage-modelpackagestatusitem-status
     */
    readonly status: string;
  }

  /**
   * A structure of additional Inference Specification.
   *
   * Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-additionalinferencespecificationdefinition.html
   */
  export interface AdditionalInferenceSpecificationDefinitionProperty {
    /**
     * The Amazon ECR registry path of the Docker image that contains the inference code.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-additionalinferencespecificationdefinition.html#cfn-sagemaker-modelpackage-additionalinferencespecificationdefinition-containers
     */
    readonly containers: Array<cdk.IResolvable | CfnModelPackage.ModelPackageContainerDefinitionProperty> | cdk.IResolvable;

    /**
     * A description of the additional Inference specification.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-additionalinferencespecificationdefinition.html#cfn-sagemaker-modelpackage-additionalinferencespecificationdefinition-description
     */
    readonly description?: string;

    /**
     * A unique name to identify the additional inference specification.
     *
     * The name must be unique within the list of your additional inference specifications for a particular model package.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-additionalinferencespecificationdefinition.html#cfn-sagemaker-modelpackage-additionalinferencespecificationdefinition-name
     */
    readonly name: string;

    /**
     * The supported MIME types for the input data.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-additionalinferencespecificationdefinition.html#cfn-sagemaker-modelpackage-additionalinferencespecificationdefinition-supportedcontenttypes
     */
    readonly supportedContentTypes?: Array<string>;

    /**
     * A list of the instance types that are used to generate inferences in real-time.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-additionalinferencespecificationdefinition.html#cfn-sagemaker-modelpackage-additionalinferencespecificationdefinition-supportedrealtimeinferenceinstancetypes
     */
    readonly supportedRealtimeInferenceInstanceTypes?: Array<string>;

    /**
     * The supported MIME types for the output data.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-additionalinferencespecificationdefinition.html#cfn-sagemaker-modelpackage-additionalinferencespecificationdefinition-supportedresponsemimetypes
     */
    readonly supportedResponseMimeTypes?: Array<string>;

    /**
     * A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-additionalinferencespecificationdefinition.html#cfn-sagemaker-modelpackage-additionalinferencespecificationdefinition-supportedtransforminstancetypes
     */
    readonly supportedTransformInstanceTypes?: Array<string>;
  }

  /**
   * Describes the Docker container for the model package.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelpackagecontainerdefinition.html
   */
  export interface ModelPackageContainerDefinitionProperty {
    /**
     * The DNS host name for the Docker container.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelpackagecontainerdefinition.html#cfn-sagemaker-modelpackage-modelpackagecontainerdefinition-containerhostname
     */
    readonly containerHostname?: string;

    /**
     * The environment variables to set in the Docker container.
     *
     * Each key and value in the `Environment` string to string map can have length of up to 1024. We support up to 16 entries in the map.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelpackagecontainerdefinition.html#cfn-sagemaker-modelpackage-modelpackagecontainerdefinition-environment
     */
    readonly environment?: cdk.IResolvable | Record<string, string>;

    /**
     * The machine learning framework of the model package container image.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelpackagecontainerdefinition.html#cfn-sagemaker-modelpackage-modelpackagecontainerdefinition-framework
     */
    readonly framework?: string;

    /**
     * The framework version of the Model Package Container Image.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelpackagecontainerdefinition.html#cfn-sagemaker-modelpackage-modelpackagecontainerdefinition-frameworkversion
     */
    readonly frameworkVersion?: string;

    /**
     * The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.
     *
     * If you are using your own custom algorithm instead of an algorithm provided by SageMaker, the inference code must meet SageMaker requirements. SageMaker supports both `registry/repository[:tag]` and `registry/repository[@digest]` image path formats. For more information, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelpackagecontainerdefinition.html#cfn-sagemaker-modelpackage-modelpackagecontainerdefinition-image
     */
    readonly image: string;

    /**
     * An MD5 hash of the training algorithm that identifies the Docker image used for training.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelpackagecontainerdefinition.html#cfn-sagemaker-modelpackage-modelpackagecontainerdefinition-imagedigest
     */
    readonly imageDigest?: string;

    /**
     * The Amazon S3 path where the model artifacts, which result from model training, are stored.
     *
     * This path must point to a single `gzip` compressed tar archive ( `.tar.gz` suffix).
     *
     * > The model artifacts must be in an S3 bucket that is in the same region as the model package.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelpackagecontainerdefinition.html#cfn-sagemaker-modelpackage-modelpackagecontainerdefinition-modeldataurl
     */
    readonly modelDataUrl?: string;

    /**
     * A structure with Model Input details.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelpackagecontainerdefinition.html#cfn-sagemaker-modelpackage-modelpackagecontainerdefinition-modelinput
     */
    readonly modelInput?: any | cdk.IResolvable;

    /**
     * The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model.
     *
     * You can find a list of benchmarked models by calling `ListModelMetadata` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelpackagecontainerdefinition.html#cfn-sagemaker-modelpackage-modelpackagecontainerdefinition-nearestmodelname
     */
    readonly nearestModelName?: string;
  }

  /**
   * Defines how to perform inference generation after a training job is run.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-inferencespecification.html
   */
  export interface InferenceSpecificationProperty {
    /**
     * The Amazon ECR registry path of the Docker image that contains the inference code.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-inferencespecification.html#cfn-sagemaker-modelpackage-inferencespecification-containers
     */
    readonly containers: Array<cdk.IResolvable | CfnModelPackage.ModelPackageContainerDefinitionProperty> | cdk.IResolvable;

    /**
     * The supported MIME types for the input data.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-inferencespecification.html#cfn-sagemaker-modelpackage-inferencespecification-supportedcontenttypes
     */
    readonly supportedContentTypes: Array<string>;

    /**
     * A list of the instance types that are used to generate inferences in real-time.
     *
     * This parameter is required for unversioned models, and optional for versioned models.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-inferencespecification.html#cfn-sagemaker-modelpackage-inferencespecification-supportedrealtimeinferenceinstancetypes
     */
    readonly supportedRealtimeInferenceInstanceTypes?: Array<string>;

    /**
     * The supported MIME types for the output data.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-inferencespecification.html#cfn-sagemaker-modelpackage-inferencespecification-supportedresponsemimetypes
     */
    readonly supportedResponseMimeTypes: Array<string>;

    /**
     * A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
     *
     * This parameter is required for unversioned models, and optional for versioned models.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-inferencespecification.html#cfn-sagemaker-modelpackage-inferencespecification-supportedtransforminstancetypes
     */
    readonly supportedTransformInstanceTypes?: Array<string>;
  }

  /**
   * Input object for the model.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelinput.html
   */
  export interface ModelInputProperty {
    /**
     * The input configuration object for the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelinput.html#cfn-sagemaker-modelpackage-modelinput-datainputconfig
     */
    readonly dataInputConfig: string;
  }
}

/**
 * Properties for defining a `CfnModelPackage`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html
 */
export interface CfnModelPackageProps {
  /**
   * An array of additional Inference Specification objects.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-additionalinferencespecifications
   */
  readonly additionalInferenceSpecifications?: Array<CfnModelPackage.AdditionalInferenceSpecificationDefinitionProperty | cdk.IResolvable> | cdk.IResolvable;

  /**
   * An array of additional Inference Specification objects to be added to the existing array.
   *
   * The total number of additional Inference Specification objects cannot exceed 15. Each additional Inference Specification object specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-additionalinferencespecificationstoadd
   */
  readonly additionalInferenceSpecificationsToAdd?: Array<CfnModelPackage.AdditionalInferenceSpecificationDefinitionProperty | cdk.IResolvable> | cdk.IResolvable;

  /**
   * A description provided when the model approval is set.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-approvaldescription
   */
  readonly approvalDescription?: string;

  /**
   * Whether the model package is to be certified to be listed on AWS Marketplace.
   *
   * For information about listing model packages on AWS Marketplace, see [List Your Algorithm or Model Package on AWS Marketplace](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-mkt-list.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-certifyformarketplace
   */
  readonly certifyForMarketplace?: boolean | cdk.IResolvable;

  /**
   * A unique token that guarantees that the call to this API is idempotent.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-clienttoken
   */
  readonly clientToken?: string;

  /**
   * The metadata properties for the model package.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-customermetadataproperties
   */
  readonly customerMetadataProperties?: cdk.IResolvable | Record<string, string>;

  /**
   * The machine learning domain of your model package and its components.
   *
   * Common machine learning domains include computer vision and natural language processing.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-domain
   */
  readonly domain?: string;

  /**
   * Represents the drift check baselines that can be used when the model monitor is set using the model package.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-driftcheckbaselines
   */
  readonly driftCheckBaselines?: CfnModelPackage.DriftCheckBaselinesProperty | cdk.IResolvable;

  /**
   * Defines how to perform inference generation after a training job is run.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-inferencespecification
   */
  readonly inferenceSpecification?: CfnModelPackage.InferenceSpecificationProperty | cdk.IResolvable;

  /**
   * The last time the model package was modified.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-lastmodifiedtime
   */
  readonly lastModifiedTime?: string;

  /**
   * Metadata properties of the tracking entity, trial, or trial component.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-metadataproperties
   */
  readonly metadataProperties?: cdk.IResolvable | CfnModelPackage.MetadataPropertiesProperty;

  /**
   * The approval status of the model. This can be one of the following values.
   *
   * - `APPROVED` - The model is approved
   * - `REJECTED` - The model is rejected.
   * - `PENDING_MANUAL_APPROVAL` - The model is waiting for manual approval.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-modelapprovalstatus
   */
  readonly modelApprovalStatus?: string;

  /**
   * Metrics for the model.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-modelmetrics
   */
  readonly modelMetrics?: cdk.IResolvable | CfnModelPackage.ModelMetricsProperty;

  /**
   * The description of the model package.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-modelpackagedescription
   */
  readonly modelPackageDescription?: string;

  /**
   * The model group to which the model belongs.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-modelpackagegroupname
   */
  readonly modelPackageGroupName?: string;

  /**
   * The name of the model.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-modelpackagename
   */
  readonly modelPackageName?: string;

  /**
   * Specifies the validation and image scan statuses of the model package.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-modelpackagestatusdetails
   */
  readonly modelPackageStatusDetails?: cdk.IResolvable | CfnModelPackage.ModelPackageStatusDetailsProperty;

  /**
   * The version number of a versioned model.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-modelpackageversion
   */
  readonly modelPackageVersion?: number;

  /**
   * The Amazon Simple Storage Service path where the sample payload are stored.
   *
   * This path must point to a single gzip compressed tar archive (.tar.gz suffix).
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-samplepayloadurl
   */
  readonly samplePayloadUrl?: string;

  /**
   * Indicates if you want to skip model validation.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-skipmodelvalidation
   */
  readonly skipModelValidation?: string;

  /**
   * A list of algorithms that were used to create a model package.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-sourcealgorithmspecification
   */
  readonly sourceAlgorithmSpecification?: cdk.IResolvable | CfnModelPackage.SourceAlgorithmSpecificationProperty;

  /**
   * A list of the tags associated with the model package.
   *
   * For more information, see [Tagging AWS resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the *AWS General Reference Guide* .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-tags
   */
  readonly tags?: Array<cdk.CfnTag>;

  /**
   * The machine learning task your model package accomplishes.
   *
   * Common machine learning tasks include object detection and image classification.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-task
   */
  readonly task?: string;

  /**
   * Specifies batch transform jobs that SageMaker runs to validate your model package.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html#cfn-sagemaker-modelpackage-validationspecification
   */
  readonly validationSpecification?: cdk.IResolvable | CfnModelPackage.ValidationSpecificationProperty;
}

/**
 * Determine whether the given properties match those of a `MetricsSourceProperty`
 *
 * @param properties - the TypeScript properties of a `MetricsSourceProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageMetricsSourcePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("contentDigest", cdk.validateString)(properties.contentDigest));
  errors.collect(cdk.propertyValidator("contentType", cdk.requiredValidator)(properties.contentType));
  errors.collect(cdk.propertyValidator("contentType", cdk.validateString)(properties.contentType));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.requiredValidator)(properties.s3Uri));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.validateString)(properties.s3Uri));
  return errors.wrap("supplied properties not correct for \"MetricsSourceProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageMetricsSourcePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageMetricsSourcePropertyValidator(properties).assertSuccess();
  return {
    "ContentDigest": cdk.stringToCloudFormation(properties.contentDigest),
    "ContentType": cdk.stringToCloudFormation(properties.contentType),
    "S3Uri": cdk.stringToCloudFormation(properties.s3Uri)
  };
}

// @ts-ignore TS6133
function CfnModelPackageMetricsSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelPackage.MetricsSourceProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.MetricsSourceProperty>();
  ret.addPropertyResult("contentDigest", "ContentDigest", (properties.ContentDigest != null ? cfn_parse.FromCloudFormation.getString(properties.ContentDigest) : undefined));
  ret.addPropertyResult("contentType", "ContentType", (properties.ContentType != null ? cfn_parse.FromCloudFormation.getString(properties.ContentType) : undefined));
  ret.addPropertyResult("s3Uri", "S3Uri", (properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DriftCheckModelDataQualityProperty`
 *
 * @param properties - the TypeScript properties of a `DriftCheckModelDataQualityProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageDriftCheckModelDataQualityPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("constraints", CfnModelPackageMetricsSourcePropertyValidator)(properties.constraints));
  errors.collect(cdk.propertyValidator("statistics", CfnModelPackageMetricsSourcePropertyValidator)(properties.statistics));
  return errors.wrap("supplied properties not correct for \"DriftCheckModelDataQualityProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageDriftCheckModelDataQualityPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageDriftCheckModelDataQualityPropertyValidator(properties).assertSuccess();
  return {
    "Constraints": convertCfnModelPackageMetricsSourcePropertyToCloudFormation(properties.constraints),
    "Statistics": convertCfnModelPackageMetricsSourcePropertyToCloudFormation(properties.statistics)
  };
}

// @ts-ignore TS6133
function CfnModelPackageDriftCheckModelDataQualityPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelPackage.DriftCheckModelDataQualityProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.DriftCheckModelDataQualityProperty>();
  ret.addPropertyResult("constraints", "Constraints", (properties.Constraints != null ? CfnModelPackageMetricsSourcePropertyFromCloudFormation(properties.Constraints) : undefined));
  ret.addPropertyResult("statistics", "Statistics", (properties.Statistics != null ? CfnModelPackageMetricsSourcePropertyFromCloudFormation(properties.Statistics) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `FileSourceProperty`
 *
 * @param properties - the TypeScript properties of a `FileSourceProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageFileSourcePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("contentDigest", cdk.validateString)(properties.contentDigest));
  errors.collect(cdk.propertyValidator("contentType", cdk.validateString)(properties.contentType));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.requiredValidator)(properties.s3Uri));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.validateString)(properties.s3Uri));
  return errors.wrap("supplied properties not correct for \"FileSourceProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageFileSourcePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageFileSourcePropertyValidator(properties).assertSuccess();
  return {
    "ContentDigest": cdk.stringToCloudFormation(properties.contentDigest),
    "ContentType": cdk.stringToCloudFormation(properties.contentType),
    "S3Uri": cdk.stringToCloudFormation(properties.s3Uri)
  };
}

// @ts-ignore TS6133
function CfnModelPackageFileSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelPackage.FileSourceProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.FileSourceProperty>();
  ret.addPropertyResult("contentDigest", "ContentDigest", (properties.ContentDigest != null ? cfn_parse.FromCloudFormation.getString(properties.ContentDigest) : undefined));
  ret.addPropertyResult("contentType", "ContentType", (properties.ContentType != null ? cfn_parse.FromCloudFormation.getString(properties.ContentType) : undefined));
  ret.addPropertyResult("s3Uri", "S3Uri", (properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DriftCheckBiasProperty`
 *
 * @param properties - the TypeScript properties of a `DriftCheckBiasProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageDriftCheckBiasPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("configFile", CfnModelPackageFileSourcePropertyValidator)(properties.configFile));
  errors.collect(cdk.propertyValidator("postTrainingConstraints", CfnModelPackageMetricsSourcePropertyValidator)(properties.postTrainingConstraints));
  errors.collect(cdk.propertyValidator("preTrainingConstraints", CfnModelPackageMetricsSourcePropertyValidator)(properties.preTrainingConstraints));
  return errors.wrap("supplied properties not correct for \"DriftCheckBiasProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageDriftCheckBiasPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageDriftCheckBiasPropertyValidator(properties).assertSuccess();
  return {
    "ConfigFile": convertCfnModelPackageFileSourcePropertyToCloudFormation(properties.configFile),
    "PostTrainingConstraints": convertCfnModelPackageMetricsSourcePropertyToCloudFormation(properties.postTrainingConstraints),
    "PreTrainingConstraints": convertCfnModelPackageMetricsSourcePropertyToCloudFormation(properties.preTrainingConstraints)
  };
}

// @ts-ignore TS6133
function CfnModelPackageDriftCheckBiasPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelPackage.DriftCheckBiasProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.DriftCheckBiasProperty>();
  ret.addPropertyResult("configFile", "ConfigFile", (properties.ConfigFile != null ? CfnModelPackageFileSourcePropertyFromCloudFormation(properties.ConfigFile) : undefined));
  ret.addPropertyResult("postTrainingConstraints", "PostTrainingConstraints", (properties.PostTrainingConstraints != null ? CfnModelPackageMetricsSourcePropertyFromCloudFormation(properties.PostTrainingConstraints) : undefined));
  ret.addPropertyResult("preTrainingConstraints", "PreTrainingConstraints", (properties.PreTrainingConstraints != null ? CfnModelPackageMetricsSourcePropertyFromCloudFormation(properties.PreTrainingConstraints) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DriftCheckModelQualityProperty`
 *
 * @param properties - the TypeScript properties of a `DriftCheckModelQualityProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageDriftCheckModelQualityPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("constraints", CfnModelPackageMetricsSourcePropertyValidator)(properties.constraints));
  errors.collect(cdk.propertyValidator("statistics", CfnModelPackageMetricsSourcePropertyValidator)(properties.statistics));
  return errors.wrap("supplied properties not correct for \"DriftCheckModelQualityProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageDriftCheckModelQualityPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageDriftCheckModelQualityPropertyValidator(properties).assertSuccess();
  return {
    "Constraints": convertCfnModelPackageMetricsSourcePropertyToCloudFormation(properties.constraints),
    "Statistics": convertCfnModelPackageMetricsSourcePropertyToCloudFormation(properties.statistics)
  };
}

// @ts-ignore TS6133
function CfnModelPackageDriftCheckModelQualityPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelPackage.DriftCheckModelQualityProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.DriftCheckModelQualityProperty>();
  ret.addPropertyResult("constraints", "Constraints", (properties.Constraints != null ? CfnModelPackageMetricsSourcePropertyFromCloudFormation(properties.Constraints) : undefined));
  ret.addPropertyResult("statistics", "Statistics", (properties.Statistics != null ? CfnModelPackageMetricsSourcePropertyFromCloudFormation(properties.Statistics) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DriftCheckExplainabilityProperty`
 *
 * @param properties - the TypeScript properties of a `DriftCheckExplainabilityProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageDriftCheckExplainabilityPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("configFile", CfnModelPackageFileSourcePropertyValidator)(properties.configFile));
  errors.collect(cdk.propertyValidator("constraints", CfnModelPackageMetricsSourcePropertyValidator)(properties.constraints));
  return errors.wrap("supplied properties not correct for \"DriftCheckExplainabilityProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageDriftCheckExplainabilityPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageDriftCheckExplainabilityPropertyValidator(properties).assertSuccess();
  return {
    "ConfigFile": convertCfnModelPackageFileSourcePropertyToCloudFormation(properties.configFile),
    "Constraints": convertCfnModelPackageMetricsSourcePropertyToCloudFormation(properties.constraints)
  };
}

// @ts-ignore TS6133
function CfnModelPackageDriftCheckExplainabilityPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelPackage.DriftCheckExplainabilityProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.DriftCheckExplainabilityProperty>();
  ret.addPropertyResult("configFile", "ConfigFile", (properties.ConfigFile != null ? CfnModelPackageFileSourcePropertyFromCloudFormation(properties.ConfigFile) : undefined));
  ret.addPropertyResult("constraints", "Constraints", (properties.Constraints != null ? CfnModelPackageMetricsSourcePropertyFromCloudFormation(properties.Constraints) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DriftCheckBaselinesProperty`
 *
 * @param properties - the TypeScript properties of a `DriftCheckBaselinesProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageDriftCheckBaselinesPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("bias", CfnModelPackageDriftCheckBiasPropertyValidator)(properties.bias));
  errors.collect(cdk.propertyValidator("explainability", CfnModelPackageDriftCheckExplainabilityPropertyValidator)(properties.explainability));
  errors.collect(cdk.propertyValidator("modelDataQuality", CfnModelPackageDriftCheckModelDataQualityPropertyValidator)(properties.modelDataQuality));
  errors.collect(cdk.propertyValidator("modelQuality", CfnModelPackageDriftCheckModelQualityPropertyValidator)(properties.modelQuality));
  return errors.wrap("supplied properties not correct for \"DriftCheckBaselinesProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageDriftCheckBaselinesPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageDriftCheckBaselinesPropertyValidator(properties).assertSuccess();
  return {
    "Bias": convertCfnModelPackageDriftCheckBiasPropertyToCloudFormation(properties.bias),
    "Explainability": convertCfnModelPackageDriftCheckExplainabilityPropertyToCloudFormation(properties.explainability),
    "ModelDataQuality": convertCfnModelPackageDriftCheckModelDataQualityPropertyToCloudFormation(properties.modelDataQuality),
    "ModelQuality": convertCfnModelPackageDriftCheckModelQualityPropertyToCloudFormation(properties.modelQuality)
  };
}

// @ts-ignore TS6133
function CfnModelPackageDriftCheckBaselinesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelPackage.DriftCheckBaselinesProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.DriftCheckBaselinesProperty>();
  ret.addPropertyResult("bias", "Bias", (properties.Bias != null ? CfnModelPackageDriftCheckBiasPropertyFromCloudFormation(properties.Bias) : undefined));
  ret.addPropertyResult("explainability", "Explainability", (properties.Explainability != null ? CfnModelPackageDriftCheckExplainabilityPropertyFromCloudFormation(properties.Explainability) : undefined));
  ret.addPropertyResult("modelDataQuality", "ModelDataQuality", (properties.ModelDataQuality != null ? CfnModelPackageDriftCheckModelDataQualityPropertyFromCloudFormation(properties.ModelDataQuality) : undefined));
  ret.addPropertyResult("modelQuality", "ModelQuality", (properties.ModelQuality != null ? CfnModelPackageDriftCheckModelQualityPropertyFromCloudFormation(properties.ModelQuality) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelDataQualityProperty`
 *
 * @param properties - the TypeScript properties of a `ModelDataQualityProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageModelDataQualityPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("constraints", CfnModelPackageMetricsSourcePropertyValidator)(properties.constraints));
  errors.collect(cdk.propertyValidator("statistics", CfnModelPackageMetricsSourcePropertyValidator)(properties.statistics));
  return errors.wrap("supplied properties not correct for \"ModelDataQualityProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageModelDataQualityPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageModelDataQualityPropertyValidator(properties).assertSuccess();
  return {
    "Constraints": convertCfnModelPackageMetricsSourcePropertyToCloudFormation(properties.constraints),
    "Statistics": convertCfnModelPackageMetricsSourcePropertyToCloudFormation(properties.statistics)
  };
}

// @ts-ignore TS6133
function CfnModelPackageModelDataQualityPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelPackage.ModelDataQualityProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.ModelDataQualityProperty>();
  ret.addPropertyResult("constraints", "Constraints", (properties.Constraints != null ? CfnModelPackageMetricsSourcePropertyFromCloudFormation(properties.Constraints) : undefined));
  ret.addPropertyResult("statistics", "Statistics", (properties.Statistics != null ? CfnModelPackageMetricsSourcePropertyFromCloudFormation(properties.Statistics) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `BiasProperty`
 *
 * @param properties - the TypeScript properties of a `BiasProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageBiasPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("postTrainingReport", CfnModelPackageMetricsSourcePropertyValidator)(properties.postTrainingReport));
  errors.collect(cdk.propertyValidator("preTrainingReport", CfnModelPackageMetricsSourcePropertyValidator)(properties.preTrainingReport));
  errors.collect(cdk.propertyValidator("report", CfnModelPackageMetricsSourcePropertyValidator)(properties.report));
  return errors.wrap("supplied properties not correct for \"BiasProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageBiasPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageBiasPropertyValidator(properties).assertSuccess();
  return {
    "PostTrainingReport": convertCfnModelPackageMetricsSourcePropertyToCloudFormation(properties.postTrainingReport),
    "PreTrainingReport": convertCfnModelPackageMetricsSourcePropertyToCloudFormation(properties.preTrainingReport),
    "Report": convertCfnModelPackageMetricsSourcePropertyToCloudFormation(properties.report)
  };
}

// @ts-ignore TS6133
function CfnModelPackageBiasPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelPackage.BiasProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.BiasProperty>();
  ret.addPropertyResult("postTrainingReport", "PostTrainingReport", (properties.PostTrainingReport != null ? CfnModelPackageMetricsSourcePropertyFromCloudFormation(properties.PostTrainingReport) : undefined));
  ret.addPropertyResult("preTrainingReport", "PreTrainingReport", (properties.PreTrainingReport != null ? CfnModelPackageMetricsSourcePropertyFromCloudFormation(properties.PreTrainingReport) : undefined));
  ret.addPropertyResult("report", "Report", (properties.Report != null ? CfnModelPackageMetricsSourcePropertyFromCloudFormation(properties.Report) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelQualityProperty`
 *
 * @param properties - the TypeScript properties of a `ModelQualityProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageModelQualityPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("constraints", CfnModelPackageMetricsSourcePropertyValidator)(properties.constraints));
  errors.collect(cdk.propertyValidator("statistics", CfnModelPackageMetricsSourcePropertyValidator)(properties.statistics));
  return errors.wrap("supplied properties not correct for \"ModelQualityProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageModelQualityPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageModelQualityPropertyValidator(properties).assertSuccess();
  return {
    "Constraints": convertCfnModelPackageMetricsSourcePropertyToCloudFormation(properties.constraints),
    "Statistics": convertCfnModelPackageMetricsSourcePropertyToCloudFormation(properties.statistics)
  };
}

// @ts-ignore TS6133
function CfnModelPackageModelQualityPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelPackage.ModelQualityProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.ModelQualityProperty>();
  ret.addPropertyResult("constraints", "Constraints", (properties.Constraints != null ? CfnModelPackageMetricsSourcePropertyFromCloudFormation(properties.Constraints) : undefined));
  ret.addPropertyResult("statistics", "Statistics", (properties.Statistics != null ? CfnModelPackageMetricsSourcePropertyFromCloudFormation(properties.Statistics) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ExplainabilityProperty`
 *
 * @param properties - the TypeScript properties of a `ExplainabilityProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageExplainabilityPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("report", CfnModelPackageMetricsSourcePropertyValidator)(properties.report));
  return errors.wrap("supplied properties not correct for \"ExplainabilityProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageExplainabilityPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageExplainabilityPropertyValidator(properties).assertSuccess();
  return {
    "Report": convertCfnModelPackageMetricsSourcePropertyToCloudFormation(properties.report)
  };
}

// @ts-ignore TS6133
function CfnModelPackageExplainabilityPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelPackage.ExplainabilityProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.ExplainabilityProperty>();
  ret.addPropertyResult("report", "Report", (properties.Report != null ? CfnModelPackageMetricsSourcePropertyFromCloudFormation(properties.Report) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelMetricsProperty`
 *
 * @param properties - the TypeScript properties of a `ModelMetricsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageModelMetricsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("bias", CfnModelPackageBiasPropertyValidator)(properties.bias));
  errors.collect(cdk.propertyValidator("explainability", CfnModelPackageExplainabilityPropertyValidator)(properties.explainability));
  errors.collect(cdk.propertyValidator("modelDataQuality", CfnModelPackageModelDataQualityPropertyValidator)(properties.modelDataQuality));
  errors.collect(cdk.propertyValidator("modelQuality", CfnModelPackageModelQualityPropertyValidator)(properties.modelQuality));
  return errors.wrap("supplied properties not correct for \"ModelMetricsProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageModelMetricsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageModelMetricsPropertyValidator(properties).assertSuccess();
  return {
    "Bias": convertCfnModelPackageBiasPropertyToCloudFormation(properties.bias),
    "Explainability": convertCfnModelPackageExplainabilityPropertyToCloudFormation(properties.explainability),
    "ModelDataQuality": convertCfnModelPackageModelDataQualityPropertyToCloudFormation(properties.modelDataQuality),
    "ModelQuality": convertCfnModelPackageModelQualityPropertyToCloudFormation(properties.modelQuality)
  };
}

// @ts-ignore TS6133
function CfnModelPackageModelMetricsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelPackage.ModelMetricsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.ModelMetricsProperty>();
  ret.addPropertyResult("bias", "Bias", (properties.Bias != null ? CfnModelPackageBiasPropertyFromCloudFormation(properties.Bias) : undefined));
  ret.addPropertyResult("explainability", "Explainability", (properties.Explainability != null ? CfnModelPackageExplainabilityPropertyFromCloudFormation(properties.Explainability) : undefined));
  ret.addPropertyResult("modelDataQuality", "ModelDataQuality", (properties.ModelDataQuality != null ? CfnModelPackageModelDataQualityPropertyFromCloudFormation(properties.ModelDataQuality) : undefined));
  ret.addPropertyResult("modelQuality", "ModelQuality", (properties.ModelQuality != null ? CfnModelPackageModelQualityPropertyFromCloudFormation(properties.ModelQuality) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MetadataPropertiesProperty`
 *
 * @param properties - the TypeScript properties of a `MetadataPropertiesProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageMetadataPropertiesPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("commitId", cdk.validateString)(properties.commitId));
  errors.collect(cdk.propertyValidator("generatedBy", cdk.validateString)(properties.generatedBy));
  errors.collect(cdk.propertyValidator("projectId", cdk.validateString)(properties.projectId));
  errors.collect(cdk.propertyValidator("repository", cdk.validateString)(properties.repository));
  return errors.wrap("supplied properties not correct for \"MetadataPropertiesProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageMetadataPropertiesPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageMetadataPropertiesPropertyValidator(properties).assertSuccess();
  return {
    "CommitId": cdk.stringToCloudFormation(properties.commitId),
    "GeneratedBy": cdk.stringToCloudFormation(properties.generatedBy),
    "ProjectId": cdk.stringToCloudFormation(properties.projectId),
    "Repository": cdk.stringToCloudFormation(properties.repository)
  };
}

// @ts-ignore TS6133
function CfnModelPackageMetadataPropertiesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelPackage.MetadataPropertiesProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.MetadataPropertiesProperty>();
  ret.addPropertyResult("commitId", "CommitId", (properties.CommitId != null ? cfn_parse.FromCloudFormation.getString(properties.CommitId) : undefined));
  ret.addPropertyResult("generatedBy", "GeneratedBy", (properties.GeneratedBy != null ? cfn_parse.FromCloudFormation.getString(properties.GeneratedBy) : undefined));
  ret.addPropertyResult("projectId", "ProjectId", (properties.ProjectId != null ? cfn_parse.FromCloudFormation.getString(properties.ProjectId) : undefined));
  ret.addPropertyResult("repository", "Repository", (properties.Repository != null ? cfn_parse.FromCloudFormation.getString(properties.Repository) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `TransformResourcesProperty`
 *
 * @param properties - the TypeScript properties of a `TransformResourcesProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageTransformResourcesPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("instanceCount", cdk.requiredValidator)(properties.instanceCount));
  errors.collect(cdk.propertyValidator("instanceCount", cdk.validateNumber)(properties.instanceCount));
  errors.collect(cdk.propertyValidator("instanceType", cdk.requiredValidator)(properties.instanceType));
  errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
  errors.collect(cdk.propertyValidator("volumeKmsKeyId", cdk.validateString)(properties.volumeKmsKeyId));
  return errors.wrap("supplied properties not correct for \"TransformResourcesProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageTransformResourcesPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageTransformResourcesPropertyValidator(properties).assertSuccess();
  return {
    "InstanceCount": cdk.numberToCloudFormation(properties.instanceCount),
    "InstanceType": cdk.stringToCloudFormation(properties.instanceType),
    "VolumeKmsKeyId": cdk.stringToCloudFormation(properties.volumeKmsKeyId)
  };
}

// @ts-ignore TS6133
function CfnModelPackageTransformResourcesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelPackage.TransformResourcesProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.TransformResourcesProperty>();
  ret.addPropertyResult("instanceCount", "InstanceCount", (properties.InstanceCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.InstanceCount) : undefined));
  ret.addPropertyResult("instanceType", "InstanceType", (properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined));
  ret.addPropertyResult("volumeKmsKeyId", "VolumeKmsKeyId", (properties.VolumeKmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeKmsKeyId) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `TransformOutputProperty`
 *
 * @param properties - the TypeScript properties of a `TransformOutputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageTransformOutputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("accept", cdk.validateString)(properties.accept));
  errors.collect(cdk.propertyValidator("assembleWith", cdk.validateString)(properties.assembleWith));
  errors.collect(cdk.propertyValidator("kmsKeyId", cdk.validateString)(properties.kmsKeyId));
  errors.collect(cdk.propertyValidator("s3OutputPath", cdk.requiredValidator)(properties.s3OutputPath));
  errors.collect(cdk.propertyValidator("s3OutputPath", cdk.validateString)(properties.s3OutputPath));
  return errors.wrap("supplied properties not correct for \"TransformOutputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageTransformOutputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageTransformOutputPropertyValidator(properties).assertSuccess();
  return {
    "Accept": cdk.stringToCloudFormation(properties.accept),
    "AssembleWith": cdk.stringToCloudFormation(properties.assembleWith),
    "KmsKeyId": cdk.stringToCloudFormation(properties.kmsKeyId),
    "S3OutputPath": cdk.stringToCloudFormation(properties.s3OutputPath)
  };
}

// @ts-ignore TS6133
function CfnModelPackageTransformOutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelPackage.TransformOutputProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.TransformOutputProperty>();
  ret.addPropertyResult("accept", "Accept", (properties.Accept != null ? cfn_parse.FromCloudFormation.getString(properties.Accept) : undefined));
  ret.addPropertyResult("assembleWith", "AssembleWith", (properties.AssembleWith != null ? cfn_parse.FromCloudFormation.getString(properties.AssembleWith) : undefined));
  ret.addPropertyResult("kmsKeyId", "KmsKeyId", (properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined));
  ret.addPropertyResult("s3OutputPath", "S3OutputPath", (properties.S3OutputPath != null ? cfn_parse.FromCloudFormation.getString(properties.S3OutputPath) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `S3DataSourceProperty`
 *
 * @param properties - the TypeScript properties of a `S3DataSourceProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageS3DataSourcePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("s3DataType", cdk.requiredValidator)(properties.s3DataType));
  errors.collect(cdk.propertyValidator("s3DataType", cdk.validateString)(properties.s3DataType));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.requiredValidator)(properties.s3Uri));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.validateString)(properties.s3Uri));
  return errors.wrap("supplied properties not correct for \"S3DataSourceProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageS3DataSourcePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageS3DataSourcePropertyValidator(properties).assertSuccess();
  return {
    "S3DataType": cdk.stringToCloudFormation(properties.s3DataType),
    "S3Uri": cdk.stringToCloudFormation(properties.s3Uri)
  };
}

// @ts-ignore TS6133
function CfnModelPackageS3DataSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelPackage.S3DataSourceProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.S3DataSourceProperty>();
  ret.addPropertyResult("s3DataType", "S3DataType", (properties.S3DataType != null ? cfn_parse.FromCloudFormation.getString(properties.S3DataType) : undefined));
  ret.addPropertyResult("s3Uri", "S3Uri", (properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DataSourceProperty`
 *
 * @param properties - the TypeScript properties of a `DataSourceProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageDataSourcePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("s3DataSource", cdk.requiredValidator)(properties.s3DataSource));
  errors.collect(cdk.propertyValidator("s3DataSource", CfnModelPackageS3DataSourcePropertyValidator)(properties.s3DataSource));
  return errors.wrap("supplied properties not correct for \"DataSourceProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageDataSourcePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageDataSourcePropertyValidator(properties).assertSuccess();
  return {
    "S3DataSource": convertCfnModelPackageS3DataSourcePropertyToCloudFormation(properties.s3DataSource)
  };
}

// @ts-ignore TS6133
function CfnModelPackageDataSourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelPackage.DataSourceProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.DataSourceProperty>();
  ret.addPropertyResult("s3DataSource", "S3DataSource", (properties.S3DataSource != null ? CfnModelPackageS3DataSourcePropertyFromCloudFormation(properties.S3DataSource) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `TransformInputProperty`
 *
 * @param properties - the TypeScript properties of a `TransformInputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageTransformInputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("compressionType", cdk.validateString)(properties.compressionType));
  errors.collect(cdk.propertyValidator("contentType", cdk.validateString)(properties.contentType));
  errors.collect(cdk.propertyValidator("dataSource", cdk.requiredValidator)(properties.dataSource));
  errors.collect(cdk.propertyValidator("dataSource", CfnModelPackageDataSourcePropertyValidator)(properties.dataSource));
  errors.collect(cdk.propertyValidator("splitType", cdk.validateString)(properties.splitType));
  return errors.wrap("supplied properties not correct for \"TransformInputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageTransformInputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageTransformInputPropertyValidator(properties).assertSuccess();
  return {
    "CompressionType": cdk.stringToCloudFormation(properties.compressionType),
    "ContentType": cdk.stringToCloudFormation(properties.contentType),
    "DataSource": convertCfnModelPackageDataSourcePropertyToCloudFormation(properties.dataSource),
    "SplitType": cdk.stringToCloudFormation(properties.splitType)
  };
}

// @ts-ignore TS6133
function CfnModelPackageTransformInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelPackage.TransformInputProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.TransformInputProperty>();
  ret.addPropertyResult("compressionType", "CompressionType", (properties.CompressionType != null ? cfn_parse.FromCloudFormation.getString(properties.CompressionType) : undefined));
  ret.addPropertyResult("contentType", "ContentType", (properties.ContentType != null ? cfn_parse.FromCloudFormation.getString(properties.ContentType) : undefined));
  ret.addPropertyResult("dataSource", "DataSource", (properties.DataSource != null ? CfnModelPackageDataSourcePropertyFromCloudFormation(properties.DataSource) : undefined));
  ret.addPropertyResult("splitType", "SplitType", (properties.SplitType != null ? cfn_parse.FromCloudFormation.getString(properties.SplitType) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `TransformJobDefinitionProperty`
 *
 * @param properties - the TypeScript properties of a `TransformJobDefinitionProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageTransformJobDefinitionPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("batchStrategy", cdk.validateString)(properties.batchStrategy));
  errors.collect(cdk.propertyValidator("environment", cdk.hashValidator(cdk.validateString))(properties.environment));
  errors.collect(cdk.propertyValidator("maxConcurrentTransforms", cdk.validateNumber)(properties.maxConcurrentTransforms));
  errors.collect(cdk.propertyValidator("maxPayloadInMb", cdk.validateNumber)(properties.maxPayloadInMb));
  errors.collect(cdk.propertyValidator("transformInput", cdk.requiredValidator)(properties.transformInput));
  errors.collect(cdk.propertyValidator("transformInput", CfnModelPackageTransformInputPropertyValidator)(properties.transformInput));
  errors.collect(cdk.propertyValidator("transformOutput", cdk.requiredValidator)(properties.transformOutput));
  errors.collect(cdk.propertyValidator("transformOutput", CfnModelPackageTransformOutputPropertyValidator)(properties.transformOutput));
  errors.collect(cdk.propertyValidator("transformResources", cdk.requiredValidator)(properties.transformResources));
  errors.collect(cdk.propertyValidator("transformResources", CfnModelPackageTransformResourcesPropertyValidator)(properties.transformResources));
  return errors.wrap("supplied properties not correct for \"TransformJobDefinitionProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageTransformJobDefinitionPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageTransformJobDefinitionPropertyValidator(properties).assertSuccess();
  return {
    "BatchStrategy": cdk.stringToCloudFormation(properties.batchStrategy),
    "Environment": cdk.hashMapper(cdk.stringToCloudFormation)(properties.environment),
    "MaxConcurrentTransforms": cdk.numberToCloudFormation(properties.maxConcurrentTransforms),
    "MaxPayloadInMB": cdk.numberToCloudFormation(properties.maxPayloadInMb),
    "TransformInput": convertCfnModelPackageTransformInputPropertyToCloudFormation(properties.transformInput),
    "TransformOutput": convertCfnModelPackageTransformOutputPropertyToCloudFormation(properties.transformOutput),
    "TransformResources": convertCfnModelPackageTransformResourcesPropertyToCloudFormation(properties.transformResources)
  };
}

// @ts-ignore TS6133
function CfnModelPackageTransformJobDefinitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelPackage.TransformJobDefinitionProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.TransformJobDefinitionProperty>();
  ret.addPropertyResult("batchStrategy", "BatchStrategy", (properties.BatchStrategy != null ? cfn_parse.FromCloudFormation.getString(properties.BatchStrategy) : undefined));
  ret.addPropertyResult("environment", "Environment", (properties.Environment != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Environment) : undefined));
  ret.addPropertyResult("maxConcurrentTransforms", "MaxConcurrentTransforms", (properties.MaxConcurrentTransforms != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxConcurrentTransforms) : undefined));
  ret.addPropertyResult("maxPayloadInMb", "MaxPayloadInMB", (properties.MaxPayloadInMB != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxPayloadInMB) : undefined));
  ret.addPropertyResult("transformInput", "TransformInput", (properties.TransformInput != null ? CfnModelPackageTransformInputPropertyFromCloudFormation(properties.TransformInput) : undefined));
  ret.addPropertyResult("transformOutput", "TransformOutput", (properties.TransformOutput != null ? CfnModelPackageTransformOutputPropertyFromCloudFormation(properties.TransformOutput) : undefined));
  ret.addPropertyResult("transformResources", "TransformResources", (properties.TransformResources != null ? CfnModelPackageTransformResourcesPropertyFromCloudFormation(properties.TransformResources) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ValidationProfileProperty`
 *
 * @param properties - the TypeScript properties of a `ValidationProfileProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageValidationProfilePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("profileName", cdk.requiredValidator)(properties.profileName));
  errors.collect(cdk.propertyValidator("profileName", cdk.validateString)(properties.profileName));
  errors.collect(cdk.propertyValidator("transformJobDefinition", cdk.requiredValidator)(properties.transformJobDefinition));
  errors.collect(cdk.propertyValidator("transformJobDefinition", CfnModelPackageTransformJobDefinitionPropertyValidator)(properties.transformJobDefinition));
  return errors.wrap("supplied properties not correct for \"ValidationProfileProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageValidationProfilePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageValidationProfilePropertyValidator(properties).assertSuccess();
  return {
    "ProfileName": cdk.stringToCloudFormation(properties.profileName),
    "TransformJobDefinition": convertCfnModelPackageTransformJobDefinitionPropertyToCloudFormation(properties.transformJobDefinition)
  };
}

// @ts-ignore TS6133
function CfnModelPackageValidationProfilePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelPackage.ValidationProfileProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.ValidationProfileProperty>();
  ret.addPropertyResult("profileName", "ProfileName", (properties.ProfileName != null ? cfn_parse.FromCloudFormation.getString(properties.ProfileName) : undefined));
  ret.addPropertyResult("transformJobDefinition", "TransformJobDefinition", (properties.TransformJobDefinition != null ? CfnModelPackageTransformJobDefinitionPropertyFromCloudFormation(properties.TransformJobDefinition) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ValidationSpecificationProperty`
 *
 * @param properties - the TypeScript properties of a `ValidationSpecificationProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageValidationSpecificationPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("validationProfiles", cdk.requiredValidator)(properties.validationProfiles));
  errors.collect(cdk.propertyValidator("validationProfiles", cdk.listValidator(CfnModelPackageValidationProfilePropertyValidator))(properties.validationProfiles));
  errors.collect(cdk.propertyValidator("validationRole", cdk.requiredValidator)(properties.validationRole));
  errors.collect(cdk.propertyValidator("validationRole", cdk.validateString)(properties.validationRole));
  return errors.wrap("supplied properties not correct for \"ValidationSpecificationProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageValidationSpecificationPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageValidationSpecificationPropertyValidator(properties).assertSuccess();
  return {
    "ValidationProfiles": cdk.listMapper(convertCfnModelPackageValidationProfilePropertyToCloudFormation)(properties.validationProfiles),
    "ValidationRole": cdk.stringToCloudFormation(properties.validationRole)
  };
}

// @ts-ignore TS6133
function CfnModelPackageValidationSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelPackage.ValidationSpecificationProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.ValidationSpecificationProperty>();
  ret.addPropertyResult("validationProfiles", "ValidationProfiles", (properties.ValidationProfiles != null ? cfn_parse.FromCloudFormation.getArray(CfnModelPackageValidationProfilePropertyFromCloudFormation)(properties.ValidationProfiles) : undefined));
  ret.addPropertyResult("validationRole", "ValidationRole", (properties.ValidationRole != null ? cfn_parse.FromCloudFormation.getString(properties.ValidationRole) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `SourceAlgorithmProperty`
 *
 * @param properties - the TypeScript properties of a `SourceAlgorithmProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageSourceAlgorithmPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("algorithmName", cdk.requiredValidator)(properties.algorithmName));
  errors.collect(cdk.propertyValidator("algorithmName", cdk.validateString)(properties.algorithmName));
  errors.collect(cdk.propertyValidator("modelDataUrl", cdk.validateString)(properties.modelDataUrl));
  return errors.wrap("supplied properties not correct for \"SourceAlgorithmProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageSourceAlgorithmPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageSourceAlgorithmPropertyValidator(properties).assertSuccess();
  return {
    "AlgorithmName": cdk.stringToCloudFormation(properties.algorithmName),
    "ModelDataUrl": cdk.stringToCloudFormation(properties.modelDataUrl)
  };
}

// @ts-ignore TS6133
function CfnModelPackageSourceAlgorithmPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelPackage.SourceAlgorithmProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.SourceAlgorithmProperty>();
  ret.addPropertyResult("algorithmName", "AlgorithmName", (properties.AlgorithmName != null ? cfn_parse.FromCloudFormation.getString(properties.AlgorithmName) : undefined));
  ret.addPropertyResult("modelDataUrl", "ModelDataUrl", (properties.ModelDataUrl != null ? cfn_parse.FromCloudFormation.getString(properties.ModelDataUrl) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `SourceAlgorithmSpecificationProperty`
 *
 * @param properties - the TypeScript properties of a `SourceAlgorithmSpecificationProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageSourceAlgorithmSpecificationPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("sourceAlgorithms", cdk.requiredValidator)(properties.sourceAlgorithms));
  errors.collect(cdk.propertyValidator("sourceAlgorithms", cdk.listValidator(CfnModelPackageSourceAlgorithmPropertyValidator))(properties.sourceAlgorithms));
  return errors.wrap("supplied properties not correct for \"SourceAlgorithmSpecificationProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageSourceAlgorithmSpecificationPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageSourceAlgorithmSpecificationPropertyValidator(properties).assertSuccess();
  return {
    "SourceAlgorithms": cdk.listMapper(convertCfnModelPackageSourceAlgorithmPropertyToCloudFormation)(properties.sourceAlgorithms)
  };
}

// @ts-ignore TS6133
function CfnModelPackageSourceAlgorithmSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelPackage.SourceAlgorithmSpecificationProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.SourceAlgorithmSpecificationProperty>();
  ret.addPropertyResult("sourceAlgorithms", "SourceAlgorithms", (properties.SourceAlgorithms != null ? cfn_parse.FromCloudFormation.getArray(CfnModelPackageSourceAlgorithmPropertyFromCloudFormation)(properties.SourceAlgorithms) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelPackageStatusItemProperty`
 *
 * @param properties - the TypeScript properties of a `ModelPackageStatusItemProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageModelPackageStatusItemPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("failureReason", cdk.validateString)(properties.failureReason));
  errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
  errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
  errors.collect(cdk.propertyValidator("status", cdk.requiredValidator)(properties.status));
  errors.collect(cdk.propertyValidator("status", cdk.validateString)(properties.status));
  return errors.wrap("supplied properties not correct for \"ModelPackageStatusItemProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageModelPackageStatusItemPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageModelPackageStatusItemPropertyValidator(properties).assertSuccess();
  return {
    "FailureReason": cdk.stringToCloudFormation(properties.failureReason),
    "Name": cdk.stringToCloudFormation(properties.name),
    "Status": cdk.stringToCloudFormation(properties.status)
  };
}

// @ts-ignore TS6133
function CfnModelPackageModelPackageStatusItemPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelPackage.ModelPackageStatusItemProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.ModelPackageStatusItemProperty>();
  ret.addPropertyResult("failureReason", "FailureReason", (properties.FailureReason != null ? cfn_parse.FromCloudFormation.getString(properties.FailureReason) : undefined));
  ret.addPropertyResult("name", "Name", (properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined));
  ret.addPropertyResult("status", "Status", (properties.Status != null ? cfn_parse.FromCloudFormation.getString(properties.Status) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelPackageStatusDetailsProperty`
 *
 * @param properties - the TypeScript properties of a `ModelPackageStatusDetailsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageModelPackageStatusDetailsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("validationStatuses", cdk.listValidator(CfnModelPackageModelPackageStatusItemPropertyValidator))(properties.validationStatuses));
  return errors.wrap("supplied properties not correct for \"ModelPackageStatusDetailsProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageModelPackageStatusDetailsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageModelPackageStatusDetailsPropertyValidator(properties).assertSuccess();
  return {
    "ValidationStatuses": cdk.listMapper(convertCfnModelPackageModelPackageStatusItemPropertyToCloudFormation)(properties.validationStatuses)
  };
}

// @ts-ignore TS6133
function CfnModelPackageModelPackageStatusDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelPackage.ModelPackageStatusDetailsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.ModelPackageStatusDetailsProperty>();
  ret.addPropertyResult("validationStatuses", "ValidationStatuses", (properties.ValidationStatuses != null ? cfn_parse.FromCloudFormation.getArray(CfnModelPackageModelPackageStatusItemPropertyFromCloudFormation)(properties.ValidationStatuses) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelPackageContainerDefinitionProperty`
 *
 * @param properties - the TypeScript properties of a `ModelPackageContainerDefinitionProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageModelPackageContainerDefinitionPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("containerHostname", cdk.validateString)(properties.containerHostname));
  errors.collect(cdk.propertyValidator("environment", cdk.hashValidator(cdk.validateString))(properties.environment));
  errors.collect(cdk.propertyValidator("framework", cdk.validateString)(properties.framework));
  errors.collect(cdk.propertyValidator("frameworkVersion", cdk.validateString)(properties.frameworkVersion));
  errors.collect(cdk.propertyValidator("image", cdk.requiredValidator)(properties.image));
  errors.collect(cdk.propertyValidator("image", cdk.validateString)(properties.image));
  errors.collect(cdk.propertyValidator("imageDigest", cdk.validateString)(properties.imageDigest));
  errors.collect(cdk.propertyValidator("modelDataUrl", cdk.validateString)(properties.modelDataUrl));
  errors.collect(cdk.propertyValidator("modelInput", cdk.validateObject)(properties.modelInput));
  errors.collect(cdk.propertyValidator("nearestModelName", cdk.validateString)(properties.nearestModelName));
  return errors.wrap("supplied properties not correct for \"ModelPackageContainerDefinitionProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageModelPackageContainerDefinitionPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageModelPackageContainerDefinitionPropertyValidator(properties).assertSuccess();
  return {
    "ContainerHostname": cdk.stringToCloudFormation(properties.containerHostname),
    "Environment": cdk.hashMapper(cdk.stringToCloudFormation)(properties.environment),
    "Framework": cdk.stringToCloudFormation(properties.framework),
    "FrameworkVersion": cdk.stringToCloudFormation(properties.frameworkVersion),
    "Image": cdk.stringToCloudFormation(properties.image),
    "ImageDigest": cdk.stringToCloudFormation(properties.imageDigest),
    "ModelDataUrl": cdk.stringToCloudFormation(properties.modelDataUrl),
    "ModelInput": cdk.objectToCloudFormation(properties.modelInput),
    "NearestModelName": cdk.stringToCloudFormation(properties.nearestModelName)
  };
}

// @ts-ignore TS6133
function CfnModelPackageModelPackageContainerDefinitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelPackage.ModelPackageContainerDefinitionProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.ModelPackageContainerDefinitionProperty>();
  ret.addPropertyResult("containerHostname", "ContainerHostname", (properties.ContainerHostname != null ? cfn_parse.FromCloudFormation.getString(properties.ContainerHostname) : undefined));
  ret.addPropertyResult("environment", "Environment", (properties.Environment != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Environment) : undefined));
  ret.addPropertyResult("framework", "Framework", (properties.Framework != null ? cfn_parse.FromCloudFormation.getString(properties.Framework) : undefined));
  ret.addPropertyResult("frameworkVersion", "FrameworkVersion", (properties.FrameworkVersion != null ? cfn_parse.FromCloudFormation.getString(properties.FrameworkVersion) : undefined));
  ret.addPropertyResult("image", "Image", (properties.Image != null ? cfn_parse.FromCloudFormation.getString(properties.Image) : undefined));
  ret.addPropertyResult("imageDigest", "ImageDigest", (properties.ImageDigest != null ? cfn_parse.FromCloudFormation.getString(properties.ImageDigest) : undefined));
  ret.addPropertyResult("modelDataUrl", "ModelDataUrl", (properties.ModelDataUrl != null ? cfn_parse.FromCloudFormation.getString(properties.ModelDataUrl) : undefined));
  ret.addPropertyResult("modelInput", "ModelInput", (properties.ModelInput != null ? cfn_parse.FromCloudFormation.getAny(properties.ModelInput) : undefined));
  ret.addPropertyResult("nearestModelName", "NearestModelName", (properties.NearestModelName != null ? cfn_parse.FromCloudFormation.getString(properties.NearestModelName) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `AdditionalInferenceSpecificationDefinitionProperty`
 *
 * @param properties - the TypeScript properties of a `AdditionalInferenceSpecificationDefinitionProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageAdditionalInferenceSpecificationDefinitionPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("containers", cdk.requiredValidator)(properties.containers));
  errors.collect(cdk.propertyValidator("containers", cdk.listValidator(CfnModelPackageModelPackageContainerDefinitionPropertyValidator))(properties.containers));
  errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
  errors.collect(cdk.propertyValidator("name", cdk.requiredValidator)(properties.name));
  errors.collect(cdk.propertyValidator("name", cdk.validateString)(properties.name));
  errors.collect(cdk.propertyValidator("supportedContentTypes", cdk.listValidator(cdk.validateString))(properties.supportedContentTypes));
  errors.collect(cdk.propertyValidator("supportedRealtimeInferenceInstanceTypes", cdk.listValidator(cdk.validateString))(properties.supportedRealtimeInferenceInstanceTypes));
  errors.collect(cdk.propertyValidator("supportedResponseMimeTypes", cdk.listValidator(cdk.validateString))(properties.supportedResponseMimeTypes));
  errors.collect(cdk.propertyValidator("supportedTransformInstanceTypes", cdk.listValidator(cdk.validateString))(properties.supportedTransformInstanceTypes));
  return errors.wrap("supplied properties not correct for \"AdditionalInferenceSpecificationDefinitionProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageAdditionalInferenceSpecificationDefinitionPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageAdditionalInferenceSpecificationDefinitionPropertyValidator(properties).assertSuccess();
  return {
    "Containers": cdk.listMapper(convertCfnModelPackageModelPackageContainerDefinitionPropertyToCloudFormation)(properties.containers),
    "Description": cdk.stringToCloudFormation(properties.description),
    "Name": cdk.stringToCloudFormation(properties.name),
    "SupportedContentTypes": cdk.listMapper(cdk.stringToCloudFormation)(properties.supportedContentTypes),
    "SupportedRealtimeInferenceInstanceTypes": cdk.listMapper(cdk.stringToCloudFormation)(properties.supportedRealtimeInferenceInstanceTypes),
    "SupportedResponseMIMETypes": cdk.listMapper(cdk.stringToCloudFormation)(properties.supportedResponseMimeTypes),
    "SupportedTransformInstanceTypes": cdk.listMapper(cdk.stringToCloudFormation)(properties.supportedTransformInstanceTypes)
  };
}

// @ts-ignore TS6133
function CfnModelPackageAdditionalInferenceSpecificationDefinitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelPackage.AdditionalInferenceSpecificationDefinitionProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.AdditionalInferenceSpecificationDefinitionProperty>();
  ret.addPropertyResult("containers", "Containers", (properties.Containers != null ? cfn_parse.FromCloudFormation.getArray(CfnModelPackageModelPackageContainerDefinitionPropertyFromCloudFormation)(properties.Containers) : undefined));
  ret.addPropertyResult("description", "Description", (properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined));
  ret.addPropertyResult("name", "Name", (properties.Name != null ? cfn_parse.FromCloudFormation.getString(properties.Name) : undefined));
  ret.addPropertyResult("supportedContentTypes", "SupportedContentTypes", (properties.SupportedContentTypes != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SupportedContentTypes) : undefined));
  ret.addPropertyResult("supportedRealtimeInferenceInstanceTypes", "SupportedRealtimeInferenceInstanceTypes", (properties.SupportedRealtimeInferenceInstanceTypes != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SupportedRealtimeInferenceInstanceTypes) : undefined));
  ret.addPropertyResult("supportedResponseMimeTypes", "SupportedResponseMIMETypes", (properties.SupportedResponseMIMETypes != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SupportedResponseMIMETypes) : undefined));
  ret.addPropertyResult("supportedTransformInstanceTypes", "SupportedTransformInstanceTypes", (properties.SupportedTransformInstanceTypes != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SupportedTransformInstanceTypes) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `InferenceSpecificationProperty`
 *
 * @param properties - the TypeScript properties of a `InferenceSpecificationProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageInferenceSpecificationPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("containers", cdk.requiredValidator)(properties.containers));
  errors.collect(cdk.propertyValidator("containers", cdk.listValidator(CfnModelPackageModelPackageContainerDefinitionPropertyValidator))(properties.containers));
  errors.collect(cdk.propertyValidator("supportedContentTypes", cdk.requiredValidator)(properties.supportedContentTypes));
  errors.collect(cdk.propertyValidator("supportedContentTypes", cdk.listValidator(cdk.validateString))(properties.supportedContentTypes));
  errors.collect(cdk.propertyValidator("supportedRealtimeInferenceInstanceTypes", cdk.listValidator(cdk.validateString))(properties.supportedRealtimeInferenceInstanceTypes));
  errors.collect(cdk.propertyValidator("supportedResponseMimeTypes", cdk.requiredValidator)(properties.supportedResponseMimeTypes));
  errors.collect(cdk.propertyValidator("supportedResponseMimeTypes", cdk.listValidator(cdk.validateString))(properties.supportedResponseMimeTypes));
  errors.collect(cdk.propertyValidator("supportedTransformInstanceTypes", cdk.listValidator(cdk.validateString))(properties.supportedTransformInstanceTypes));
  return errors.wrap("supplied properties not correct for \"InferenceSpecificationProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageInferenceSpecificationPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageInferenceSpecificationPropertyValidator(properties).assertSuccess();
  return {
    "Containers": cdk.listMapper(convertCfnModelPackageModelPackageContainerDefinitionPropertyToCloudFormation)(properties.containers),
    "SupportedContentTypes": cdk.listMapper(cdk.stringToCloudFormation)(properties.supportedContentTypes),
    "SupportedRealtimeInferenceInstanceTypes": cdk.listMapper(cdk.stringToCloudFormation)(properties.supportedRealtimeInferenceInstanceTypes),
    "SupportedResponseMIMETypes": cdk.listMapper(cdk.stringToCloudFormation)(properties.supportedResponseMimeTypes),
    "SupportedTransformInstanceTypes": cdk.listMapper(cdk.stringToCloudFormation)(properties.supportedTransformInstanceTypes)
  };
}

// @ts-ignore TS6133
function CfnModelPackageInferenceSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelPackage.InferenceSpecificationProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.InferenceSpecificationProperty>();
  ret.addPropertyResult("containers", "Containers", (properties.Containers != null ? cfn_parse.FromCloudFormation.getArray(CfnModelPackageModelPackageContainerDefinitionPropertyFromCloudFormation)(properties.Containers) : undefined));
  ret.addPropertyResult("supportedContentTypes", "SupportedContentTypes", (properties.SupportedContentTypes != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SupportedContentTypes) : undefined));
  ret.addPropertyResult("supportedRealtimeInferenceInstanceTypes", "SupportedRealtimeInferenceInstanceTypes", (properties.SupportedRealtimeInferenceInstanceTypes != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SupportedRealtimeInferenceInstanceTypes) : undefined));
  ret.addPropertyResult("supportedResponseMimeTypes", "SupportedResponseMIMETypes", (properties.SupportedResponseMIMETypes != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SupportedResponseMIMETypes) : undefined));
  ret.addPropertyResult("supportedTransformInstanceTypes", "SupportedTransformInstanceTypes", (properties.SupportedTransformInstanceTypes != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SupportedTransformInstanceTypes) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnModelPackageProps`
 *
 * @param properties - the TypeScript properties of a `CfnModelPackageProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackagePropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("additionalInferenceSpecifications", cdk.listValidator(CfnModelPackageAdditionalInferenceSpecificationDefinitionPropertyValidator))(properties.additionalInferenceSpecifications));
  errors.collect(cdk.propertyValidator("additionalInferenceSpecificationsToAdd", cdk.listValidator(CfnModelPackageAdditionalInferenceSpecificationDefinitionPropertyValidator))(properties.additionalInferenceSpecificationsToAdd));
  errors.collect(cdk.propertyValidator("approvalDescription", cdk.validateString)(properties.approvalDescription));
  errors.collect(cdk.propertyValidator("certifyForMarketplace", cdk.validateBoolean)(properties.certifyForMarketplace));
  errors.collect(cdk.propertyValidator("clientToken", cdk.validateString)(properties.clientToken));
  errors.collect(cdk.propertyValidator("customerMetadataProperties", cdk.hashValidator(cdk.validateString))(properties.customerMetadataProperties));
  errors.collect(cdk.propertyValidator("domain", cdk.validateString)(properties.domain));
  errors.collect(cdk.propertyValidator("driftCheckBaselines", CfnModelPackageDriftCheckBaselinesPropertyValidator)(properties.driftCheckBaselines));
  errors.collect(cdk.propertyValidator("inferenceSpecification", CfnModelPackageInferenceSpecificationPropertyValidator)(properties.inferenceSpecification));
  errors.collect(cdk.propertyValidator("lastModifiedTime", cdk.validateString)(properties.lastModifiedTime));
  errors.collect(cdk.propertyValidator("metadataProperties", CfnModelPackageMetadataPropertiesPropertyValidator)(properties.metadataProperties));
  errors.collect(cdk.propertyValidator("modelApprovalStatus", cdk.validateString)(properties.modelApprovalStatus));
  errors.collect(cdk.propertyValidator("modelMetrics", CfnModelPackageModelMetricsPropertyValidator)(properties.modelMetrics));
  errors.collect(cdk.propertyValidator("modelPackageDescription", cdk.validateString)(properties.modelPackageDescription));
  errors.collect(cdk.propertyValidator("modelPackageGroupName", cdk.validateString)(properties.modelPackageGroupName));
  errors.collect(cdk.propertyValidator("modelPackageName", cdk.validateString)(properties.modelPackageName));
  errors.collect(cdk.propertyValidator("modelPackageStatusDetails", CfnModelPackageModelPackageStatusDetailsPropertyValidator)(properties.modelPackageStatusDetails));
  errors.collect(cdk.propertyValidator("modelPackageVersion", cdk.validateNumber)(properties.modelPackageVersion));
  errors.collect(cdk.propertyValidator("samplePayloadUrl", cdk.validateString)(properties.samplePayloadUrl));
  errors.collect(cdk.propertyValidator("skipModelValidation", cdk.validateString)(properties.skipModelValidation));
  errors.collect(cdk.propertyValidator("sourceAlgorithmSpecification", CfnModelPackageSourceAlgorithmSpecificationPropertyValidator)(properties.sourceAlgorithmSpecification));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  errors.collect(cdk.propertyValidator("task", cdk.validateString)(properties.task));
  errors.collect(cdk.propertyValidator("validationSpecification", CfnModelPackageValidationSpecificationPropertyValidator)(properties.validationSpecification));
  return errors.wrap("supplied properties not correct for \"CfnModelPackageProps\"");
}

// @ts-ignore TS6133
function convertCfnModelPackagePropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackagePropsValidator(properties).assertSuccess();
  return {
    "AdditionalInferenceSpecifications": cdk.listMapper(convertCfnModelPackageAdditionalInferenceSpecificationDefinitionPropertyToCloudFormation)(properties.additionalInferenceSpecifications),
    "AdditionalInferenceSpecificationsToAdd": cdk.listMapper(convertCfnModelPackageAdditionalInferenceSpecificationDefinitionPropertyToCloudFormation)(properties.additionalInferenceSpecificationsToAdd),
    "ApprovalDescription": cdk.stringToCloudFormation(properties.approvalDescription),
    "CertifyForMarketplace": cdk.booleanToCloudFormation(properties.certifyForMarketplace),
    "ClientToken": cdk.stringToCloudFormation(properties.clientToken),
    "CustomerMetadataProperties": cdk.hashMapper(cdk.stringToCloudFormation)(properties.customerMetadataProperties),
    "Domain": cdk.stringToCloudFormation(properties.domain),
    "DriftCheckBaselines": convertCfnModelPackageDriftCheckBaselinesPropertyToCloudFormation(properties.driftCheckBaselines),
    "InferenceSpecification": convertCfnModelPackageInferenceSpecificationPropertyToCloudFormation(properties.inferenceSpecification),
    "LastModifiedTime": cdk.stringToCloudFormation(properties.lastModifiedTime),
    "MetadataProperties": convertCfnModelPackageMetadataPropertiesPropertyToCloudFormation(properties.metadataProperties),
    "ModelApprovalStatus": cdk.stringToCloudFormation(properties.modelApprovalStatus),
    "ModelMetrics": convertCfnModelPackageModelMetricsPropertyToCloudFormation(properties.modelMetrics),
    "ModelPackageDescription": cdk.stringToCloudFormation(properties.modelPackageDescription),
    "ModelPackageGroupName": cdk.stringToCloudFormation(properties.modelPackageGroupName),
    "ModelPackageName": cdk.stringToCloudFormation(properties.modelPackageName),
    "ModelPackageStatusDetails": convertCfnModelPackageModelPackageStatusDetailsPropertyToCloudFormation(properties.modelPackageStatusDetails),
    "ModelPackageVersion": cdk.numberToCloudFormation(properties.modelPackageVersion),
    "SamplePayloadUrl": cdk.stringToCloudFormation(properties.samplePayloadUrl),
    "SkipModelValidation": cdk.stringToCloudFormation(properties.skipModelValidation),
    "SourceAlgorithmSpecification": convertCfnModelPackageSourceAlgorithmSpecificationPropertyToCloudFormation(properties.sourceAlgorithmSpecification),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
    "Task": cdk.stringToCloudFormation(properties.task),
    "ValidationSpecification": convertCfnModelPackageValidationSpecificationPropertyToCloudFormation(properties.validationSpecification)
  };
}

// @ts-ignore TS6133
function CfnModelPackagePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelPackageProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackageProps>();
  ret.addPropertyResult("additionalInferenceSpecifications", "AdditionalInferenceSpecifications", (properties.AdditionalInferenceSpecifications != null ? cfn_parse.FromCloudFormation.getArray(CfnModelPackageAdditionalInferenceSpecificationDefinitionPropertyFromCloudFormation)(properties.AdditionalInferenceSpecifications) : undefined));
  ret.addPropertyResult("additionalInferenceSpecificationsToAdd", "AdditionalInferenceSpecificationsToAdd", (properties.AdditionalInferenceSpecificationsToAdd != null ? cfn_parse.FromCloudFormation.getArray(CfnModelPackageAdditionalInferenceSpecificationDefinitionPropertyFromCloudFormation)(properties.AdditionalInferenceSpecificationsToAdd) : undefined));
  ret.addPropertyResult("approvalDescription", "ApprovalDescription", (properties.ApprovalDescription != null ? cfn_parse.FromCloudFormation.getString(properties.ApprovalDescription) : undefined));
  ret.addPropertyResult("certifyForMarketplace", "CertifyForMarketplace", (properties.CertifyForMarketplace != null ? cfn_parse.FromCloudFormation.getBoolean(properties.CertifyForMarketplace) : undefined));
  ret.addPropertyResult("clientToken", "ClientToken", (properties.ClientToken != null ? cfn_parse.FromCloudFormation.getString(properties.ClientToken) : undefined));
  ret.addPropertyResult("customerMetadataProperties", "CustomerMetadataProperties", (properties.CustomerMetadataProperties != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.CustomerMetadataProperties) : undefined));
  ret.addPropertyResult("domain", "Domain", (properties.Domain != null ? cfn_parse.FromCloudFormation.getString(properties.Domain) : undefined));
  ret.addPropertyResult("driftCheckBaselines", "DriftCheckBaselines", (properties.DriftCheckBaselines != null ? CfnModelPackageDriftCheckBaselinesPropertyFromCloudFormation(properties.DriftCheckBaselines) : undefined));
  ret.addPropertyResult("inferenceSpecification", "InferenceSpecification", (properties.InferenceSpecification != null ? CfnModelPackageInferenceSpecificationPropertyFromCloudFormation(properties.InferenceSpecification) : undefined));
  ret.addPropertyResult("lastModifiedTime", "LastModifiedTime", (properties.LastModifiedTime != null ? cfn_parse.FromCloudFormation.getString(properties.LastModifiedTime) : undefined));
  ret.addPropertyResult("metadataProperties", "MetadataProperties", (properties.MetadataProperties != null ? CfnModelPackageMetadataPropertiesPropertyFromCloudFormation(properties.MetadataProperties) : undefined));
  ret.addPropertyResult("modelApprovalStatus", "ModelApprovalStatus", (properties.ModelApprovalStatus != null ? cfn_parse.FromCloudFormation.getString(properties.ModelApprovalStatus) : undefined));
  ret.addPropertyResult("modelMetrics", "ModelMetrics", (properties.ModelMetrics != null ? CfnModelPackageModelMetricsPropertyFromCloudFormation(properties.ModelMetrics) : undefined));
  ret.addPropertyResult("modelPackageDescription", "ModelPackageDescription", (properties.ModelPackageDescription != null ? cfn_parse.FromCloudFormation.getString(properties.ModelPackageDescription) : undefined));
  ret.addPropertyResult("modelPackageGroupName", "ModelPackageGroupName", (properties.ModelPackageGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.ModelPackageGroupName) : undefined));
  ret.addPropertyResult("modelPackageName", "ModelPackageName", (properties.ModelPackageName != null ? cfn_parse.FromCloudFormation.getString(properties.ModelPackageName) : undefined));
  ret.addPropertyResult("modelPackageStatusDetails", "ModelPackageStatusDetails", (properties.ModelPackageStatusDetails != null ? CfnModelPackageModelPackageStatusDetailsPropertyFromCloudFormation(properties.ModelPackageStatusDetails) : undefined));
  ret.addPropertyResult("modelPackageVersion", "ModelPackageVersion", (properties.ModelPackageVersion != null ? cfn_parse.FromCloudFormation.getNumber(properties.ModelPackageVersion) : undefined));
  ret.addPropertyResult("samplePayloadUrl", "SamplePayloadUrl", (properties.SamplePayloadUrl != null ? cfn_parse.FromCloudFormation.getString(properties.SamplePayloadUrl) : undefined));
  ret.addPropertyResult("skipModelValidation", "SkipModelValidation", (properties.SkipModelValidation != null ? cfn_parse.FromCloudFormation.getString(properties.SkipModelValidation) : undefined));
  ret.addPropertyResult("sourceAlgorithmSpecification", "SourceAlgorithmSpecification", (properties.SourceAlgorithmSpecification != null ? CfnModelPackageSourceAlgorithmSpecificationPropertyFromCloudFormation(properties.SourceAlgorithmSpecification) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addPropertyResult("task", "Task", (properties.Task != null ? cfn_parse.FromCloudFormation.getString(properties.Task) : undefined));
  ret.addPropertyResult("validationSpecification", "ValidationSpecification", (properties.ValidationSpecification != null ? CfnModelPackageValidationSpecificationPropertyFromCloudFormation(properties.ValidationSpecification) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelInputProperty`
 *
 * @param properties - the TypeScript properties of a `ModelInputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageModelInputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("dataInputConfig", cdk.requiredValidator)(properties.dataInputConfig));
  errors.collect(cdk.propertyValidator("dataInputConfig", cdk.validateString)(properties.dataInputConfig));
  return errors.wrap("supplied properties not correct for \"ModelInputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageModelInputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageModelInputPropertyValidator(properties).assertSuccess();
  return {
    "DataInputConfig": cdk.stringToCloudFormation(properties.dataInputConfig)
  };
}

// @ts-ignore TS6133
function CfnModelPackageModelInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelPackage.ModelInputProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackage.ModelInputProperty>();
  ret.addPropertyResult("dataInputConfig", "DataInputConfig", (properties.DataInputConfig != null ? cfn_parse.FromCloudFormation.getString(properties.DataInputConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * A group of versioned models in the model registry.
 *
 * @cloudformationResource AWS::SageMaker::ModelPackageGroup
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackagegroup.html
 */
export class CfnModelPackageGroup extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::ModelPackageGroup";

  /**
   * Build a CfnModelPackageGroup from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnModelPackageGroup {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnModelPackageGroupPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnModelPackageGroup(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The time when the model group was created.
   *
   * @cloudformationAttribute CreationTime
   */
  public readonly attrCreationTime: string;

  /**
   * The Amazon Resource Name (ARN) of the model group.
   *
   * @cloudformationAttribute ModelPackageGroupArn
   */
  public readonly attrModelPackageGroupArn: string;

  /**
   * The status of the model group.
   *
   * @cloudformationAttribute ModelPackageGroupStatus
   */
  public readonly attrModelPackageGroupStatus: string;

  /**
   * The description for the model group.
   */
  public modelPackageGroupDescription?: string;

  /**
   * The name of the model group.
   */
  public modelPackageGroupName: string;

  /**
   * A resouce policy to control access to a model group.
   */
  public modelPackageGroupPolicy?: any | cdk.IResolvable;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * An array of key-value pairs to apply to this resource.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnModelPackageGroupProps) {
    super(scope, id, {
      "type": CfnModelPackageGroup.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "modelPackageGroupName", this);

    this.attrCreationTime = cdk.Token.asString(this.getAtt("CreationTime", cdk.ResolutionTypeHint.STRING));
    this.attrModelPackageGroupArn = cdk.Token.asString(this.getAtt("ModelPackageGroupArn", cdk.ResolutionTypeHint.STRING));
    this.attrModelPackageGroupStatus = cdk.Token.asString(this.getAtt("ModelPackageGroupStatus", cdk.ResolutionTypeHint.STRING));
    this.modelPackageGroupDescription = props.modelPackageGroupDescription;
    this.modelPackageGroupName = props.modelPackageGroupName;
    this.modelPackageGroupPolicy = props.modelPackageGroupPolicy;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::ModelPackageGroup", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "modelPackageGroupDescription": this.modelPackageGroupDescription,
      "modelPackageGroupName": this.modelPackageGroupName,
      "modelPackageGroupPolicy": this.modelPackageGroupPolicy,
      "tags": this.tags.renderTags()
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnModelPackageGroup.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnModelPackageGroupPropsToCloudFormation(props);
  }
}

/**
 * Properties for defining a `CfnModelPackageGroup`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackagegroup.html
 */
export interface CfnModelPackageGroupProps {
  /**
   * The description for the model group.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackagegroup.html#cfn-sagemaker-modelpackagegroup-modelpackagegroupdescription
   */
  readonly modelPackageGroupDescription?: string;

  /**
   * The name of the model group.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackagegroup.html#cfn-sagemaker-modelpackagegroup-modelpackagegroupname
   */
  readonly modelPackageGroupName: string;

  /**
   * A resouce policy to control access to a model group.
   *
   * For information about resoure policies, see [Identity-based policies and resource-based policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html) in the *AWS Identity and Access Management User Guide.* .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackagegroup.html#cfn-sagemaker-modelpackagegroup-modelpackagegrouppolicy
   */
  readonly modelPackageGroupPolicy?: any | cdk.IResolvable;

  /**
   * An array of key-value pairs to apply to this resource.
   *
   * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackagegroup.html#cfn-sagemaker-modelpackagegroup-tags
   */
  readonly tags?: Array<cdk.CfnTag>;
}

/**
 * Determine whether the given properties match those of a `CfnModelPackageGroupProps`
 *
 * @param properties - the TypeScript properties of a `CfnModelPackageGroupProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelPackageGroupPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("modelPackageGroupDescription", cdk.validateString)(properties.modelPackageGroupDescription));
  errors.collect(cdk.propertyValidator("modelPackageGroupName", cdk.requiredValidator)(properties.modelPackageGroupName));
  errors.collect(cdk.propertyValidator("modelPackageGroupName", cdk.validateString)(properties.modelPackageGroupName));
  errors.collect(cdk.propertyValidator("modelPackageGroupPolicy", cdk.validateObject)(properties.modelPackageGroupPolicy));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  return errors.wrap("supplied properties not correct for \"CfnModelPackageGroupProps\"");
}

// @ts-ignore TS6133
function convertCfnModelPackageGroupPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelPackageGroupPropsValidator(properties).assertSuccess();
  return {
    "ModelPackageGroupDescription": cdk.stringToCloudFormation(properties.modelPackageGroupDescription),
    "ModelPackageGroupName": cdk.stringToCloudFormation(properties.modelPackageGroupName),
    "ModelPackageGroupPolicy": cdk.objectToCloudFormation(properties.modelPackageGroupPolicy),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
  };
}

// @ts-ignore TS6133
function CfnModelPackageGroupPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelPackageGroupProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelPackageGroupProps>();
  ret.addPropertyResult("modelPackageGroupDescription", "ModelPackageGroupDescription", (properties.ModelPackageGroupDescription != null ? cfn_parse.FromCloudFormation.getString(properties.ModelPackageGroupDescription) : undefined));
  ret.addPropertyResult("modelPackageGroupName", "ModelPackageGroupName", (properties.ModelPackageGroupName != null ? cfn_parse.FromCloudFormation.getString(properties.ModelPackageGroupName) : undefined));
  ret.addPropertyResult("modelPackageGroupPolicy", "ModelPackageGroupPolicy", (properties.ModelPackageGroupPolicy != null ? cfn_parse.FromCloudFormation.getAny(properties.ModelPackageGroupPolicy) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Creates a definition for a job that monitors model quality and drift.
 *
 * For information about model monitor, see [Amazon SageMaker Model Monitor](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html) .
 *
 * @cloudformationResource AWS::SageMaker::ModelQualityJobDefinition
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelqualityjobdefinition.html
 */
export class CfnModelQualityJobDefinition extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::ModelQualityJobDefinition";

  /**
   * Build a CfnModelQualityJobDefinition from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnModelQualityJobDefinition {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnModelQualityJobDefinitionPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnModelQualityJobDefinition(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The time when the job definition was created.
   *
   * @cloudformationAttribute CreationTime
   */
  public readonly attrCreationTime: string;

  /**
   * The Amazon Resource Name (ARN) of the job definition.
   *
   * @cloudformationAttribute JobDefinitionArn
   */
  public readonly attrJobDefinitionArn: string;

  /**
   * The name of the endpoint used to run the monitoring job.
   */
  public endpointName?: string;

  /**
   * The name of the monitoring job definition.
   */
  public jobDefinitionName?: string;

  /**
   * Identifies the resources to deploy for a monitoring job.
   */
  public jobResources: cdk.IResolvable | CfnModelQualityJobDefinition.MonitoringResourcesProperty;

  /**
   * Container image configuration object for the monitoring job.
   */
  public modelQualityAppSpecification: cdk.IResolvable | CfnModelQualityJobDefinition.ModelQualityAppSpecificationProperty;

  /**
   * Specifies the constraints and baselines for the monitoring job.
   */
  public modelQualityBaselineConfig?: cdk.IResolvable | CfnModelQualityJobDefinition.ModelQualityBaselineConfigProperty;

  /**
   * A list of the inputs that are monitored.
   */
  public modelQualityJobInput: cdk.IResolvable | CfnModelQualityJobDefinition.ModelQualityJobInputProperty;

  /**
   * The output configuration for monitoring jobs.
   */
  public modelQualityJobOutputConfig: cdk.IResolvable | CfnModelQualityJobDefinition.MonitoringOutputConfigProperty;

  /**
   * Specifies the network configuration for the monitoring job.
   */
  public networkConfig?: cdk.IResolvable | CfnModelQualityJobDefinition.NetworkConfigProperty;

  /**
   * The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
   */
  public roleArn: string;

  /**
   * A time limit for how long the monitoring job is allowed to run before stopping.
   */
  public stoppingCondition?: cdk.IResolvable | CfnModelQualityJobDefinition.StoppingConditionProperty;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * An array of key-value pairs to apply to this resource.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnModelQualityJobDefinitionProps) {
    super(scope, id, {
      "type": CfnModelQualityJobDefinition.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "jobResources", this);
    cdk.requireProperty(props, "modelQualityAppSpecification", this);
    cdk.requireProperty(props, "modelQualityJobInput", this);
    cdk.requireProperty(props, "modelQualityJobOutputConfig", this);
    cdk.requireProperty(props, "roleArn", this);

    this.attrCreationTime = cdk.Token.asString(this.getAtt("CreationTime", cdk.ResolutionTypeHint.STRING));
    this.attrJobDefinitionArn = cdk.Token.asString(this.getAtt("JobDefinitionArn", cdk.ResolutionTypeHint.STRING));
    this.endpointName = props.endpointName;
    this.jobDefinitionName = props.jobDefinitionName;
    this.jobResources = props.jobResources;
    this.modelQualityAppSpecification = props.modelQualityAppSpecification;
    this.modelQualityBaselineConfig = props.modelQualityBaselineConfig;
    this.modelQualityJobInput = props.modelQualityJobInput;
    this.modelQualityJobOutputConfig = props.modelQualityJobOutputConfig;
    this.networkConfig = props.networkConfig;
    this.roleArn = props.roleArn;
    this.stoppingCondition = props.stoppingCondition;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::ModelQualityJobDefinition", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "endpointName": this.endpointName,
      "jobDefinitionName": this.jobDefinitionName,
      "jobResources": this.jobResources,
      "modelQualityAppSpecification": this.modelQualityAppSpecification,
      "modelQualityBaselineConfig": this.modelQualityBaselineConfig,
      "modelQualityJobInput": this.modelQualityJobInput,
      "modelQualityJobOutputConfig": this.modelQualityJobOutputConfig,
      "networkConfig": this.networkConfig,
      "roleArn": this.roleArn,
      "stoppingCondition": this.stoppingCondition,
      "tags": this.tags.renderTags()
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnModelQualityJobDefinition.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnModelQualityJobDefinitionPropsToCloudFormation(props);
  }
}

export namespace CfnModelQualityJobDefinition {
  /**
   * Container image configuration object for the monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-modelqualityappspecification.html
   */
  export interface ModelQualityAppSpecificationProperty {
    /**
     * An array of arguments for the container used to run the monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-modelqualityappspecification.html#cfn-sagemaker-modelqualityjobdefinition-modelqualityappspecification-containerarguments
     */
    readonly containerArguments?: Array<string>;

    /**
     * Specifies the entrypoint for a container that the monitoring job runs.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-modelqualityappspecification.html#cfn-sagemaker-modelqualityjobdefinition-modelqualityappspecification-containerentrypoint
     */
    readonly containerEntrypoint?: Array<string>;

    /**
     * Sets the environment variables in the container that the monitoring job runs.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-modelqualityappspecification.html#cfn-sagemaker-modelqualityjobdefinition-modelqualityappspecification-environment
     */
    readonly environment?: cdk.IResolvable | Record<string, string>;

    /**
     * The address of the container image that the monitoring job runs.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-modelqualityappspecification.html#cfn-sagemaker-modelqualityjobdefinition-modelqualityappspecification-imageuri
     */
    readonly imageUri: string;

    /**
     * An Amazon S3 URI to a script that is called after analysis has been performed.
     *
     * Applicable only for the built-in (first party) containers.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-modelqualityappspecification.html#cfn-sagemaker-modelqualityjobdefinition-modelqualityappspecification-postanalyticsprocessorsourceuri
     */
    readonly postAnalyticsProcessorSourceUri?: string;

    /**
     * The machine learning problem type of the model that the monitoring job monitors.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-modelqualityappspecification.html#cfn-sagemaker-modelqualityjobdefinition-modelqualityappspecification-problemtype
     */
    readonly problemType: string;

    /**
     * An Amazon S3 URI to a script that is called per row prior to running analysis.
     *
     * It can base64 decode the payload and convert it into a flattened JSON so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-modelqualityappspecification.html#cfn-sagemaker-modelqualityjobdefinition-modelqualityappspecification-recordpreprocessorsourceuri
     */
    readonly recordPreprocessorSourceUri?: string;
  }

  /**
   * Specifies a limit to how long a model training job or model compilation job can run.
   *
   * It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, SageMaker ends the training or compilation job. Use this API to cap model training costs.
   *
   * To stop a training job, SageMaker sends the algorithm the `SIGTERM` signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
   *
   * The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with `CreateModel` .
   *
   * > The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-stoppingcondition.html
   */
  export interface StoppingConditionProperty {
    /**
     * The maximum length of time, in seconds, that a training or compilation job can run before it is stopped.
     *
     * For compilation jobs, if the job does not complete during this time, a `TimeOut` error is generated. We recommend starting with 900 seconds and increasing as necessary based on your model.
     *
     * For all other jobs, if the job does not complete during this time, SageMaker ends the job. When `RetryStrategy` is specified in the job request, `MaxRuntimeInSeconds` specifies the maximum time for all of the attempts in total, not each individual attempt. The default value is 1 day. The maximum value is 28 days.
     *
     * The maximum time that a `TrainingJob` can run in total, including any time spent publishing metrics or archiving and uploading models after it has been stopped, is 30 days.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-stoppingcondition.html#cfn-sagemaker-modelqualityjobdefinition-stoppingcondition-maxruntimeinseconds
     */
    readonly maxRuntimeInSeconds: number;
  }

  /**
   * Configuration for monitoring constraints and monitoring statistics.
   *
   * These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-modelqualitybaselineconfig.html
   */
  export interface ModelQualityBaselineConfigProperty {
    /**
     * The name of the job that performs baselining for the monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-modelqualitybaselineconfig.html#cfn-sagemaker-modelqualityjobdefinition-modelqualitybaselineconfig-baseliningjobname
     */
    readonly baseliningJobName?: string;

    /**
     * The constraints resource for a monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-modelqualitybaselineconfig.html#cfn-sagemaker-modelqualityjobdefinition-modelqualitybaselineconfig-constraintsresource
     */
    readonly constraintsResource?: CfnModelQualityJobDefinition.ConstraintsResourceProperty | cdk.IResolvable;
  }

  /**
   * The constraints resource for a monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-constraintsresource.html
   */
  export interface ConstraintsResourceProperty {
    /**
     * The Amazon S3 URI for the constraints resource.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-constraintsresource.html#cfn-sagemaker-modelqualityjobdefinition-constraintsresource-s3uri
     */
    readonly s3Uri?: string;
  }

  /**
   * The input for the model quality monitoring job.
   *
   * Currently endpoints are supported for input for model quality monitoring jobs.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-modelqualityjobinput.html
   */
  export interface ModelQualityJobInputProperty {
    /**
     * Input object for the batch transform job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-modelqualityjobinput.html#cfn-sagemaker-modelqualityjobdefinition-modelqualityjobinput-batchtransforminput
     */
    readonly batchTransformInput?: CfnModelQualityJobDefinition.BatchTransformInputProperty | cdk.IResolvable;

    /**
     * Input object for the endpoint.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-modelqualityjobinput.html#cfn-sagemaker-modelqualityjobdefinition-modelqualityjobinput-endpointinput
     */
    readonly endpointInput?: CfnModelQualityJobDefinition.EndpointInputProperty | cdk.IResolvable;

    /**
     * The ground truth label provided for the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-modelqualityjobinput.html#cfn-sagemaker-modelqualityjobdefinition-modelqualityjobinput-groundtruths3input
     */
    readonly groundTruthS3Input: cdk.IResolvable | CfnModelQualityJobDefinition.MonitoringGroundTruthS3InputProperty;
  }

  /**
   * The ground truth labels for the dataset used for the monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-monitoringgroundtruths3input.html
   */
  export interface MonitoringGroundTruthS3InputProperty {
    /**
     * The address of the Amazon S3 location of the ground truth labels.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-monitoringgroundtruths3input.html#cfn-sagemaker-modelqualityjobdefinition-monitoringgroundtruths3input-s3uri
     */
    readonly s3Uri: string;
  }

  /**
   * Input object for the batch transform job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-batchtransforminput.html
   */
  export interface BatchTransformInputProperty {
    /**
     * The Amazon S3 location being used to capture the data.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-batchtransforminput.html#cfn-sagemaker-modelqualityjobdefinition-batchtransforminput-datacaptureddestinations3uri
     */
    readonly dataCapturedDestinationS3Uri: string;

    /**
     * The dataset format for your batch transform job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-batchtransforminput.html#cfn-sagemaker-modelqualityjobdefinition-batchtransforminput-datasetformat
     */
    readonly datasetFormat: CfnModelQualityJobDefinition.DatasetFormatProperty | cdk.IResolvable;

    /**
     * If specified, monitoring jobs subtract this time from the end time.
     *
     * For information about using offsets for scheduling monitoring jobs, see [Schedule Model Quality Monitoring Jobs](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-batchtransforminput.html#cfn-sagemaker-modelqualityjobdefinition-batchtransforminput-endtimeoffset
     */
    readonly endTimeOffset?: string;

    /**
     * The attribute of the input data that represents the ground truth label.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-batchtransforminput.html#cfn-sagemaker-modelqualityjobdefinition-batchtransforminput-inferenceattribute
     */
    readonly inferenceAttribute?: string;

    /**
     * Path to the filesystem where the batch transform data is available to the container.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-batchtransforminput.html#cfn-sagemaker-modelqualityjobdefinition-batchtransforminput-localpath
     */
    readonly localPath: string;

    /**
     * In a classification problem, the attribute that represents the class probability.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-batchtransforminput.html#cfn-sagemaker-modelqualityjobdefinition-batchtransforminput-probabilityattribute
     */
    readonly probabilityAttribute?: string;

    /**
     * The threshold for the class probability to be evaluated as a positive result.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-batchtransforminput.html#cfn-sagemaker-modelqualityjobdefinition-batchtransforminput-probabilitythresholdattribute
     */
    readonly probabilityThresholdAttribute?: number;

    /**
     * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key.
     *
     * Defaults to `FullyReplicated`
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-batchtransforminput.html#cfn-sagemaker-modelqualityjobdefinition-batchtransforminput-s3datadistributiontype
     */
    readonly s3DataDistributionType?: string;

    /**
     * Whether the `Pipe` or `File` is used as the input mode for transferring data for the monitoring job.
     *
     * `Pipe` mode is recommended for large datasets. `File` mode is useful for small files that fit in memory. Defaults to `File` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-batchtransforminput.html#cfn-sagemaker-modelqualityjobdefinition-batchtransforminput-s3inputmode
     */
    readonly s3InputMode?: string;

    /**
     * If specified, monitoring jobs substract this time from the start time.
     *
     * For information about using offsets for scheduling monitoring jobs, see [Schedule Model Quality Monitoring Jobs](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-batchtransforminput.html#cfn-sagemaker-modelqualityjobdefinition-batchtransforminput-starttimeoffset
     */
    readonly startTimeOffset?: string;
  }

  /**
   * The dataset format of the data to monitor.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-datasetformat.html
   */
  export interface DatasetFormatProperty {
    /**
     * The CSV format.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-datasetformat.html#cfn-sagemaker-modelqualityjobdefinition-datasetformat-csv
     */
    readonly csv?: CfnModelQualityJobDefinition.CsvProperty | cdk.IResolvable;

    /**
     * The Json format.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-datasetformat.html#cfn-sagemaker-modelqualityjobdefinition-datasetformat-json
     */
    readonly json?: cdk.IResolvable | CfnModelQualityJobDefinition.JsonProperty;

    /**
     * A flag indicating if the dataset format is Parquet.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-datasetformat.html#cfn-sagemaker-modelqualityjobdefinition-datasetformat-parquet
     */
    readonly parquet?: boolean | cdk.IResolvable;
  }

  /**
   * The CSV format.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-csv.html
   */
  export interface CsvProperty {
    /**
     * A boolean flag indicating if given CSV has header.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-csv.html#cfn-sagemaker-modelqualityjobdefinition-csv-header
     */
    readonly header?: boolean | cdk.IResolvable;
  }

  /**
   * The Json format.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-json.html
   */
  export interface JsonProperty {
    /**
     * A boolean flag indicating if it is JSON line format.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-json.html#cfn-sagemaker-modelqualityjobdefinition-json-line
     */
    readonly line?: boolean | cdk.IResolvable;
  }

  /**
   * Input object for the endpoint.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-endpointinput.html
   */
  export interface EndpointInputProperty {
    /**
     * An endpoint in customer's account which has enabled `DataCaptureConfig` enabled.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-endpointinput.html#cfn-sagemaker-modelqualityjobdefinition-endpointinput-endpointname
     */
    readonly endpointName: string;

    /**
     * If specified, monitoring jobs substract this time from the end time.
     *
     * For information about using offsets for scheduling monitoring jobs, see [Schedule Model Quality Monitoring Jobs](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-endpointinput.html#cfn-sagemaker-modelqualityjobdefinition-endpointinput-endtimeoffset
     */
    readonly endTimeOffset?: string;

    /**
     * The attribute of the input data that represents the ground truth label.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-endpointinput.html#cfn-sagemaker-modelqualityjobdefinition-endpointinput-inferenceattribute
     */
    readonly inferenceAttribute?: string;

    /**
     * Path to the filesystem where the endpoint data is available to the container.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-endpointinput.html#cfn-sagemaker-modelqualityjobdefinition-endpointinput-localpath
     */
    readonly localPath: string;

    /**
     * In a classification problem, the attribute that represents the class probability.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-endpointinput.html#cfn-sagemaker-modelqualityjobdefinition-endpointinput-probabilityattribute
     */
    readonly probabilityAttribute?: string;

    /**
     * The threshold for the class probability to be evaluated as a positive result.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-endpointinput.html#cfn-sagemaker-modelqualityjobdefinition-endpointinput-probabilitythresholdattribute
     */
    readonly probabilityThresholdAttribute?: number;

    /**
     * Whether input data distributed in Amazon S3 is fully replicated or sharded by an Amazon S3 key.
     *
     * Defaults to `FullyReplicated`
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-endpointinput.html#cfn-sagemaker-modelqualityjobdefinition-endpointinput-s3datadistributiontype
     */
    readonly s3DataDistributionType?: string;

    /**
     * Whether the `Pipe` or `File` is used as the input mode for transferring data for the monitoring job.
     *
     * `Pipe` mode is recommended for large datasets. `File` mode is useful for small files that fit in memory. Defaults to `File` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-endpointinput.html#cfn-sagemaker-modelqualityjobdefinition-endpointinput-s3inputmode
     */
    readonly s3InputMode?: string;

    /**
     * If specified, monitoring jobs substract this time from the start time.
     *
     * For information about using offsets for scheduling monitoring jobs, see [Schedule Model Quality Monitoring Jobs](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-endpointinput.html#cfn-sagemaker-modelqualityjobdefinition-endpointinput-starttimeoffset
     */
    readonly startTimeOffset?: string;
  }

  /**
   * Identifies the resources to deploy for a monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-monitoringresources.html
   */
  export interface MonitoringResourcesProperty {
    /**
     * The configuration for the cluster resources used to run the processing job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-monitoringresources.html#cfn-sagemaker-modelqualityjobdefinition-monitoringresources-clusterconfig
     */
    readonly clusterConfig: CfnModelQualityJobDefinition.ClusterConfigProperty | cdk.IResolvable;
  }

  /**
   * The configuration for the cluster of resources used to run the processing job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-clusterconfig.html
   */
  export interface ClusterConfigProperty {
    /**
     * The number of ML compute instances to use in the model monitoring job.
     *
     * For distributed processing jobs, specify a value greater than 1. The default value is 1.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-clusterconfig.html#cfn-sagemaker-modelqualityjobdefinition-clusterconfig-instancecount
     */
    readonly instanceCount: number;

    /**
     * The ML compute instance type for the processing job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-clusterconfig.html#cfn-sagemaker-modelqualityjobdefinition-clusterconfig-instancetype
     */
    readonly instanceType: string;

    /**
     * The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-clusterconfig.html#cfn-sagemaker-modelqualityjobdefinition-clusterconfig-volumekmskeyid
     */
    readonly volumeKmsKeyId?: string;

    /**
     * The size of the ML storage volume, in gigabytes, that you want to provision.
     *
     * You must specify sufficient ML storage for your scenario.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-clusterconfig.html#cfn-sagemaker-modelqualityjobdefinition-clusterconfig-volumesizeingb
     */
    readonly volumeSizeInGb: number;
  }

  /**
   * Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-networkconfig.html
   */
  export interface NetworkConfigProperty {
    /**
     * Whether to encrypt all communications between distributed processing jobs.
     *
     * Choose `True` to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-networkconfig.html#cfn-sagemaker-modelqualityjobdefinition-networkconfig-enableintercontainertrafficencryption
     */
    readonly enableInterContainerTrafficEncryption?: boolean | cdk.IResolvable;

    /**
     * Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-networkconfig.html#cfn-sagemaker-modelqualityjobdefinition-networkconfig-enablenetworkisolation
     */
    readonly enableNetworkIsolation?: boolean | cdk.IResolvable;

    /**
     * Specifies a VPC that your training jobs and hosted models have access to.
     *
     * Control access to and from your training and model containers by configuring the VPC.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-networkconfig.html#cfn-sagemaker-modelqualityjobdefinition-networkconfig-vpcconfig
     */
    readonly vpcConfig?: cdk.IResolvable | CfnModelQualityJobDefinition.VpcConfigProperty;
  }

  /**
   * Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to.
   *
   * You can control access to and from your resources by configuring a VPC. For more information, see [Give SageMaker Access to Resources in your Amazon VPC](https://docs.aws.amazon.com/https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html) .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-vpcconfig.html
   */
  export interface VpcConfigProperty {
    /**
     * The VPC security group IDs, in the form `sg-xxxxxxxx` .
     *
     * Specify the security groups for the VPC that is specified in the `Subnets` field.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-vpcconfig.html#cfn-sagemaker-modelqualityjobdefinition-vpcconfig-securitygroupids
     */
    readonly securityGroupIds: Array<string>;

    /**
     * The ID of the subnets in the VPC to which you want to connect your training job or model.
     *
     * For information about the availability of specific instance types, see [Supported Instance Types and Availability Zones](https://docs.aws.amazon.com/sagemaker/latest/dg/instance-types-az.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-vpcconfig.html#cfn-sagemaker-modelqualityjobdefinition-vpcconfig-subnets
     */
    readonly subnets: Array<string>;
  }

  /**
   * The output configuration for monitoring jobs.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-monitoringoutputconfig.html
   */
  export interface MonitoringOutputConfigProperty {
    /**
     * The AWS Key Management Service ( AWS KMS ) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-monitoringoutputconfig.html#cfn-sagemaker-modelqualityjobdefinition-monitoringoutputconfig-kmskeyid
     */
    readonly kmsKeyId?: string;

    /**
     * Monitoring outputs for monitoring jobs.
     *
     * This is where the output of the periodic monitoring jobs is uploaded.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-monitoringoutputconfig.html#cfn-sagemaker-modelqualityjobdefinition-monitoringoutputconfig-monitoringoutputs
     */
    readonly monitoringOutputs: Array<cdk.IResolvable | CfnModelQualityJobDefinition.MonitoringOutputProperty> | cdk.IResolvable;
  }

  /**
   * The output object for a monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-monitoringoutput.html
   */
  export interface MonitoringOutputProperty {
    /**
     * The Amazon S3 storage location where the results of a monitoring job are saved.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-monitoringoutput.html#cfn-sagemaker-modelqualityjobdefinition-monitoringoutput-s3output
     */
    readonly s3Output: cdk.IResolvable | CfnModelQualityJobDefinition.S3OutputProperty;
  }

  /**
   * The Amazon S3 storage location where the results of a monitoring job are saved.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-s3output.html
   */
  export interface S3OutputProperty {
    /**
     * The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
     *
     * LocalPath is an absolute path for the output data.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-s3output.html#cfn-sagemaker-modelqualityjobdefinition-s3output-localpath
     */
    readonly localPath: string;

    /**
     * Whether to upload the results of the monitoring job continuously or after the job completes.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-s3output.html#cfn-sagemaker-modelqualityjobdefinition-s3output-s3uploadmode
     */
    readonly s3UploadMode?: string;

    /**
     * A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-s3output.html#cfn-sagemaker-modelqualityjobdefinition-s3output-s3uri
     */
    readonly s3Uri: string;
  }
}

/**
 * Properties for defining a `CfnModelQualityJobDefinition`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelqualityjobdefinition.html
 */
export interface CfnModelQualityJobDefinitionProps {
  /**
   * The name of the endpoint used to run the monitoring job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelqualityjobdefinition.html#cfn-sagemaker-modelqualityjobdefinition-endpointname
   */
  readonly endpointName?: string;

  /**
   * The name of the monitoring job definition.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelqualityjobdefinition.html#cfn-sagemaker-modelqualityjobdefinition-jobdefinitionname
   */
  readonly jobDefinitionName?: string;

  /**
   * Identifies the resources to deploy for a monitoring job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelqualityjobdefinition.html#cfn-sagemaker-modelqualityjobdefinition-jobresources
   */
  readonly jobResources: cdk.IResolvable | CfnModelQualityJobDefinition.MonitoringResourcesProperty;

  /**
   * Container image configuration object for the monitoring job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelqualityjobdefinition.html#cfn-sagemaker-modelqualityjobdefinition-modelqualityappspecification
   */
  readonly modelQualityAppSpecification: cdk.IResolvable | CfnModelQualityJobDefinition.ModelQualityAppSpecificationProperty;

  /**
   * Specifies the constraints and baselines for the monitoring job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelqualityjobdefinition.html#cfn-sagemaker-modelqualityjobdefinition-modelqualitybaselineconfig
   */
  readonly modelQualityBaselineConfig?: cdk.IResolvable | CfnModelQualityJobDefinition.ModelQualityBaselineConfigProperty;

  /**
   * A list of the inputs that are monitored.
   *
   * Currently endpoints are supported.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelqualityjobdefinition.html#cfn-sagemaker-modelqualityjobdefinition-modelqualityjobinput
   */
  readonly modelQualityJobInput: cdk.IResolvable | CfnModelQualityJobDefinition.ModelQualityJobInputProperty;

  /**
   * The output configuration for monitoring jobs.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelqualityjobdefinition.html#cfn-sagemaker-modelqualityjobdefinition-modelqualityjoboutputconfig
   */
  readonly modelQualityJobOutputConfig: cdk.IResolvable | CfnModelQualityJobDefinition.MonitoringOutputConfigProperty;

  /**
   * Specifies the network configuration for the monitoring job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelqualityjobdefinition.html#cfn-sagemaker-modelqualityjobdefinition-networkconfig
   */
  readonly networkConfig?: cdk.IResolvable | CfnModelQualityJobDefinition.NetworkConfigProperty;

  /**
   * The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelqualityjobdefinition.html#cfn-sagemaker-modelqualityjobdefinition-rolearn
   */
  readonly roleArn: string;

  /**
   * A time limit for how long the monitoring job is allowed to run before stopping.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelqualityjobdefinition.html#cfn-sagemaker-modelqualityjobdefinition-stoppingcondition
   */
  readonly stoppingCondition?: cdk.IResolvable | CfnModelQualityJobDefinition.StoppingConditionProperty;

  /**
   * An array of key-value pairs to apply to this resource.
   *
   * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelqualityjobdefinition.html#cfn-sagemaker-modelqualityjobdefinition-tags
   */
  readonly tags?: Array<cdk.CfnTag>;
}

/**
 * Determine whether the given properties match those of a `ModelQualityAppSpecificationProperty`
 *
 * @param properties - the TypeScript properties of a `ModelQualityAppSpecificationProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelQualityJobDefinitionModelQualityAppSpecificationPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("containerArguments", cdk.listValidator(cdk.validateString))(properties.containerArguments));
  errors.collect(cdk.propertyValidator("containerEntrypoint", cdk.listValidator(cdk.validateString))(properties.containerEntrypoint));
  errors.collect(cdk.propertyValidator("environment", cdk.hashValidator(cdk.validateString))(properties.environment));
  errors.collect(cdk.propertyValidator("imageUri", cdk.requiredValidator)(properties.imageUri));
  errors.collect(cdk.propertyValidator("imageUri", cdk.validateString)(properties.imageUri));
  errors.collect(cdk.propertyValidator("postAnalyticsProcessorSourceUri", cdk.validateString)(properties.postAnalyticsProcessorSourceUri));
  errors.collect(cdk.propertyValidator("problemType", cdk.requiredValidator)(properties.problemType));
  errors.collect(cdk.propertyValidator("problemType", cdk.validateString)(properties.problemType));
  errors.collect(cdk.propertyValidator("recordPreprocessorSourceUri", cdk.validateString)(properties.recordPreprocessorSourceUri));
  return errors.wrap("supplied properties not correct for \"ModelQualityAppSpecificationProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelQualityJobDefinitionModelQualityAppSpecificationPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelQualityJobDefinitionModelQualityAppSpecificationPropertyValidator(properties).assertSuccess();
  return {
    "ContainerArguments": cdk.listMapper(cdk.stringToCloudFormation)(properties.containerArguments),
    "ContainerEntrypoint": cdk.listMapper(cdk.stringToCloudFormation)(properties.containerEntrypoint),
    "Environment": cdk.hashMapper(cdk.stringToCloudFormation)(properties.environment),
    "ImageUri": cdk.stringToCloudFormation(properties.imageUri),
    "PostAnalyticsProcessorSourceUri": cdk.stringToCloudFormation(properties.postAnalyticsProcessorSourceUri),
    "ProblemType": cdk.stringToCloudFormation(properties.problemType),
    "RecordPreprocessorSourceUri": cdk.stringToCloudFormation(properties.recordPreprocessorSourceUri)
  };
}

// @ts-ignore TS6133
function CfnModelQualityJobDefinitionModelQualityAppSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelQualityJobDefinition.ModelQualityAppSpecificationProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.ModelQualityAppSpecificationProperty>();
  ret.addPropertyResult("containerArguments", "ContainerArguments", (properties.ContainerArguments != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.ContainerArguments) : undefined));
  ret.addPropertyResult("containerEntrypoint", "ContainerEntrypoint", (properties.ContainerEntrypoint != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.ContainerEntrypoint) : undefined));
  ret.addPropertyResult("environment", "Environment", (properties.Environment != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Environment) : undefined));
  ret.addPropertyResult("imageUri", "ImageUri", (properties.ImageUri != null ? cfn_parse.FromCloudFormation.getString(properties.ImageUri) : undefined));
  ret.addPropertyResult("postAnalyticsProcessorSourceUri", "PostAnalyticsProcessorSourceUri", (properties.PostAnalyticsProcessorSourceUri != null ? cfn_parse.FromCloudFormation.getString(properties.PostAnalyticsProcessorSourceUri) : undefined));
  ret.addPropertyResult("problemType", "ProblemType", (properties.ProblemType != null ? cfn_parse.FromCloudFormation.getString(properties.ProblemType) : undefined));
  ret.addPropertyResult("recordPreprocessorSourceUri", "RecordPreprocessorSourceUri", (properties.RecordPreprocessorSourceUri != null ? cfn_parse.FromCloudFormation.getString(properties.RecordPreprocessorSourceUri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `StoppingConditionProperty`
 *
 * @param properties - the TypeScript properties of a `StoppingConditionProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelQualityJobDefinitionStoppingConditionPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("maxRuntimeInSeconds", cdk.requiredValidator)(properties.maxRuntimeInSeconds));
  errors.collect(cdk.propertyValidator("maxRuntimeInSeconds", cdk.validateNumber)(properties.maxRuntimeInSeconds));
  return errors.wrap("supplied properties not correct for \"StoppingConditionProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelQualityJobDefinitionStoppingConditionPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelQualityJobDefinitionStoppingConditionPropertyValidator(properties).assertSuccess();
  return {
    "MaxRuntimeInSeconds": cdk.numberToCloudFormation(properties.maxRuntimeInSeconds)
  };
}

// @ts-ignore TS6133
function CfnModelQualityJobDefinitionStoppingConditionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelQualityJobDefinition.StoppingConditionProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.StoppingConditionProperty>();
  ret.addPropertyResult("maxRuntimeInSeconds", "MaxRuntimeInSeconds", (properties.MaxRuntimeInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxRuntimeInSeconds) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ConstraintsResourceProperty`
 *
 * @param properties - the TypeScript properties of a `ConstraintsResourceProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelQualityJobDefinitionConstraintsResourcePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("s3Uri", cdk.validateString)(properties.s3Uri));
  return errors.wrap("supplied properties not correct for \"ConstraintsResourceProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelQualityJobDefinitionConstraintsResourcePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelQualityJobDefinitionConstraintsResourcePropertyValidator(properties).assertSuccess();
  return {
    "S3Uri": cdk.stringToCloudFormation(properties.s3Uri)
  };
}

// @ts-ignore TS6133
function CfnModelQualityJobDefinitionConstraintsResourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.ConstraintsResourceProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.ConstraintsResourceProperty>();
  ret.addPropertyResult("s3Uri", "S3Uri", (properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelQualityBaselineConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ModelQualityBaselineConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelQualityJobDefinitionModelQualityBaselineConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("baseliningJobName", cdk.validateString)(properties.baseliningJobName));
  errors.collect(cdk.propertyValidator("constraintsResource", CfnModelQualityJobDefinitionConstraintsResourcePropertyValidator)(properties.constraintsResource));
  return errors.wrap("supplied properties not correct for \"ModelQualityBaselineConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelQualityJobDefinitionModelQualityBaselineConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelQualityJobDefinitionModelQualityBaselineConfigPropertyValidator(properties).assertSuccess();
  return {
    "BaseliningJobName": cdk.stringToCloudFormation(properties.baseliningJobName),
    "ConstraintsResource": convertCfnModelQualityJobDefinitionConstraintsResourcePropertyToCloudFormation(properties.constraintsResource)
  };
}

// @ts-ignore TS6133
function CfnModelQualityJobDefinitionModelQualityBaselineConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelQualityJobDefinition.ModelQualityBaselineConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.ModelQualityBaselineConfigProperty>();
  ret.addPropertyResult("baseliningJobName", "BaseliningJobName", (properties.BaseliningJobName != null ? cfn_parse.FromCloudFormation.getString(properties.BaseliningJobName) : undefined));
  ret.addPropertyResult("constraintsResource", "ConstraintsResource", (properties.ConstraintsResource != null ? CfnModelQualityJobDefinitionConstraintsResourcePropertyFromCloudFormation(properties.ConstraintsResource) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringGroundTruthS3InputProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringGroundTruthS3InputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelQualityJobDefinitionMonitoringGroundTruthS3InputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("s3Uri", cdk.requiredValidator)(properties.s3Uri));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.validateString)(properties.s3Uri));
  return errors.wrap("supplied properties not correct for \"MonitoringGroundTruthS3InputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelQualityJobDefinitionMonitoringGroundTruthS3InputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelQualityJobDefinitionMonitoringGroundTruthS3InputPropertyValidator(properties).assertSuccess();
  return {
    "S3Uri": cdk.stringToCloudFormation(properties.s3Uri)
  };
}

// @ts-ignore TS6133
function CfnModelQualityJobDefinitionMonitoringGroundTruthS3InputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelQualityJobDefinition.MonitoringGroundTruthS3InputProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.MonitoringGroundTruthS3InputProperty>();
  ret.addPropertyResult("s3Uri", "S3Uri", (properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CsvProperty`
 *
 * @param properties - the TypeScript properties of a `CsvProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelQualityJobDefinitionCsvPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("header", cdk.validateBoolean)(properties.header));
  return errors.wrap("supplied properties not correct for \"CsvProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelQualityJobDefinitionCsvPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelQualityJobDefinitionCsvPropertyValidator(properties).assertSuccess();
  return {
    "Header": cdk.booleanToCloudFormation(properties.header)
  };
}

// @ts-ignore TS6133
function CfnModelQualityJobDefinitionCsvPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.CsvProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.CsvProperty>();
  ret.addPropertyResult("header", "Header", (properties.Header != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Header) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `JsonProperty`
 *
 * @param properties - the TypeScript properties of a `JsonProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelQualityJobDefinitionJsonPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("line", cdk.validateBoolean)(properties.line));
  return errors.wrap("supplied properties not correct for \"JsonProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelQualityJobDefinitionJsonPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelQualityJobDefinitionJsonPropertyValidator(properties).assertSuccess();
  return {
    "Line": cdk.booleanToCloudFormation(properties.line)
  };
}

// @ts-ignore TS6133
function CfnModelQualityJobDefinitionJsonPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelQualityJobDefinition.JsonProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.JsonProperty>();
  ret.addPropertyResult("line", "Line", (properties.Line != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Line) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DatasetFormatProperty`
 *
 * @param properties - the TypeScript properties of a `DatasetFormatProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelQualityJobDefinitionDatasetFormatPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("csv", CfnModelQualityJobDefinitionCsvPropertyValidator)(properties.csv));
  errors.collect(cdk.propertyValidator("json", CfnModelQualityJobDefinitionJsonPropertyValidator)(properties.json));
  errors.collect(cdk.propertyValidator("parquet", cdk.validateBoolean)(properties.parquet));
  return errors.wrap("supplied properties not correct for \"DatasetFormatProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelQualityJobDefinitionDatasetFormatPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelQualityJobDefinitionDatasetFormatPropertyValidator(properties).assertSuccess();
  return {
    "Csv": convertCfnModelQualityJobDefinitionCsvPropertyToCloudFormation(properties.csv),
    "Json": convertCfnModelQualityJobDefinitionJsonPropertyToCloudFormation(properties.json),
    "Parquet": cdk.booleanToCloudFormation(properties.parquet)
  };
}

// @ts-ignore TS6133
function CfnModelQualityJobDefinitionDatasetFormatPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.DatasetFormatProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.DatasetFormatProperty>();
  ret.addPropertyResult("csv", "Csv", (properties.Csv != null ? CfnModelQualityJobDefinitionCsvPropertyFromCloudFormation(properties.Csv) : undefined));
  ret.addPropertyResult("json", "Json", (properties.Json != null ? CfnModelQualityJobDefinitionJsonPropertyFromCloudFormation(properties.Json) : undefined));
  ret.addPropertyResult("parquet", "Parquet", (properties.Parquet != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Parquet) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `BatchTransformInputProperty`
 *
 * @param properties - the TypeScript properties of a `BatchTransformInputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelQualityJobDefinitionBatchTransformInputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("dataCapturedDestinationS3Uri", cdk.requiredValidator)(properties.dataCapturedDestinationS3Uri));
  errors.collect(cdk.propertyValidator("dataCapturedDestinationS3Uri", cdk.validateString)(properties.dataCapturedDestinationS3Uri));
  errors.collect(cdk.propertyValidator("datasetFormat", cdk.requiredValidator)(properties.datasetFormat));
  errors.collect(cdk.propertyValidator("datasetFormat", CfnModelQualityJobDefinitionDatasetFormatPropertyValidator)(properties.datasetFormat));
  errors.collect(cdk.propertyValidator("endTimeOffset", cdk.validateString)(properties.endTimeOffset));
  errors.collect(cdk.propertyValidator("inferenceAttribute", cdk.validateString)(properties.inferenceAttribute));
  errors.collect(cdk.propertyValidator("localPath", cdk.requiredValidator)(properties.localPath));
  errors.collect(cdk.propertyValidator("localPath", cdk.validateString)(properties.localPath));
  errors.collect(cdk.propertyValidator("probabilityAttribute", cdk.validateString)(properties.probabilityAttribute));
  errors.collect(cdk.propertyValidator("probabilityThresholdAttribute", cdk.validateNumber)(properties.probabilityThresholdAttribute));
  errors.collect(cdk.propertyValidator("s3DataDistributionType", cdk.validateString)(properties.s3DataDistributionType));
  errors.collect(cdk.propertyValidator("s3InputMode", cdk.validateString)(properties.s3InputMode));
  errors.collect(cdk.propertyValidator("startTimeOffset", cdk.validateString)(properties.startTimeOffset));
  return errors.wrap("supplied properties not correct for \"BatchTransformInputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelQualityJobDefinitionBatchTransformInputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelQualityJobDefinitionBatchTransformInputPropertyValidator(properties).assertSuccess();
  return {
    "DataCapturedDestinationS3Uri": cdk.stringToCloudFormation(properties.dataCapturedDestinationS3Uri),
    "DatasetFormat": convertCfnModelQualityJobDefinitionDatasetFormatPropertyToCloudFormation(properties.datasetFormat),
    "EndTimeOffset": cdk.stringToCloudFormation(properties.endTimeOffset),
    "InferenceAttribute": cdk.stringToCloudFormation(properties.inferenceAttribute),
    "LocalPath": cdk.stringToCloudFormation(properties.localPath),
    "ProbabilityAttribute": cdk.stringToCloudFormation(properties.probabilityAttribute),
    "ProbabilityThresholdAttribute": cdk.numberToCloudFormation(properties.probabilityThresholdAttribute),
    "S3DataDistributionType": cdk.stringToCloudFormation(properties.s3DataDistributionType),
    "S3InputMode": cdk.stringToCloudFormation(properties.s3InputMode),
    "StartTimeOffset": cdk.stringToCloudFormation(properties.startTimeOffset)
  };
}

// @ts-ignore TS6133
function CfnModelQualityJobDefinitionBatchTransformInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.BatchTransformInputProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.BatchTransformInputProperty>();
  ret.addPropertyResult("dataCapturedDestinationS3Uri", "DataCapturedDestinationS3Uri", (properties.DataCapturedDestinationS3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.DataCapturedDestinationS3Uri) : undefined));
  ret.addPropertyResult("datasetFormat", "DatasetFormat", (properties.DatasetFormat != null ? CfnModelQualityJobDefinitionDatasetFormatPropertyFromCloudFormation(properties.DatasetFormat) : undefined));
  ret.addPropertyResult("endTimeOffset", "EndTimeOffset", (properties.EndTimeOffset != null ? cfn_parse.FromCloudFormation.getString(properties.EndTimeOffset) : undefined));
  ret.addPropertyResult("inferenceAttribute", "InferenceAttribute", (properties.InferenceAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.InferenceAttribute) : undefined));
  ret.addPropertyResult("localPath", "LocalPath", (properties.LocalPath != null ? cfn_parse.FromCloudFormation.getString(properties.LocalPath) : undefined));
  ret.addPropertyResult("probabilityAttribute", "ProbabilityAttribute", (properties.ProbabilityAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.ProbabilityAttribute) : undefined));
  ret.addPropertyResult("probabilityThresholdAttribute", "ProbabilityThresholdAttribute", (properties.ProbabilityThresholdAttribute != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProbabilityThresholdAttribute) : undefined));
  ret.addPropertyResult("s3DataDistributionType", "S3DataDistributionType", (properties.S3DataDistributionType != null ? cfn_parse.FromCloudFormation.getString(properties.S3DataDistributionType) : undefined));
  ret.addPropertyResult("s3InputMode", "S3InputMode", (properties.S3InputMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3InputMode) : undefined));
  ret.addPropertyResult("startTimeOffset", "StartTimeOffset", (properties.StartTimeOffset != null ? cfn_parse.FromCloudFormation.getString(properties.StartTimeOffset) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `EndpointInputProperty`
 *
 * @param properties - the TypeScript properties of a `EndpointInputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelQualityJobDefinitionEndpointInputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("endTimeOffset", cdk.validateString)(properties.endTimeOffset));
  errors.collect(cdk.propertyValidator("endpointName", cdk.requiredValidator)(properties.endpointName));
  errors.collect(cdk.propertyValidator("endpointName", cdk.validateString)(properties.endpointName));
  errors.collect(cdk.propertyValidator("inferenceAttribute", cdk.validateString)(properties.inferenceAttribute));
  errors.collect(cdk.propertyValidator("localPath", cdk.requiredValidator)(properties.localPath));
  errors.collect(cdk.propertyValidator("localPath", cdk.validateString)(properties.localPath));
  errors.collect(cdk.propertyValidator("probabilityAttribute", cdk.validateString)(properties.probabilityAttribute));
  errors.collect(cdk.propertyValidator("probabilityThresholdAttribute", cdk.validateNumber)(properties.probabilityThresholdAttribute));
  errors.collect(cdk.propertyValidator("s3DataDistributionType", cdk.validateString)(properties.s3DataDistributionType));
  errors.collect(cdk.propertyValidator("s3InputMode", cdk.validateString)(properties.s3InputMode));
  errors.collect(cdk.propertyValidator("startTimeOffset", cdk.validateString)(properties.startTimeOffset));
  return errors.wrap("supplied properties not correct for \"EndpointInputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelQualityJobDefinitionEndpointInputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelQualityJobDefinitionEndpointInputPropertyValidator(properties).assertSuccess();
  return {
    "EndTimeOffset": cdk.stringToCloudFormation(properties.endTimeOffset),
    "EndpointName": cdk.stringToCloudFormation(properties.endpointName),
    "InferenceAttribute": cdk.stringToCloudFormation(properties.inferenceAttribute),
    "LocalPath": cdk.stringToCloudFormation(properties.localPath),
    "ProbabilityAttribute": cdk.stringToCloudFormation(properties.probabilityAttribute),
    "ProbabilityThresholdAttribute": cdk.numberToCloudFormation(properties.probabilityThresholdAttribute),
    "S3DataDistributionType": cdk.stringToCloudFormation(properties.s3DataDistributionType),
    "S3InputMode": cdk.stringToCloudFormation(properties.s3InputMode),
    "StartTimeOffset": cdk.stringToCloudFormation(properties.startTimeOffset)
  };
}

// @ts-ignore TS6133
function CfnModelQualityJobDefinitionEndpointInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.EndpointInputProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.EndpointInputProperty>();
  ret.addPropertyResult("endpointName", "EndpointName", (properties.EndpointName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointName) : undefined));
  ret.addPropertyResult("endTimeOffset", "EndTimeOffset", (properties.EndTimeOffset != null ? cfn_parse.FromCloudFormation.getString(properties.EndTimeOffset) : undefined));
  ret.addPropertyResult("inferenceAttribute", "InferenceAttribute", (properties.InferenceAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.InferenceAttribute) : undefined));
  ret.addPropertyResult("localPath", "LocalPath", (properties.LocalPath != null ? cfn_parse.FromCloudFormation.getString(properties.LocalPath) : undefined));
  ret.addPropertyResult("probabilityAttribute", "ProbabilityAttribute", (properties.ProbabilityAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.ProbabilityAttribute) : undefined));
  ret.addPropertyResult("probabilityThresholdAttribute", "ProbabilityThresholdAttribute", (properties.ProbabilityThresholdAttribute != null ? cfn_parse.FromCloudFormation.getNumber(properties.ProbabilityThresholdAttribute) : undefined));
  ret.addPropertyResult("s3DataDistributionType", "S3DataDistributionType", (properties.S3DataDistributionType != null ? cfn_parse.FromCloudFormation.getString(properties.S3DataDistributionType) : undefined));
  ret.addPropertyResult("s3InputMode", "S3InputMode", (properties.S3InputMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3InputMode) : undefined));
  ret.addPropertyResult("startTimeOffset", "StartTimeOffset", (properties.StartTimeOffset != null ? cfn_parse.FromCloudFormation.getString(properties.StartTimeOffset) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ModelQualityJobInputProperty`
 *
 * @param properties - the TypeScript properties of a `ModelQualityJobInputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelQualityJobDefinitionModelQualityJobInputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("batchTransformInput", CfnModelQualityJobDefinitionBatchTransformInputPropertyValidator)(properties.batchTransformInput));
  errors.collect(cdk.propertyValidator("endpointInput", CfnModelQualityJobDefinitionEndpointInputPropertyValidator)(properties.endpointInput));
  errors.collect(cdk.propertyValidator("groundTruthS3Input", cdk.requiredValidator)(properties.groundTruthS3Input));
  errors.collect(cdk.propertyValidator("groundTruthS3Input", CfnModelQualityJobDefinitionMonitoringGroundTruthS3InputPropertyValidator)(properties.groundTruthS3Input));
  return errors.wrap("supplied properties not correct for \"ModelQualityJobInputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelQualityJobDefinitionModelQualityJobInputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelQualityJobDefinitionModelQualityJobInputPropertyValidator(properties).assertSuccess();
  return {
    "BatchTransformInput": convertCfnModelQualityJobDefinitionBatchTransformInputPropertyToCloudFormation(properties.batchTransformInput),
    "EndpointInput": convertCfnModelQualityJobDefinitionEndpointInputPropertyToCloudFormation(properties.endpointInput),
    "GroundTruthS3Input": convertCfnModelQualityJobDefinitionMonitoringGroundTruthS3InputPropertyToCloudFormation(properties.groundTruthS3Input)
  };
}

// @ts-ignore TS6133
function CfnModelQualityJobDefinitionModelQualityJobInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelQualityJobDefinition.ModelQualityJobInputProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.ModelQualityJobInputProperty>();
  ret.addPropertyResult("batchTransformInput", "BatchTransformInput", (properties.BatchTransformInput != null ? CfnModelQualityJobDefinitionBatchTransformInputPropertyFromCloudFormation(properties.BatchTransformInput) : undefined));
  ret.addPropertyResult("endpointInput", "EndpointInput", (properties.EndpointInput != null ? CfnModelQualityJobDefinitionEndpointInputPropertyFromCloudFormation(properties.EndpointInput) : undefined));
  ret.addPropertyResult("groundTruthS3Input", "GroundTruthS3Input", (properties.GroundTruthS3Input != null ? CfnModelQualityJobDefinitionMonitoringGroundTruthS3InputPropertyFromCloudFormation(properties.GroundTruthS3Input) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ClusterConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ClusterConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelQualityJobDefinitionClusterConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("instanceCount", cdk.requiredValidator)(properties.instanceCount));
  errors.collect(cdk.propertyValidator("instanceCount", cdk.validateNumber)(properties.instanceCount));
  errors.collect(cdk.propertyValidator("instanceType", cdk.requiredValidator)(properties.instanceType));
  errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
  errors.collect(cdk.propertyValidator("volumeKmsKeyId", cdk.validateString)(properties.volumeKmsKeyId));
  errors.collect(cdk.propertyValidator("volumeSizeInGb", cdk.requiredValidator)(properties.volumeSizeInGb));
  errors.collect(cdk.propertyValidator("volumeSizeInGb", cdk.validateNumber)(properties.volumeSizeInGb));
  return errors.wrap("supplied properties not correct for \"ClusterConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelQualityJobDefinitionClusterConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelQualityJobDefinitionClusterConfigPropertyValidator(properties).assertSuccess();
  return {
    "InstanceCount": cdk.numberToCloudFormation(properties.instanceCount),
    "InstanceType": cdk.stringToCloudFormation(properties.instanceType),
    "VolumeKmsKeyId": cdk.stringToCloudFormation(properties.volumeKmsKeyId),
    "VolumeSizeInGB": cdk.numberToCloudFormation(properties.volumeSizeInGb)
  };
}

// @ts-ignore TS6133
function CfnModelQualityJobDefinitionClusterConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinition.ClusterConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.ClusterConfigProperty>();
  ret.addPropertyResult("instanceCount", "InstanceCount", (properties.InstanceCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.InstanceCount) : undefined));
  ret.addPropertyResult("instanceType", "InstanceType", (properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined));
  ret.addPropertyResult("volumeKmsKeyId", "VolumeKmsKeyId", (properties.VolumeKmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeKmsKeyId) : undefined));
  ret.addPropertyResult("volumeSizeInGb", "VolumeSizeInGB", (properties.VolumeSizeInGB != null ? cfn_parse.FromCloudFormation.getNumber(properties.VolumeSizeInGB) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringResourcesProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringResourcesProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelQualityJobDefinitionMonitoringResourcesPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("clusterConfig", cdk.requiredValidator)(properties.clusterConfig));
  errors.collect(cdk.propertyValidator("clusterConfig", CfnModelQualityJobDefinitionClusterConfigPropertyValidator)(properties.clusterConfig));
  return errors.wrap("supplied properties not correct for \"MonitoringResourcesProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelQualityJobDefinitionMonitoringResourcesPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelQualityJobDefinitionMonitoringResourcesPropertyValidator(properties).assertSuccess();
  return {
    "ClusterConfig": convertCfnModelQualityJobDefinitionClusterConfigPropertyToCloudFormation(properties.clusterConfig)
  };
}

// @ts-ignore TS6133
function CfnModelQualityJobDefinitionMonitoringResourcesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelQualityJobDefinition.MonitoringResourcesProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.MonitoringResourcesProperty>();
  ret.addPropertyResult("clusterConfig", "ClusterConfig", (properties.ClusterConfig != null ? CfnModelQualityJobDefinitionClusterConfigPropertyFromCloudFormation(properties.ClusterConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `VpcConfigProperty`
 *
 * @param properties - the TypeScript properties of a `VpcConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelQualityJobDefinitionVpcConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("securityGroupIds", cdk.requiredValidator)(properties.securityGroupIds));
  errors.collect(cdk.propertyValidator("securityGroupIds", cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
  errors.collect(cdk.propertyValidator("subnets", cdk.requiredValidator)(properties.subnets));
  errors.collect(cdk.propertyValidator("subnets", cdk.listValidator(cdk.validateString))(properties.subnets));
  return errors.wrap("supplied properties not correct for \"VpcConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelQualityJobDefinitionVpcConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelQualityJobDefinitionVpcConfigPropertyValidator(properties).assertSuccess();
  return {
    "SecurityGroupIds": cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
    "Subnets": cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets)
  };
}

// @ts-ignore TS6133
function CfnModelQualityJobDefinitionVpcConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelQualityJobDefinition.VpcConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.VpcConfigProperty>();
  ret.addPropertyResult("securityGroupIds", "SecurityGroupIds", (properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SecurityGroupIds) : undefined));
  ret.addPropertyResult("subnets", "Subnets", (properties.Subnets != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.Subnets) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `NetworkConfigProperty`
 *
 * @param properties - the TypeScript properties of a `NetworkConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelQualityJobDefinitionNetworkConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("enableInterContainerTrafficEncryption", cdk.validateBoolean)(properties.enableInterContainerTrafficEncryption));
  errors.collect(cdk.propertyValidator("enableNetworkIsolation", cdk.validateBoolean)(properties.enableNetworkIsolation));
  errors.collect(cdk.propertyValidator("vpcConfig", CfnModelQualityJobDefinitionVpcConfigPropertyValidator)(properties.vpcConfig));
  return errors.wrap("supplied properties not correct for \"NetworkConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelQualityJobDefinitionNetworkConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelQualityJobDefinitionNetworkConfigPropertyValidator(properties).assertSuccess();
  return {
    "EnableInterContainerTrafficEncryption": cdk.booleanToCloudFormation(properties.enableInterContainerTrafficEncryption),
    "EnableNetworkIsolation": cdk.booleanToCloudFormation(properties.enableNetworkIsolation),
    "VpcConfig": convertCfnModelQualityJobDefinitionVpcConfigPropertyToCloudFormation(properties.vpcConfig)
  };
}

// @ts-ignore TS6133
function CfnModelQualityJobDefinitionNetworkConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelQualityJobDefinition.NetworkConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.NetworkConfigProperty>();
  ret.addPropertyResult("enableInterContainerTrafficEncryption", "EnableInterContainerTrafficEncryption", (properties.EnableInterContainerTrafficEncryption != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableInterContainerTrafficEncryption) : undefined));
  ret.addPropertyResult("enableNetworkIsolation", "EnableNetworkIsolation", (properties.EnableNetworkIsolation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableNetworkIsolation) : undefined));
  ret.addPropertyResult("vpcConfig", "VpcConfig", (properties.VpcConfig != null ? CfnModelQualityJobDefinitionVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `S3OutputProperty`
 *
 * @param properties - the TypeScript properties of a `S3OutputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelQualityJobDefinitionS3OutputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("localPath", cdk.requiredValidator)(properties.localPath));
  errors.collect(cdk.propertyValidator("localPath", cdk.validateString)(properties.localPath));
  errors.collect(cdk.propertyValidator("s3UploadMode", cdk.validateString)(properties.s3UploadMode));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.requiredValidator)(properties.s3Uri));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.validateString)(properties.s3Uri));
  return errors.wrap("supplied properties not correct for \"S3OutputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelQualityJobDefinitionS3OutputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelQualityJobDefinitionS3OutputPropertyValidator(properties).assertSuccess();
  return {
    "LocalPath": cdk.stringToCloudFormation(properties.localPath),
    "S3UploadMode": cdk.stringToCloudFormation(properties.s3UploadMode),
    "S3Uri": cdk.stringToCloudFormation(properties.s3Uri)
  };
}

// @ts-ignore TS6133
function CfnModelQualityJobDefinitionS3OutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelQualityJobDefinition.S3OutputProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.S3OutputProperty>();
  ret.addPropertyResult("localPath", "LocalPath", (properties.LocalPath != null ? cfn_parse.FromCloudFormation.getString(properties.LocalPath) : undefined));
  ret.addPropertyResult("s3UploadMode", "S3UploadMode", (properties.S3UploadMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3UploadMode) : undefined));
  ret.addPropertyResult("s3Uri", "S3Uri", (properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringOutputProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringOutputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelQualityJobDefinitionMonitoringOutputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("s3Output", cdk.requiredValidator)(properties.s3Output));
  errors.collect(cdk.propertyValidator("s3Output", CfnModelQualityJobDefinitionS3OutputPropertyValidator)(properties.s3Output));
  return errors.wrap("supplied properties not correct for \"MonitoringOutputProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelQualityJobDefinitionMonitoringOutputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelQualityJobDefinitionMonitoringOutputPropertyValidator(properties).assertSuccess();
  return {
    "S3Output": convertCfnModelQualityJobDefinitionS3OutputPropertyToCloudFormation(properties.s3Output)
  };
}

// @ts-ignore TS6133
function CfnModelQualityJobDefinitionMonitoringOutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelQualityJobDefinition.MonitoringOutputProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.MonitoringOutputProperty>();
  ret.addPropertyResult("s3Output", "S3Output", (properties.S3Output != null ? CfnModelQualityJobDefinitionS3OutputPropertyFromCloudFormation(properties.S3Output) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringOutputConfigProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringOutputConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelQualityJobDefinitionMonitoringOutputConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("kmsKeyId", cdk.validateString)(properties.kmsKeyId));
  errors.collect(cdk.propertyValidator("monitoringOutputs", cdk.requiredValidator)(properties.monitoringOutputs));
  errors.collect(cdk.propertyValidator("monitoringOutputs", cdk.listValidator(CfnModelQualityJobDefinitionMonitoringOutputPropertyValidator))(properties.monitoringOutputs));
  return errors.wrap("supplied properties not correct for \"MonitoringOutputConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnModelQualityJobDefinitionMonitoringOutputConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelQualityJobDefinitionMonitoringOutputConfigPropertyValidator(properties).assertSuccess();
  return {
    "KmsKeyId": cdk.stringToCloudFormation(properties.kmsKeyId),
    "MonitoringOutputs": cdk.listMapper(convertCfnModelQualityJobDefinitionMonitoringOutputPropertyToCloudFormation)(properties.monitoringOutputs)
  };
}

// @ts-ignore TS6133
function CfnModelQualityJobDefinitionMonitoringOutputConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnModelQualityJobDefinition.MonitoringOutputConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinition.MonitoringOutputConfigProperty>();
  ret.addPropertyResult("kmsKeyId", "KmsKeyId", (properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined));
  ret.addPropertyResult("monitoringOutputs", "MonitoringOutputs", (properties.MonitoringOutputs != null ? cfn_parse.FromCloudFormation.getArray(CfnModelQualityJobDefinitionMonitoringOutputPropertyFromCloudFormation)(properties.MonitoringOutputs) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnModelQualityJobDefinitionProps`
 *
 * @param properties - the TypeScript properties of a `CfnModelQualityJobDefinitionProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnModelQualityJobDefinitionPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("endpointName", cdk.validateString)(properties.endpointName));
  errors.collect(cdk.propertyValidator("jobDefinitionName", cdk.validateString)(properties.jobDefinitionName));
  errors.collect(cdk.propertyValidator("jobResources", cdk.requiredValidator)(properties.jobResources));
  errors.collect(cdk.propertyValidator("jobResources", CfnModelQualityJobDefinitionMonitoringResourcesPropertyValidator)(properties.jobResources));
  errors.collect(cdk.propertyValidator("modelQualityAppSpecification", cdk.requiredValidator)(properties.modelQualityAppSpecification));
  errors.collect(cdk.propertyValidator("modelQualityAppSpecification", CfnModelQualityJobDefinitionModelQualityAppSpecificationPropertyValidator)(properties.modelQualityAppSpecification));
  errors.collect(cdk.propertyValidator("modelQualityBaselineConfig", CfnModelQualityJobDefinitionModelQualityBaselineConfigPropertyValidator)(properties.modelQualityBaselineConfig));
  errors.collect(cdk.propertyValidator("modelQualityJobInput", cdk.requiredValidator)(properties.modelQualityJobInput));
  errors.collect(cdk.propertyValidator("modelQualityJobInput", CfnModelQualityJobDefinitionModelQualityJobInputPropertyValidator)(properties.modelQualityJobInput));
  errors.collect(cdk.propertyValidator("modelQualityJobOutputConfig", cdk.requiredValidator)(properties.modelQualityJobOutputConfig));
  errors.collect(cdk.propertyValidator("modelQualityJobOutputConfig", CfnModelQualityJobDefinitionMonitoringOutputConfigPropertyValidator)(properties.modelQualityJobOutputConfig));
  errors.collect(cdk.propertyValidator("networkConfig", CfnModelQualityJobDefinitionNetworkConfigPropertyValidator)(properties.networkConfig));
  errors.collect(cdk.propertyValidator("roleArn", cdk.requiredValidator)(properties.roleArn));
  errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
  errors.collect(cdk.propertyValidator("stoppingCondition", CfnModelQualityJobDefinitionStoppingConditionPropertyValidator)(properties.stoppingCondition));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  return errors.wrap("supplied properties not correct for \"CfnModelQualityJobDefinitionProps\"");
}

// @ts-ignore TS6133
function convertCfnModelQualityJobDefinitionPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnModelQualityJobDefinitionPropsValidator(properties).assertSuccess();
  return {
    "EndpointName": cdk.stringToCloudFormation(properties.endpointName),
    "JobDefinitionName": cdk.stringToCloudFormation(properties.jobDefinitionName),
    "JobResources": convertCfnModelQualityJobDefinitionMonitoringResourcesPropertyToCloudFormation(properties.jobResources),
    "ModelQualityAppSpecification": convertCfnModelQualityJobDefinitionModelQualityAppSpecificationPropertyToCloudFormation(properties.modelQualityAppSpecification),
    "ModelQualityBaselineConfig": convertCfnModelQualityJobDefinitionModelQualityBaselineConfigPropertyToCloudFormation(properties.modelQualityBaselineConfig),
    "ModelQualityJobInput": convertCfnModelQualityJobDefinitionModelQualityJobInputPropertyToCloudFormation(properties.modelQualityJobInput),
    "ModelQualityJobOutputConfig": convertCfnModelQualityJobDefinitionMonitoringOutputConfigPropertyToCloudFormation(properties.modelQualityJobOutputConfig),
    "NetworkConfig": convertCfnModelQualityJobDefinitionNetworkConfigPropertyToCloudFormation(properties.networkConfig),
    "RoleArn": cdk.stringToCloudFormation(properties.roleArn),
    "StoppingCondition": convertCfnModelQualityJobDefinitionStoppingConditionPropertyToCloudFormation(properties.stoppingCondition),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
  };
}

// @ts-ignore TS6133
function CfnModelQualityJobDefinitionPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnModelQualityJobDefinitionProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnModelQualityJobDefinitionProps>();
  ret.addPropertyResult("endpointName", "EndpointName", (properties.EndpointName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointName) : undefined));
  ret.addPropertyResult("jobDefinitionName", "JobDefinitionName", (properties.JobDefinitionName != null ? cfn_parse.FromCloudFormation.getString(properties.JobDefinitionName) : undefined));
  ret.addPropertyResult("jobResources", "JobResources", (properties.JobResources != null ? CfnModelQualityJobDefinitionMonitoringResourcesPropertyFromCloudFormation(properties.JobResources) : undefined));
  ret.addPropertyResult("modelQualityAppSpecification", "ModelQualityAppSpecification", (properties.ModelQualityAppSpecification != null ? CfnModelQualityJobDefinitionModelQualityAppSpecificationPropertyFromCloudFormation(properties.ModelQualityAppSpecification) : undefined));
  ret.addPropertyResult("modelQualityBaselineConfig", "ModelQualityBaselineConfig", (properties.ModelQualityBaselineConfig != null ? CfnModelQualityJobDefinitionModelQualityBaselineConfigPropertyFromCloudFormation(properties.ModelQualityBaselineConfig) : undefined));
  ret.addPropertyResult("modelQualityJobInput", "ModelQualityJobInput", (properties.ModelQualityJobInput != null ? CfnModelQualityJobDefinitionModelQualityJobInputPropertyFromCloudFormation(properties.ModelQualityJobInput) : undefined));
  ret.addPropertyResult("modelQualityJobOutputConfig", "ModelQualityJobOutputConfig", (properties.ModelQualityJobOutputConfig != null ? CfnModelQualityJobDefinitionMonitoringOutputConfigPropertyFromCloudFormation(properties.ModelQualityJobOutputConfig) : undefined));
  ret.addPropertyResult("networkConfig", "NetworkConfig", (properties.NetworkConfig != null ? CfnModelQualityJobDefinitionNetworkConfigPropertyFromCloudFormation(properties.NetworkConfig) : undefined));
  ret.addPropertyResult("roleArn", "RoleArn", (properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined));
  ret.addPropertyResult("stoppingCondition", "StoppingCondition", (properties.StoppingCondition != null ? CfnModelQualityJobDefinitionStoppingConditionPropertyFromCloudFormation(properties.StoppingCondition) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * The `AWS::SageMaker::MonitoringSchedule` resource is an Amazon SageMaker resource type that regularly starts SageMaker processing Jobs to monitor the data captured for a SageMaker endpoint.
 *
 * @cloudformationResource AWS::SageMaker::MonitoringSchedule
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-monitoringschedule.html
 */
export class CfnMonitoringSchedule extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::MonitoringSchedule";

  /**
   * Build a CfnMonitoringSchedule from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnMonitoringSchedule {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnMonitoringSchedulePropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnMonitoringSchedule(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The time when the monitoring schedule was created.
   *
   * @cloudformationAttribute CreationTime
   */
  public readonly attrCreationTime: string;

  /**
   * The last time that the monitoring schedule was modified.
   *
   * @cloudformationAttribute LastModifiedTime
   */
  public readonly attrLastModifiedTime: string;

  /**
   * The Amazon Resource Name (ARN) of the monitoring schedule.
   *
   * @cloudformationAttribute MonitoringScheduleArn
   */
  public readonly attrMonitoringScheduleArn: string;

  /**
   * The name of the endpoint using the monitoring schedule.
   */
  public endpointName?: string;

  /**
   * Contains the reason a monitoring job failed, if it failed.
   */
  public failureReason?: string;

  /**
   * Describes metadata on the last execution to run, if there was one.
   */
  public lastMonitoringExecutionSummary?: cdk.IResolvable | CfnMonitoringSchedule.MonitoringExecutionSummaryProperty;

  /**
   * The configuration object that specifies the monitoring schedule and defines the monitoring job.
   */
  public monitoringScheduleConfig: cdk.IResolvable | CfnMonitoringSchedule.MonitoringScheduleConfigProperty;

  /**
   * The name of the monitoring schedule.
   */
  public monitoringScheduleName: string;

  /**
   * The status of the monitoring schedule.
   */
  public monitoringScheduleStatus?: string;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * An array of key-value pairs to apply to this resource.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnMonitoringScheduleProps) {
    super(scope, id, {
      "type": CfnMonitoringSchedule.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "monitoringScheduleConfig", this);
    cdk.requireProperty(props, "monitoringScheduleName", this);

    this.attrCreationTime = cdk.Token.asString(this.getAtt("CreationTime", cdk.ResolutionTypeHint.STRING));
    this.attrLastModifiedTime = cdk.Token.asString(this.getAtt("LastModifiedTime", cdk.ResolutionTypeHint.STRING));
    this.attrMonitoringScheduleArn = cdk.Token.asString(this.getAtt("MonitoringScheduleArn", cdk.ResolutionTypeHint.STRING));
    this.endpointName = props.endpointName;
    this.failureReason = props.failureReason;
    this.lastMonitoringExecutionSummary = props.lastMonitoringExecutionSummary;
    this.monitoringScheduleConfig = props.monitoringScheduleConfig;
    this.monitoringScheduleName = props.monitoringScheduleName;
    this.monitoringScheduleStatus = props.monitoringScheduleStatus;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::MonitoringSchedule", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "endpointName": this.endpointName,
      "failureReason": this.failureReason,
      "lastMonitoringExecutionSummary": this.lastMonitoringExecutionSummary,
      "monitoringScheduleConfig": this.monitoringScheduleConfig,
      "monitoringScheduleName": this.monitoringScheduleName,
      "monitoringScheduleStatus": this.monitoringScheduleStatus,
      "tags": this.tags.renderTags()
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnMonitoringSchedule.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnMonitoringSchedulePropsToCloudFormation(props);
  }
}

export namespace CfnMonitoringSchedule {
  /**
   * Configures the monitoring schedule and defines the monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringscheduleconfig.html
   */
  export interface MonitoringScheduleConfigProperty {
    /**
     * Defines the monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringscheduleconfig.html#cfn-sagemaker-monitoringschedule-monitoringscheduleconfig-monitoringjobdefinition
     */
    readonly monitoringJobDefinition?: cdk.IResolvable | CfnMonitoringSchedule.MonitoringJobDefinitionProperty;

    /**
     * The name of the monitoring job definition to schedule.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringscheduleconfig.html#cfn-sagemaker-monitoringschedule-monitoringscheduleconfig-monitoringjobdefinitionname
     */
    readonly monitoringJobDefinitionName?: string;

    /**
     * The type of the monitoring job definition to schedule.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringscheduleconfig.html#cfn-sagemaker-monitoringschedule-monitoringscheduleconfig-monitoringtype
     */
    readonly monitoringType?: string;

    /**
     * Configures the monitoring schedule.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringscheduleconfig.html#cfn-sagemaker-monitoringschedule-monitoringscheduleconfig-scheduleconfig
     */
    readonly scheduleConfig?: cdk.IResolvable | CfnMonitoringSchedule.ScheduleConfigProperty;
  }

  /**
   * Configuration details about the monitoring schedule.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-scheduleconfig.html
   */
  export interface ScheduleConfigProperty {
    /**
     * Sets the end time for a monitoring job window.
     *
     * Express this time as an offset to the times that you schedule your monitoring jobs to run. You schedule monitoring jobs with the `ScheduleExpression` parameter. Specify this offset in ISO 8601 duration format. For example, if you want to end the window one hour before the start of each monitoring job, you would specify: `"-PT1H"` .
     *
     * The end time that you specify must not follow the start time that you specify by more than 24 hours. You specify the start time with the `DataAnalysisStartTime` parameter.
     *
     * If you set `ScheduleExpression` to `NOW` , this parameter is required.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-scheduleconfig.html#cfn-sagemaker-monitoringschedule-scheduleconfig-dataanalysisendtime
     */
    readonly dataAnalysisEndTime?: string;

    /**
     * Sets the start time for a monitoring job window.
     *
     * Express this time as an offset to the times that you schedule your monitoring jobs to run. You schedule monitoring jobs with the `ScheduleExpression` parameter. Specify this offset in ISO 8601 duration format. For example, if you want to monitor the five hours of data in your dataset that precede the start of each monitoring job, you would specify: `"-PT5H"` .
     *
     * The start time that you specify must not precede the end time that you specify by more than 24 hours. You specify the end time with the `DataAnalysisEndTime` parameter.
     *
     * If you set `ScheduleExpression` to `NOW` , this parameter is required.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-scheduleconfig.html#cfn-sagemaker-monitoringschedule-scheduleconfig-dataanalysisstarttime
     */
    readonly dataAnalysisStartTime?: string;

    /**
     * A cron expression that describes details about the monitoring schedule.
     *
     * The supported cron expressions are:
     *
     * - If you want to set the job to start every hour, use the following:
     *
     * `Hourly: cron(0 * ? * * *)`
     * - If you want to start the job daily:
     *
     * `cron(0 [00-23] ? * * *)`
     * - If you want to run the job one time, immediately, use the following keyword:
     *
     * `NOW`
     *
     * For example, the following are valid cron expressions:
     *
     * - Daily at noon UTC: `cron(0 12 ? * * *)`
     * - Daily at midnight UTC: `cron(0 0 ? * * *)`
     *
     * To support running every 6, 12 hours, the following are also supported:
     *
     * `cron(0 [00-23]/[01-24] ? * * *)`
     *
     * For example, the following are valid cron expressions:
     *
     * - Every 12 hours, starting at 5pm UTC: `cron(0 17/12 ? * * *)`
     * - Every two hours starting at midnight: `cron(0 0/2 ? * * *)`
     *
     * > - Even though the cron expression is set to start at 5PM UTC, note that there could be a delay of 0-20 minutes from the actual requested time to run the execution.
     * > - We recommend that if you would like a daily schedule, you do not provide this parameter. Amazon SageMaker will pick a time for running every day.
     *
     * You can also specify the keyword `NOW` to run the monitoring job immediately, one time, without recurring.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-scheduleconfig.html#cfn-sagemaker-monitoringschedule-scheduleconfig-scheduleexpression
     */
    readonly scheduleExpression: string;
  }

  /**
   * Defines the monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringjobdefinition.html
   */
  export interface MonitoringJobDefinitionProperty {
    /**
     * Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringjobdefinition.html#cfn-sagemaker-monitoringschedule-monitoringjobdefinition-baselineconfig
     */
    readonly baselineConfig?: CfnMonitoringSchedule.BaselineConfigProperty | cdk.IResolvable;

    /**
     * Sets the environment variables in the Docker container.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringjobdefinition.html#cfn-sagemaker-monitoringschedule-monitoringjobdefinition-environment
     */
    readonly environment?: cdk.IResolvable | Record<string, string>;

    /**
     * Configures the monitoring job to run a specified Docker container image.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringjobdefinition.html#cfn-sagemaker-monitoringschedule-monitoringjobdefinition-monitoringappspecification
     */
    readonly monitoringAppSpecification: cdk.IResolvable | CfnMonitoringSchedule.MonitoringAppSpecificationProperty;

    /**
     * The array of inputs for the monitoring job.
     *
     * Currently we support monitoring an Amazon SageMaker Endpoint.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringjobdefinition.html#cfn-sagemaker-monitoringschedule-monitoringjobdefinition-monitoringinputs
     */
    readonly monitoringInputs: Array<cdk.IResolvable | CfnMonitoringSchedule.MonitoringInputProperty> | cdk.IResolvable;

    /**
     * The array of outputs from the monitoring job to be uploaded to Amazon S3.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringjobdefinition.html#cfn-sagemaker-monitoringschedule-monitoringjobdefinition-monitoringoutputconfig
     */
    readonly monitoringOutputConfig: cdk.IResolvable | CfnMonitoringSchedule.MonitoringOutputConfigProperty;

    /**
     * Identifies the resources, ML compute instances, and ML storage volumes to deploy for a monitoring job.
     *
     * In distributed processing, you specify more than one instance.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringjobdefinition.html#cfn-sagemaker-monitoringschedule-monitoringjobdefinition-monitoringresources
     */
    readonly monitoringResources: cdk.IResolvable | CfnMonitoringSchedule.MonitoringResourcesProperty;

    /**
     * Specifies networking options for an monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringjobdefinition.html#cfn-sagemaker-monitoringschedule-monitoringjobdefinition-networkconfig
     */
    readonly networkConfig?: cdk.IResolvable | CfnMonitoringSchedule.NetworkConfigProperty;

    /**
     * The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringjobdefinition.html#cfn-sagemaker-monitoringschedule-monitoringjobdefinition-rolearn
     */
    readonly roleArn: string;

    /**
     * Specifies a time limit for how long the monitoring job is allowed to run.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringjobdefinition.html#cfn-sagemaker-monitoringschedule-monitoringjobdefinition-stoppingcondition
     */
    readonly stoppingCondition?: cdk.IResolvable | CfnMonitoringSchedule.StoppingConditionProperty;
  }

  /**
   * The inputs for a monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringinput.html
   */
  export interface MonitoringInputProperty {
    /**
     * Input object for the batch transform job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringinput.html#cfn-sagemaker-monitoringschedule-monitoringinput-batchtransforminput
     */
    readonly batchTransformInput?: CfnMonitoringSchedule.BatchTransformInputProperty | cdk.IResolvable;

    /**
     * The endpoint for a monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringinput.html#cfn-sagemaker-monitoringschedule-monitoringinput-endpointinput
     */
    readonly endpointInput?: CfnMonitoringSchedule.EndpointInputProperty | cdk.IResolvable;
  }

  /**
   * Input object for the batch transform job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-batchtransforminput.html
   */
  export interface BatchTransformInputProperty {
    /**
     * The Amazon S3 location being used to capture the data.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-batchtransforminput.html#cfn-sagemaker-monitoringschedule-batchtransforminput-datacaptureddestinations3uri
     */
    readonly dataCapturedDestinationS3Uri: string;

    /**
     * The dataset format for your batch transform job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-batchtransforminput.html#cfn-sagemaker-monitoringschedule-batchtransforminput-datasetformat
     */
    readonly datasetFormat: CfnMonitoringSchedule.DatasetFormatProperty | cdk.IResolvable;

    /**
     * The attributes of the input data to exclude from the analysis.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-batchtransforminput.html#cfn-sagemaker-monitoringschedule-batchtransforminput-excludefeaturesattribute
     */
    readonly excludeFeaturesAttribute?: string;

    /**
     * Path to the filesystem where the batch transform data is available to the container.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-batchtransforminput.html#cfn-sagemaker-monitoringschedule-batchtransforminput-localpath
     */
    readonly localPath: string;

    /**
     * Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key.
     *
     * Defaults to `FullyReplicated`
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-batchtransforminput.html#cfn-sagemaker-monitoringschedule-batchtransforminput-s3datadistributiontype
     */
    readonly s3DataDistributionType?: string;

    /**
     * Whether the `Pipe` or `File` is used as the input mode for transferring data for the monitoring job.
     *
     * `Pipe` mode is recommended for large datasets. `File` mode is useful for small files that fit in memory. Defaults to `File` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-batchtransforminput.html#cfn-sagemaker-monitoringschedule-batchtransforminput-s3inputmode
     */
    readonly s3InputMode?: string;
  }

  /**
   * The dataset format of the data to monitor.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-datasetformat.html
   */
  export interface DatasetFormatProperty {
    /**
     * The CSV format.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-datasetformat.html#cfn-sagemaker-monitoringschedule-datasetformat-csv
     */
    readonly csv?: CfnMonitoringSchedule.CsvProperty | cdk.IResolvable;

    /**
     * The Json format.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-datasetformat.html#cfn-sagemaker-monitoringschedule-datasetformat-json
     */
    readonly json?: cdk.IResolvable | CfnMonitoringSchedule.JsonProperty;

    /**
     * A flag indicating if the dataset format is Parquet.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-datasetformat.html#cfn-sagemaker-monitoringschedule-datasetformat-parquet
     */
    readonly parquet?: boolean | cdk.IResolvable;
  }

  /**
   * The CSV format.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-csv.html
   */
  export interface CsvProperty {
    /**
     * A boolean flag indicating if given CSV has header.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-csv.html#cfn-sagemaker-monitoringschedule-csv-header
     */
    readonly header?: boolean | cdk.IResolvable;
  }

  /**
   * The Json format.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-json.html
   */
  export interface JsonProperty {
    /**
     * A boolean flag indicating if it is JSON line format.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-json.html#cfn-sagemaker-monitoringschedule-json-line
     */
    readonly line?: boolean | cdk.IResolvable;
  }

  /**
   * Input object for the endpoint.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-endpointinput.html
   */
  export interface EndpointInputProperty {
    /**
     * An endpoint in customer's account which has enabled `DataCaptureConfig` enabled.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-endpointinput.html#cfn-sagemaker-monitoringschedule-endpointinput-endpointname
     */
    readonly endpointName: string;

    /**
     * The attributes of the input data to exclude from the analysis.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-endpointinput.html#cfn-sagemaker-monitoringschedule-endpointinput-excludefeaturesattribute
     */
    readonly excludeFeaturesAttribute?: string;

    /**
     * Path to the filesystem where the endpoint data is available to the container.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-endpointinput.html#cfn-sagemaker-monitoringschedule-endpointinput-localpath
     */
    readonly localPath: string;

    /**
     * Whether input data distributed in Amazon S3 is fully replicated or sharded by an Amazon S3 key.
     *
     * Defaults to `FullyReplicated`
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-endpointinput.html#cfn-sagemaker-monitoringschedule-endpointinput-s3datadistributiontype
     */
    readonly s3DataDistributionType?: string;

    /**
     * Whether the `Pipe` or `File` is used as the input mode for transferring data for the monitoring job.
     *
     * `Pipe` mode is recommended for large datasets. `File` mode is useful for small files that fit in memory. Defaults to `File` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-endpointinput.html#cfn-sagemaker-monitoringschedule-endpointinput-s3inputmode
     */
    readonly s3InputMode?: string;
  }

  /**
   * Identifies the resources to deploy for a monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringresources.html
   */
  export interface MonitoringResourcesProperty {
    /**
     * The configuration for the cluster resources used to run the processing job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringresources.html#cfn-sagemaker-monitoringschedule-monitoringresources-clusterconfig
     */
    readonly clusterConfig: CfnMonitoringSchedule.ClusterConfigProperty | cdk.IResolvable;
  }

  /**
   * Configuration for the cluster used to run model monitoring jobs.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-clusterconfig.html
   */
  export interface ClusterConfigProperty {
    /**
     * The number of ML compute instances to use in the model monitoring job.
     *
     * For distributed processing jobs, specify a value greater than 1. The default value is 1.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-clusterconfig.html#cfn-sagemaker-monitoringschedule-clusterconfig-instancecount
     */
    readonly instanceCount: number;

    /**
     * The ML compute instance type for the processing job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-clusterconfig.html#cfn-sagemaker-monitoringschedule-clusterconfig-instancetype
     */
    readonly instanceType: string;

    /**
     * The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-clusterconfig.html#cfn-sagemaker-monitoringschedule-clusterconfig-volumekmskeyid
     */
    readonly volumeKmsKeyId?: string;

    /**
     * The size of the ML storage volume, in gigabytes, that you want to provision.
     *
     * You must specify sufficient ML storage for your scenario.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-clusterconfig.html#cfn-sagemaker-monitoringschedule-clusterconfig-volumesizeingb
     */
    readonly volumeSizeInGb: number;
  }

  /**
   * Baseline configuration used to validate that the data conforms to the specified constraints and statistics.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-baselineconfig.html
   */
  export interface BaselineConfigProperty {
    /**
     * The Amazon S3 URI for the constraints resource.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-baselineconfig.html#cfn-sagemaker-monitoringschedule-baselineconfig-constraintsresource
     */
    readonly constraintsResource?: CfnMonitoringSchedule.ConstraintsResourceProperty | cdk.IResolvable;

    /**
     * The baseline statistics file in Amazon S3 that the current monitoring job should be validated against.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-baselineconfig.html#cfn-sagemaker-monitoringschedule-baselineconfig-statisticsresource
     */
    readonly statisticsResource?: cdk.IResolvable | CfnMonitoringSchedule.StatisticsResourceProperty;
  }

  /**
   * The baseline statistics file in Amazon S3 that the current monitoring job should be validated against.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-statisticsresource.html
   */
  export interface StatisticsResourceProperty {
    /**
     * The S3 URI for the statistics resource.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-statisticsresource.html#cfn-sagemaker-monitoringschedule-statisticsresource-s3uri
     */
    readonly s3Uri?: string;
  }

  /**
   * The Amazon S3 URI for the constraints resource.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-constraintsresource.html
   */
  export interface ConstraintsResourceProperty {
    /**
     * The Amazon S3 URI for the constraints resource.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-constraintsresource.html#cfn-sagemaker-monitoringschedule-constraintsresource-s3uri
     */
    readonly s3Uri?: string;
  }

  /**
   * Specifies a limit to how long a model training job or model compilation job can run.
   *
   * It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, SageMaker ends the training or compilation job. Use this API to cap model training costs.
   *
   * To stop a training job, SageMaker sends the algorithm the `SIGTERM` signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
   *
   * The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with `CreateModel` .
   *
   * > The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-stoppingcondition.html
   */
  export interface StoppingConditionProperty {
    /**
     * The maximum length of time, in seconds, that a training or compilation job can run before it is stopped.
     *
     * For compilation jobs, if the job does not complete during this time, a `TimeOut` error is generated. We recommend starting with 900 seconds and increasing as necessary based on your model.
     *
     * For all other jobs, if the job does not complete during this time, SageMaker ends the job. When `RetryStrategy` is specified in the job request, `MaxRuntimeInSeconds` specifies the maximum time for all of the attempts in total, not each individual attempt. The default value is 1 day. The maximum value is 28 days.
     *
     * The maximum time that a `TrainingJob` can run in total, including any time spent publishing metrics or archiving and uploading models after it has been stopped, is 30 days.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-stoppingcondition.html#cfn-sagemaker-monitoringschedule-stoppingcondition-maxruntimeinseconds
     */
    readonly maxRuntimeInSeconds: number;
  }

  /**
   * Container image configuration object for the monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringappspecification.html
   */
  export interface MonitoringAppSpecificationProperty {
    /**
     * An array of arguments for the container used to run the monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringappspecification.html#cfn-sagemaker-monitoringschedule-monitoringappspecification-containerarguments
     */
    readonly containerArguments?: Array<string>;

    /**
     * Specifies the entrypoint for a container used to run the monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringappspecification.html#cfn-sagemaker-monitoringschedule-monitoringappspecification-containerentrypoint
     */
    readonly containerEntrypoint?: Array<string>;

    /**
     * The container image to be run by the monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringappspecification.html#cfn-sagemaker-monitoringschedule-monitoringappspecification-imageuri
     */
    readonly imageUri: string;

    /**
     * An Amazon S3 URI to a script that is called after analysis has been performed.
     *
     * Applicable only for the built-in (first party) containers.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringappspecification.html#cfn-sagemaker-monitoringschedule-monitoringappspecification-postanalyticsprocessorsourceuri
     */
    readonly postAnalyticsProcessorSourceUri?: string;

    /**
     * An Amazon S3 URI to a script that is called per row prior to running analysis.
     *
     * It can base64 decode the payload and convert it into a flattened JSON so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringappspecification.html#cfn-sagemaker-monitoringschedule-monitoringappspecification-recordpreprocessorsourceuri
     */
    readonly recordPreprocessorSourceUri?: string;
  }

  /**
   * Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-networkconfig.html
   */
  export interface NetworkConfigProperty {
    /**
     * Whether to encrypt all communications between distributed processing jobs.
     *
     * Choose `True` to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-networkconfig.html#cfn-sagemaker-monitoringschedule-networkconfig-enableintercontainertrafficencryption
     */
    readonly enableInterContainerTrafficEncryption?: boolean | cdk.IResolvable;

    /**
     * Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-networkconfig.html#cfn-sagemaker-monitoringschedule-networkconfig-enablenetworkisolation
     */
    readonly enableNetworkIsolation?: boolean | cdk.IResolvable;

    /**
     * Specifies a VPC that your training jobs and hosted models have access to.
     *
     * Control access to and from your training and model containers by configuring the VPC. For more information, see [Protect Endpoints by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html) and [Protect Training Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-networkconfig.html#cfn-sagemaker-monitoringschedule-networkconfig-vpcconfig
     */
    readonly vpcConfig?: cdk.IResolvable | CfnMonitoringSchedule.VpcConfigProperty;
  }

  /**
   * Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to.
   *
   * You can control access to and from your resources by configuring a VPC. For more information, see [Give SageMaker Access to Resources in your Amazon VPC](https://docs.aws.amazon.com/https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html) .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-vpcconfig.html
   */
  export interface VpcConfigProperty {
    /**
     * The VPC security group IDs, in the form `sg-xxxxxxxx` .
     *
     * Specify the security groups for the VPC that is specified in the `Subnets` field.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-vpcconfig.html#cfn-sagemaker-monitoringschedule-vpcconfig-securitygroupids
     */
    readonly securityGroupIds: Array<string>;

    /**
     * The ID of the subnets in the VPC to which you want to connect your training job or model.
     *
     * For information about the availability of specific instance types, see [Supported Instance Types and Availability Zones](https://docs.aws.amazon.com/sagemaker/latest/dg/instance-types-az.html) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-vpcconfig.html#cfn-sagemaker-monitoringschedule-vpcconfig-subnets
     */
    readonly subnets: Array<string>;
  }

  /**
   * The output configuration for monitoring jobs.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringoutputconfig.html
   */
  export interface MonitoringOutputConfigProperty {
    /**
     * The AWS Key Management Service ( AWS KMS ) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringoutputconfig.html#cfn-sagemaker-monitoringschedule-monitoringoutputconfig-kmskeyid
     */
    readonly kmsKeyId?: string;

    /**
     * Monitoring outputs for monitoring jobs.
     *
     * This is where the output of the periodic monitoring jobs is uploaded.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringoutputconfig.html#cfn-sagemaker-monitoringschedule-monitoringoutputconfig-monitoringoutputs
     */
    readonly monitoringOutputs: Array<cdk.IResolvable | CfnMonitoringSchedule.MonitoringOutputProperty> | cdk.IResolvable;
  }

  /**
   * The output object for a monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringoutput.html
   */
  export interface MonitoringOutputProperty {
    /**
     * The Amazon S3 storage location where the results of a monitoring job are saved.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringoutput.html#cfn-sagemaker-monitoringschedule-monitoringoutput-s3output
     */
    readonly s3Output: cdk.IResolvable | CfnMonitoringSchedule.S3OutputProperty;
  }

  /**
   * Information about where and how you want to store the results of a monitoring job.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-s3output.html
   */
  export interface S3OutputProperty {
    /**
     * The local path to the S3 storage location where SageMaker saves the results of a monitoring job.
     *
     * LocalPath is an absolute path for the output data.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-s3output.html#cfn-sagemaker-monitoringschedule-s3output-localpath
     */
    readonly localPath: string;

    /**
     * Whether to upload the results of the monitoring job continuously or after the job completes.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-s3output.html#cfn-sagemaker-monitoringschedule-s3output-s3uploadmode
     */
    readonly s3UploadMode?: string;

    /**
     * A URI that identifies the S3 storage location where SageMaker saves the results of a monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-s3output.html#cfn-sagemaker-monitoringschedule-s3output-s3uri
     */
    readonly s3Uri: string;
  }

  /**
   * Summary of information about the last monitoring job to run.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringexecutionsummary.html
   */
  export interface MonitoringExecutionSummaryProperty {
    /**
     * The time at which the monitoring job was created.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringexecutionsummary.html#cfn-sagemaker-monitoringschedule-monitoringexecutionsummary-creationtime
     */
    readonly creationTime: string;

    /**
     * The name of the endpoint used to run the monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringexecutionsummary.html#cfn-sagemaker-monitoringschedule-monitoringexecutionsummary-endpointname
     */
    readonly endpointName?: string;

    /**
     * Contains the reason a monitoring job failed, if it failed.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringexecutionsummary.html#cfn-sagemaker-monitoringschedule-monitoringexecutionsummary-failurereason
     */
    readonly failureReason?: string;

    /**
     * A timestamp that indicates the last time the monitoring job was modified.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringexecutionsummary.html#cfn-sagemaker-monitoringschedule-monitoringexecutionsummary-lastmodifiedtime
     */
    readonly lastModifiedTime: string;

    /**
     * The status of the monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringexecutionsummary.html#cfn-sagemaker-monitoringschedule-monitoringexecutionsummary-monitoringexecutionstatus
     */
    readonly monitoringExecutionStatus: string;

    /**
     * The name of the monitoring schedule.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringexecutionsummary.html#cfn-sagemaker-monitoringschedule-monitoringexecutionsummary-monitoringschedulename
     */
    readonly monitoringScheduleName: string;

    /**
     * The Amazon Resource Name (ARN) of the monitoring job.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringexecutionsummary.html#cfn-sagemaker-monitoringschedule-monitoringexecutionsummary-processingjobarn
     */
    readonly processingJobArn?: string;

    /**
     * The time the monitoring job was scheduled.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringexecutionsummary.html#cfn-sagemaker-monitoringschedule-monitoringexecutionsummary-scheduledtime
     */
    readonly scheduledTime: string;
  }
}

/**
 * Properties for defining a `CfnMonitoringSchedule`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-monitoringschedule.html
 */
export interface CfnMonitoringScheduleProps {
  /**
   * The name of the endpoint using the monitoring schedule.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-monitoringschedule.html#cfn-sagemaker-monitoringschedule-endpointname
   */
  readonly endpointName?: string;

  /**
   * Contains the reason a monitoring job failed, if it failed.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-monitoringschedule.html#cfn-sagemaker-monitoringschedule-failurereason
   */
  readonly failureReason?: string;

  /**
   * Describes metadata on the last execution to run, if there was one.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-monitoringschedule.html#cfn-sagemaker-monitoringschedule-lastmonitoringexecutionsummary
   */
  readonly lastMonitoringExecutionSummary?: cdk.IResolvable | CfnMonitoringSchedule.MonitoringExecutionSummaryProperty;

  /**
   * The configuration object that specifies the monitoring schedule and defines the monitoring job.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-monitoringschedule.html#cfn-sagemaker-monitoringschedule-monitoringscheduleconfig
   */
  readonly monitoringScheduleConfig: cdk.IResolvable | CfnMonitoringSchedule.MonitoringScheduleConfigProperty;

  /**
   * The name of the monitoring schedule.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-monitoringschedule.html#cfn-sagemaker-monitoringschedule-monitoringschedulename
   */
  readonly monitoringScheduleName: string;

  /**
   * The status of the monitoring schedule.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-monitoringschedule.html#cfn-sagemaker-monitoringschedule-monitoringschedulestatus
   */
  readonly monitoringScheduleStatus?: string;

  /**
   * An array of key-value pairs to apply to this resource.
   *
   * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-monitoringschedule.html#cfn-sagemaker-monitoringschedule-tags
   */
  readonly tags?: Array<cdk.CfnTag>;
}

/**
 * Determine whether the given properties match those of a `ScheduleConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ScheduleConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleScheduleConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("dataAnalysisEndTime", cdk.validateString)(properties.dataAnalysisEndTime));
  errors.collect(cdk.propertyValidator("dataAnalysisStartTime", cdk.validateString)(properties.dataAnalysisStartTime));
  errors.collect(cdk.propertyValidator("scheduleExpression", cdk.requiredValidator)(properties.scheduleExpression));
  errors.collect(cdk.propertyValidator("scheduleExpression", cdk.validateString)(properties.scheduleExpression));
  return errors.wrap("supplied properties not correct for \"ScheduleConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleScheduleConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleScheduleConfigPropertyValidator(properties).assertSuccess();
  return {
    "DataAnalysisEndTime": cdk.stringToCloudFormation(properties.dataAnalysisEndTime),
    "DataAnalysisStartTime": cdk.stringToCloudFormation(properties.dataAnalysisStartTime),
    "ScheduleExpression": cdk.stringToCloudFormation(properties.scheduleExpression)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleScheduleConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnMonitoringSchedule.ScheduleConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.ScheduleConfigProperty>();
  ret.addPropertyResult("dataAnalysisEndTime", "DataAnalysisEndTime", (properties.DataAnalysisEndTime != null ? cfn_parse.FromCloudFormation.getString(properties.DataAnalysisEndTime) : undefined));
  ret.addPropertyResult("dataAnalysisStartTime", "DataAnalysisStartTime", (properties.DataAnalysisStartTime != null ? cfn_parse.FromCloudFormation.getString(properties.DataAnalysisStartTime) : undefined));
  ret.addPropertyResult("scheduleExpression", "ScheduleExpression", (properties.ScheduleExpression != null ? cfn_parse.FromCloudFormation.getString(properties.ScheduleExpression) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CsvProperty`
 *
 * @param properties - the TypeScript properties of a `CsvProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleCsvPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("header", cdk.validateBoolean)(properties.header));
  return errors.wrap("supplied properties not correct for \"CsvProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleCsvPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleCsvPropertyValidator(properties).assertSuccess();
  return {
    "Header": cdk.booleanToCloudFormation(properties.header)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleCsvPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.CsvProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.CsvProperty>();
  ret.addPropertyResult("header", "Header", (properties.Header != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Header) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `JsonProperty`
 *
 * @param properties - the TypeScript properties of a `JsonProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleJsonPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("line", cdk.validateBoolean)(properties.line));
  return errors.wrap("supplied properties not correct for \"JsonProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleJsonPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleJsonPropertyValidator(properties).assertSuccess();
  return {
    "Line": cdk.booleanToCloudFormation(properties.line)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleJsonPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnMonitoringSchedule.JsonProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.JsonProperty>();
  ret.addPropertyResult("line", "Line", (properties.Line != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Line) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DatasetFormatProperty`
 *
 * @param properties - the TypeScript properties of a `DatasetFormatProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleDatasetFormatPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("csv", CfnMonitoringScheduleCsvPropertyValidator)(properties.csv));
  errors.collect(cdk.propertyValidator("json", CfnMonitoringScheduleJsonPropertyValidator)(properties.json));
  errors.collect(cdk.propertyValidator("parquet", cdk.validateBoolean)(properties.parquet));
  return errors.wrap("supplied properties not correct for \"DatasetFormatProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleDatasetFormatPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleDatasetFormatPropertyValidator(properties).assertSuccess();
  return {
    "Csv": convertCfnMonitoringScheduleCsvPropertyToCloudFormation(properties.csv),
    "Json": convertCfnMonitoringScheduleJsonPropertyToCloudFormation(properties.json),
    "Parquet": cdk.booleanToCloudFormation(properties.parquet)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleDatasetFormatPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.DatasetFormatProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.DatasetFormatProperty>();
  ret.addPropertyResult("csv", "Csv", (properties.Csv != null ? CfnMonitoringScheduleCsvPropertyFromCloudFormation(properties.Csv) : undefined));
  ret.addPropertyResult("json", "Json", (properties.Json != null ? CfnMonitoringScheduleJsonPropertyFromCloudFormation(properties.Json) : undefined));
  ret.addPropertyResult("parquet", "Parquet", (properties.Parquet != null ? cfn_parse.FromCloudFormation.getBoolean(properties.Parquet) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `BatchTransformInputProperty`
 *
 * @param properties - the TypeScript properties of a `BatchTransformInputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleBatchTransformInputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("dataCapturedDestinationS3Uri", cdk.requiredValidator)(properties.dataCapturedDestinationS3Uri));
  errors.collect(cdk.propertyValidator("dataCapturedDestinationS3Uri", cdk.validateString)(properties.dataCapturedDestinationS3Uri));
  errors.collect(cdk.propertyValidator("datasetFormat", cdk.requiredValidator)(properties.datasetFormat));
  errors.collect(cdk.propertyValidator("datasetFormat", CfnMonitoringScheduleDatasetFormatPropertyValidator)(properties.datasetFormat));
  errors.collect(cdk.propertyValidator("excludeFeaturesAttribute", cdk.validateString)(properties.excludeFeaturesAttribute));
  errors.collect(cdk.propertyValidator("localPath", cdk.requiredValidator)(properties.localPath));
  errors.collect(cdk.propertyValidator("localPath", cdk.validateString)(properties.localPath));
  errors.collect(cdk.propertyValidator("s3DataDistributionType", cdk.validateString)(properties.s3DataDistributionType));
  errors.collect(cdk.propertyValidator("s3InputMode", cdk.validateString)(properties.s3InputMode));
  return errors.wrap("supplied properties not correct for \"BatchTransformInputProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleBatchTransformInputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleBatchTransformInputPropertyValidator(properties).assertSuccess();
  return {
    "DataCapturedDestinationS3Uri": cdk.stringToCloudFormation(properties.dataCapturedDestinationS3Uri),
    "DatasetFormat": convertCfnMonitoringScheduleDatasetFormatPropertyToCloudFormation(properties.datasetFormat),
    "ExcludeFeaturesAttribute": cdk.stringToCloudFormation(properties.excludeFeaturesAttribute),
    "LocalPath": cdk.stringToCloudFormation(properties.localPath),
    "S3DataDistributionType": cdk.stringToCloudFormation(properties.s3DataDistributionType),
    "S3InputMode": cdk.stringToCloudFormation(properties.s3InputMode)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleBatchTransformInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.BatchTransformInputProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.BatchTransformInputProperty>();
  ret.addPropertyResult("dataCapturedDestinationS3Uri", "DataCapturedDestinationS3Uri", (properties.DataCapturedDestinationS3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.DataCapturedDestinationS3Uri) : undefined));
  ret.addPropertyResult("datasetFormat", "DatasetFormat", (properties.DatasetFormat != null ? CfnMonitoringScheduleDatasetFormatPropertyFromCloudFormation(properties.DatasetFormat) : undefined));
  ret.addPropertyResult("excludeFeaturesAttribute", "ExcludeFeaturesAttribute", (properties.ExcludeFeaturesAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.ExcludeFeaturesAttribute) : undefined));
  ret.addPropertyResult("localPath", "LocalPath", (properties.LocalPath != null ? cfn_parse.FromCloudFormation.getString(properties.LocalPath) : undefined));
  ret.addPropertyResult("s3DataDistributionType", "S3DataDistributionType", (properties.S3DataDistributionType != null ? cfn_parse.FromCloudFormation.getString(properties.S3DataDistributionType) : undefined));
  ret.addPropertyResult("s3InputMode", "S3InputMode", (properties.S3InputMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3InputMode) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `EndpointInputProperty`
 *
 * @param properties - the TypeScript properties of a `EndpointInputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleEndpointInputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("endpointName", cdk.requiredValidator)(properties.endpointName));
  errors.collect(cdk.propertyValidator("endpointName", cdk.validateString)(properties.endpointName));
  errors.collect(cdk.propertyValidator("excludeFeaturesAttribute", cdk.validateString)(properties.excludeFeaturesAttribute));
  errors.collect(cdk.propertyValidator("localPath", cdk.requiredValidator)(properties.localPath));
  errors.collect(cdk.propertyValidator("localPath", cdk.validateString)(properties.localPath));
  errors.collect(cdk.propertyValidator("s3DataDistributionType", cdk.validateString)(properties.s3DataDistributionType));
  errors.collect(cdk.propertyValidator("s3InputMode", cdk.validateString)(properties.s3InputMode));
  return errors.wrap("supplied properties not correct for \"EndpointInputProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleEndpointInputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleEndpointInputPropertyValidator(properties).assertSuccess();
  return {
    "EndpointName": cdk.stringToCloudFormation(properties.endpointName),
    "ExcludeFeaturesAttribute": cdk.stringToCloudFormation(properties.excludeFeaturesAttribute),
    "LocalPath": cdk.stringToCloudFormation(properties.localPath),
    "S3DataDistributionType": cdk.stringToCloudFormation(properties.s3DataDistributionType),
    "S3InputMode": cdk.stringToCloudFormation(properties.s3InputMode)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleEndpointInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.EndpointInputProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.EndpointInputProperty>();
  ret.addPropertyResult("endpointName", "EndpointName", (properties.EndpointName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointName) : undefined));
  ret.addPropertyResult("excludeFeaturesAttribute", "ExcludeFeaturesAttribute", (properties.ExcludeFeaturesAttribute != null ? cfn_parse.FromCloudFormation.getString(properties.ExcludeFeaturesAttribute) : undefined));
  ret.addPropertyResult("localPath", "LocalPath", (properties.LocalPath != null ? cfn_parse.FromCloudFormation.getString(properties.LocalPath) : undefined));
  ret.addPropertyResult("s3DataDistributionType", "S3DataDistributionType", (properties.S3DataDistributionType != null ? cfn_parse.FromCloudFormation.getString(properties.S3DataDistributionType) : undefined));
  ret.addPropertyResult("s3InputMode", "S3InputMode", (properties.S3InputMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3InputMode) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringInputProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringInputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleMonitoringInputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("batchTransformInput", CfnMonitoringScheduleBatchTransformInputPropertyValidator)(properties.batchTransformInput));
  errors.collect(cdk.propertyValidator("endpointInput", CfnMonitoringScheduleEndpointInputPropertyValidator)(properties.endpointInput));
  return errors.wrap("supplied properties not correct for \"MonitoringInputProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleMonitoringInputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleMonitoringInputPropertyValidator(properties).assertSuccess();
  return {
    "BatchTransformInput": convertCfnMonitoringScheduleBatchTransformInputPropertyToCloudFormation(properties.batchTransformInput),
    "EndpointInput": convertCfnMonitoringScheduleEndpointInputPropertyToCloudFormation(properties.endpointInput)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleMonitoringInputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnMonitoringSchedule.MonitoringInputProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.MonitoringInputProperty>();
  ret.addPropertyResult("batchTransformInput", "BatchTransformInput", (properties.BatchTransformInput != null ? CfnMonitoringScheduleBatchTransformInputPropertyFromCloudFormation(properties.BatchTransformInput) : undefined));
  ret.addPropertyResult("endpointInput", "EndpointInput", (properties.EndpointInput != null ? CfnMonitoringScheduleEndpointInputPropertyFromCloudFormation(properties.EndpointInput) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ClusterConfigProperty`
 *
 * @param properties - the TypeScript properties of a `ClusterConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleClusterConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("instanceCount", cdk.requiredValidator)(properties.instanceCount));
  errors.collect(cdk.propertyValidator("instanceCount", cdk.validateNumber)(properties.instanceCount));
  errors.collect(cdk.propertyValidator("instanceType", cdk.requiredValidator)(properties.instanceType));
  errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
  errors.collect(cdk.propertyValidator("volumeKmsKeyId", cdk.validateString)(properties.volumeKmsKeyId));
  errors.collect(cdk.propertyValidator("volumeSizeInGb", cdk.requiredValidator)(properties.volumeSizeInGb));
  errors.collect(cdk.propertyValidator("volumeSizeInGb", cdk.validateNumber)(properties.volumeSizeInGb));
  return errors.wrap("supplied properties not correct for \"ClusterConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleClusterConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleClusterConfigPropertyValidator(properties).assertSuccess();
  return {
    "InstanceCount": cdk.numberToCloudFormation(properties.instanceCount),
    "InstanceType": cdk.stringToCloudFormation(properties.instanceType),
    "VolumeKmsKeyId": cdk.stringToCloudFormation(properties.volumeKmsKeyId),
    "VolumeSizeInGB": cdk.numberToCloudFormation(properties.volumeSizeInGb)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleClusterConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.ClusterConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.ClusterConfigProperty>();
  ret.addPropertyResult("instanceCount", "InstanceCount", (properties.InstanceCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.InstanceCount) : undefined));
  ret.addPropertyResult("instanceType", "InstanceType", (properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined));
  ret.addPropertyResult("volumeKmsKeyId", "VolumeKmsKeyId", (properties.VolumeKmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.VolumeKmsKeyId) : undefined));
  ret.addPropertyResult("volumeSizeInGb", "VolumeSizeInGB", (properties.VolumeSizeInGB != null ? cfn_parse.FromCloudFormation.getNumber(properties.VolumeSizeInGB) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringResourcesProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringResourcesProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleMonitoringResourcesPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("clusterConfig", cdk.requiredValidator)(properties.clusterConfig));
  errors.collect(cdk.propertyValidator("clusterConfig", CfnMonitoringScheduleClusterConfigPropertyValidator)(properties.clusterConfig));
  return errors.wrap("supplied properties not correct for \"MonitoringResourcesProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleMonitoringResourcesPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleMonitoringResourcesPropertyValidator(properties).assertSuccess();
  return {
    "ClusterConfig": convertCfnMonitoringScheduleClusterConfigPropertyToCloudFormation(properties.clusterConfig)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleMonitoringResourcesPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnMonitoringSchedule.MonitoringResourcesProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.MonitoringResourcesProperty>();
  ret.addPropertyResult("clusterConfig", "ClusterConfig", (properties.ClusterConfig != null ? CfnMonitoringScheduleClusterConfigPropertyFromCloudFormation(properties.ClusterConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `StatisticsResourceProperty`
 *
 * @param properties - the TypeScript properties of a `StatisticsResourceProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleStatisticsResourcePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("s3Uri", cdk.validateString)(properties.s3Uri));
  return errors.wrap("supplied properties not correct for \"StatisticsResourceProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleStatisticsResourcePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleStatisticsResourcePropertyValidator(properties).assertSuccess();
  return {
    "S3Uri": cdk.stringToCloudFormation(properties.s3Uri)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleStatisticsResourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnMonitoringSchedule.StatisticsResourceProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.StatisticsResourceProperty>();
  ret.addPropertyResult("s3Uri", "S3Uri", (properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ConstraintsResourceProperty`
 *
 * @param properties - the TypeScript properties of a `ConstraintsResourceProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleConstraintsResourcePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("s3Uri", cdk.validateString)(properties.s3Uri));
  return errors.wrap("supplied properties not correct for \"ConstraintsResourceProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleConstraintsResourcePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleConstraintsResourcePropertyValidator(properties).assertSuccess();
  return {
    "S3Uri": cdk.stringToCloudFormation(properties.s3Uri)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleConstraintsResourcePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.ConstraintsResourceProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.ConstraintsResourceProperty>();
  ret.addPropertyResult("s3Uri", "S3Uri", (properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `BaselineConfigProperty`
 *
 * @param properties - the TypeScript properties of a `BaselineConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleBaselineConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("constraintsResource", CfnMonitoringScheduleConstraintsResourcePropertyValidator)(properties.constraintsResource));
  errors.collect(cdk.propertyValidator("statisticsResource", CfnMonitoringScheduleStatisticsResourcePropertyValidator)(properties.statisticsResource));
  return errors.wrap("supplied properties not correct for \"BaselineConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleBaselineConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleBaselineConfigPropertyValidator(properties).assertSuccess();
  return {
    "ConstraintsResource": convertCfnMonitoringScheduleConstraintsResourcePropertyToCloudFormation(properties.constraintsResource),
    "StatisticsResource": convertCfnMonitoringScheduleStatisticsResourcePropertyToCloudFormation(properties.statisticsResource)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleBaselineConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringSchedule.BaselineConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.BaselineConfigProperty>();
  ret.addPropertyResult("constraintsResource", "ConstraintsResource", (properties.ConstraintsResource != null ? CfnMonitoringScheduleConstraintsResourcePropertyFromCloudFormation(properties.ConstraintsResource) : undefined));
  ret.addPropertyResult("statisticsResource", "StatisticsResource", (properties.StatisticsResource != null ? CfnMonitoringScheduleStatisticsResourcePropertyFromCloudFormation(properties.StatisticsResource) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `StoppingConditionProperty`
 *
 * @param properties - the TypeScript properties of a `StoppingConditionProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleStoppingConditionPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("maxRuntimeInSeconds", cdk.requiredValidator)(properties.maxRuntimeInSeconds));
  errors.collect(cdk.propertyValidator("maxRuntimeInSeconds", cdk.validateNumber)(properties.maxRuntimeInSeconds));
  return errors.wrap("supplied properties not correct for \"StoppingConditionProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleStoppingConditionPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleStoppingConditionPropertyValidator(properties).assertSuccess();
  return {
    "MaxRuntimeInSeconds": cdk.numberToCloudFormation(properties.maxRuntimeInSeconds)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleStoppingConditionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnMonitoringSchedule.StoppingConditionProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.StoppingConditionProperty>();
  ret.addPropertyResult("maxRuntimeInSeconds", "MaxRuntimeInSeconds", (properties.MaxRuntimeInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxRuntimeInSeconds) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringAppSpecificationProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringAppSpecificationProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleMonitoringAppSpecificationPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("containerArguments", cdk.listValidator(cdk.validateString))(properties.containerArguments));
  errors.collect(cdk.propertyValidator("containerEntrypoint", cdk.listValidator(cdk.validateString))(properties.containerEntrypoint));
  errors.collect(cdk.propertyValidator("imageUri", cdk.requiredValidator)(properties.imageUri));
  errors.collect(cdk.propertyValidator("imageUri", cdk.validateString)(properties.imageUri));
  errors.collect(cdk.propertyValidator("postAnalyticsProcessorSourceUri", cdk.validateString)(properties.postAnalyticsProcessorSourceUri));
  errors.collect(cdk.propertyValidator("recordPreprocessorSourceUri", cdk.validateString)(properties.recordPreprocessorSourceUri));
  return errors.wrap("supplied properties not correct for \"MonitoringAppSpecificationProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleMonitoringAppSpecificationPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleMonitoringAppSpecificationPropertyValidator(properties).assertSuccess();
  return {
    "ContainerArguments": cdk.listMapper(cdk.stringToCloudFormation)(properties.containerArguments),
    "ContainerEntrypoint": cdk.listMapper(cdk.stringToCloudFormation)(properties.containerEntrypoint),
    "ImageUri": cdk.stringToCloudFormation(properties.imageUri),
    "PostAnalyticsProcessorSourceUri": cdk.stringToCloudFormation(properties.postAnalyticsProcessorSourceUri),
    "RecordPreprocessorSourceUri": cdk.stringToCloudFormation(properties.recordPreprocessorSourceUri)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleMonitoringAppSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnMonitoringSchedule.MonitoringAppSpecificationProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.MonitoringAppSpecificationProperty>();
  ret.addPropertyResult("containerArguments", "ContainerArguments", (properties.ContainerArguments != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.ContainerArguments) : undefined));
  ret.addPropertyResult("containerEntrypoint", "ContainerEntrypoint", (properties.ContainerEntrypoint != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.ContainerEntrypoint) : undefined));
  ret.addPropertyResult("imageUri", "ImageUri", (properties.ImageUri != null ? cfn_parse.FromCloudFormation.getString(properties.ImageUri) : undefined));
  ret.addPropertyResult("postAnalyticsProcessorSourceUri", "PostAnalyticsProcessorSourceUri", (properties.PostAnalyticsProcessorSourceUri != null ? cfn_parse.FromCloudFormation.getString(properties.PostAnalyticsProcessorSourceUri) : undefined));
  ret.addPropertyResult("recordPreprocessorSourceUri", "RecordPreprocessorSourceUri", (properties.RecordPreprocessorSourceUri != null ? cfn_parse.FromCloudFormation.getString(properties.RecordPreprocessorSourceUri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `VpcConfigProperty`
 *
 * @param properties - the TypeScript properties of a `VpcConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleVpcConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("securityGroupIds", cdk.requiredValidator)(properties.securityGroupIds));
  errors.collect(cdk.propertyValidator("securityGroupIds", cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
  errors.collect(cdk.propertyValidator("subnets", cdk.requiredValidator)(properties.subnets));
  errors.collect(cdk.propertyValidator("subnets", cdk.listValidator(cdk.validateString))(properties.subnets));
  return errors.wrap("supplied properties not correct for \"VpcConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleVpcConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleVpcConfigPropertyValidator(properties).assertSuccess();
  return {
    "SecurityGroupIds": cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
    "Subnets": cdk.listMapper(cdk.stringToCloudFormation)(properties.subnets)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleVpcConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnMonitoringSchedule.VpcConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.VpcConfigProperty>();
  ret.addPropertyResult("securityGroupIds", "SecurityGroupIds", (properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SecurityGroupIds) : undefined));
  ret.addPropertyResult("subnets", "Subnets", (properties.Subnets != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.Subnets) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `NetworkConfigProperty`
 *
 * @param properties - the TypeScript properties of a `NetworkConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleNetworkConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("enableInterContainerTrafficEncryption", cdk.validateBoolean)(properties.enableInterContainerTrafficEncryption));
  errors.collect(cdk.propertyValidator("enableNetworkIsolation", cdk.validateBoolean)(properties.enableNetworkIsolation));
  errors.collect(cdk.propertyValidator("vpcConfig", CfnMonitoringScheduleVpcConfigPropertyValidator)(properties.vpcConfig));
  return errors.wrap("supplied properties not correct for \"NetworkConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleNetworkConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleNetworkConfigPropertyValidator(properties).assertSuccess();
  return {
    "EnableInterContainerTrafficEncryption": cdk.booleanToCloudFormation(properties.enableInterContainerTrafficEncryption),
    "EnableNetworkIsolation": cdk.booleanToCloudFormation(properties.enableNetworkIsolation),
    "VpcConfig": convertCfnMonitoringScheduleVpcConfigPropertyToCloudFormation(properties.vpcConfig)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleNetworkConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnMonitoringSchedule.NetworkConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.NetworkConfigProperty>();
  ret.addPropertyResult("enableInterContainerTrafficEncryption", "EnableInterContainerTrafficEncryption", (properties.EnableInterContainerTrafficEncryption != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableInterContainerTrafficEncryption) : undefined));
  ret.addPropertyResult("enableNetworkIsolation", "EnableNetworkIsolation", (properties.EnableNetworkIsolation != null ? cfn_parse.FromCloudFormation.getBoolean(properties.EnableNetworkIsolation) : undefined));
  ret.addPropertyResult("vpcConfig", "VpcConfig", (properties.VpcConfig != null ? CfnMonitoringScheduleVpcConfigPropertyFromCloudFormation(properties.VpcConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `S3OutputProperty`
 *
 * @param properties - the TypeScript properties of a `S3OutputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleS3OutputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("localPath", cdk.requiredValidator)(properties.localPath));
  errors.collect(cdk.propertyValidator("localPath", cdk.validateString)(properties.localPath));
  errors.collect(cdk.propertyValidator("s3UploadMode", cdk.validateString)(properties.s3UploadMode));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.requiredValidator)(properties.s3Uri));
  errors.collect(cdk.propertyValidator("s3Uri", cdk.validateString)(properties.s3Uri));
  return errors.wrap("supplied properties not correct for \"S3OutputProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleS3OutputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleS3OutputPropertyValidator(properties).assertSuccess();
  return {
    "LocalPath": cdk.stringToCloudFormation(properties.localPath),
    "S3UploadMode": cdk.stringToCloudFormation(properties.s3UploadMode),
    "S3Uri": cdk.stringToCloudFormation(properties.s3Uri)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleS3OutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnMonitoringSchedule.S3OutputProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.S3OutputProperty>();
  ret.addPropertyResult("localPath", "LocalPath", (properties.LocalPath != null ? cfn_parse.FromCloudFormation.getString(properties.LocalPath) : undefined));
  ret.addPropertyResult("s3UploadMode", "S3UploadMode", (properties.S3UploadMode != null ? cfn_parse.FromCloudFormation.getString(properties.S3UploadMode) : undefined));
  ret.addPropertyResult("s3Uri", "S3Uri", (properties.S3Uri != null ? cfn_parse.FromCloudFormation.getString(properties.S3Uri) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringOutputProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringOutputProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleMonitoringOutputPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("s3Output", cdk.requiredValidator)(properties.s3Output));
  errors.collect(cdk.propertyValidator("s3Output", CfnMonitoringScheduleS3OutputPropertyValidator)(properties.s3Output));
  return errors.wrap("supplied properties not correct for \"MonitoringOutputProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleMonitoringOutputPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleMonitoringOutputPropertyValidator(properties).assertSuccess();
  return {
    "S3Output": convertCfnMonitoringScheduleS3OutputPropertyToCloudFormation(properties.s3Output)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleMonitoringOutputPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnMonitoringSchedule.MonitoringOutputProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.MonitoringOutputProperty>();
  ret.addPropertyResult("s3Output", "S3Output", (properties.S3Output != null ? CfnMonitoringScheduleS3OutputPropertyFromCloudFormation(properties.S3Output) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringOutputConfigProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringOutputConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleMonitoringOutputConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("kmsKeyId", cdk.validateString)(properties.kmsKeyId));
  errors.collect(cdk.propertyValidator("monitoringOutputs", cdk.requiredValidator)(properties.monitoringOutputs));
  errors.collect(cdk.propertyValidator("monitoringOutputs", cdk.listValidator(CfnMonitoringScheduleMonitoringOutputPropertyValidator))(properties.monitoringOutputs));
  return errors.wrap("supplied properties not correct for \"MonitoringOutputConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleMonitoringOutputConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleMonitoringOutputConfigPropertyValidator(properties).assertSuccess();
  return {
    "KmsKeyId": cdk.stringToCloudFormation(properties.kmsKeyId),
    "MonitoringOutputs": cdk.listMapper(convertCfnMonitoringScheduleMonitoringOutputPropertyToCloudFormation)(properties.monitoringOutputs)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleMonitoringOutputConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnMonitoringSchedule.MonitoringOutputConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.MonitoringOutputConfigProperty>();
  ret.addPropertyResult("kmsKeyId", "KmsKeyId", (properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined));
  ret.addPropertyResult("monitoringOutputs", "MonitoringOutputs", (properties.MonitoringOutputs != null ? cfn_parse.FromCloudFormation.getArray(CfnMonitoringScheduleMonitoringOutputPropertyFromCloudFormation)(properties.MonitoringOutputs) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringJobDefinitionProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringJobDefinitionProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleMonitoringJobDefinitionPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("baselineConfig", CfnMonitoringScheduleBaselineConfigPropertyValidator)(properties.baselineConfig));
  errors.collect(cdk.propertyValidator("environment", cdk.hashValidator(cdk.validateString))(properties.environment));
  errors.collect(cdk.propertyValidator("monitoringAppSpecification", cdk.requiredValidator)(properties.monitoringAppSpecification));
  errors.collect(cdk.propertyValidator("monitoringAppSpecification", CfnMonitoringScheduleMonitoringAppSpecificationPropertyValidator)(properties.monitoringAppSpecification));
  errors.collect(cdk.propertyValidator("monitoringInputs", cdk.requiredValidator)(properties.monitoringInputs));
  errors.collect(cdk.propertyValidator("monitoringInputs", cdk.listValidator(CfnMonitoringScheduleMonitoringInputPropertyValidator))(properties.monitoringInputs));
  errors.collect(cdk.propertyValidator("monitoringOutputConfig", cdk.requiredValidator)(properties.monitoringOutputConfig));
  errors.collect(cdk.propertyValidator("monitoringOutputConfig", CfnMonitoringScheduleMonitoringOutputConfigPropertyValidator)(properties.monitoringOutputConfig));
  errors.collect(cdk.propertyValidator("monitoringResources", cdk.requiredValidator)(properties.monitoringResources));
  errors.collect(cdk.propertyValidator("monitoringResources", CfnMonitoringScheduleMonitoringResourcesPropertyValidator)(properties.monitoringResources));
  errors.collect(cdk.propertyValidator("networkConfig", CfnMonitoringScheduleNetworkConfigPropertyValidator)(properties.networkConfig));
  errors.collect(cdk.propertyValidator("roleArn", cdk.requiredValidator)(properties.roleArn));
  errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
  errors.collect(cdk.propertyValidator("stoppingCondition", CfnMonitoringScheduleStoppingConditionPropertyValidator)(properties.stoppingCondition));
  return errors.wrap("supplied properties not correct for \"MonitoringJobDefinitionProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleMonitoringJobDefinitionPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleMonitoringJobDefinitionPropertyValidator(properties).assertSuccess();
  return {
    "BaselineConfig": convertCfnMonitoringScheduleBaselineConfigPropertyToCloudFormation(properties.baselineConfig),
    "Environment": cdk.hashMapper(cdk.stringToCloudFormation)(properties.environment),
    "MonitoringAppSpecification": convertCfnMonitoringScheduleMonitoringAppSpecificationPropertyToCloudFormation(properties.monitoringAppSpecification),
    "MonitoringInputs": cdk.listMapper(convertCfnMonitoringScheduleMonitoringInputPropertyToCloudFormation)(properties.monitoringInputs),
    "MonitoringOutputConfig": convertCfnMonitoringScheduleMonitoringOutputConfigPropertyToCloudFormation(properties.monitoringOutputConfig),
    "MonitoringResources": convertCfnMonitoringScheduleMonitoringResourcesPropertyToCloudFormation(properties.monitoringResources),
    "NetworkConfig": convertCfnMonitoringScheduleNetworkConfigPropertyToCloudFormation(properties.networkConfig),
    "RoleArn": cdk.stringToCloudFormation(properties.roleArn),
    "StoppingCondition": convertCfnMonitoringScheduleStoppingConditionPropertyToCloudFormation(properties.stoppingCondition)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleMonitoringJobDefinitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnMonitoringSchedule.MonitoringJobDefinitionProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.MonitoringJobDefinitionProperty>();
  ret.addPropertyResult("baselineConfig", "BaselineConfig", (properties.BaselineConfig != null ? CfnMonitoringScheduleBaselineConfigPropertyFromCloudFormation(properties.BaselineConfig) : undefined));
  ret.addPropertyResult("environment", "Environment", (properties.Environment != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Environment) : undefined));
  ret.addPropertyResult("monitoringAppSpecification", "MonitoringAppSpecification", (properties.MonitoringAppSpecification != null ? CfnMonitoringScheduleMonitoringAppSpecificationPropertyFromCloudFormation(properties.MonitoringAppSpecification) : undefined));
  ret.addPropertyResult("monitoringInputs", "MonitoringInputs", (properties.MonitoringInputs != null ? cfn_parse.FromCloudFormation.getArray(CfnMonitoringScheduleMonitoringInputPropertyFromCloudFormation)(properties.MonitoringInputs) : undefined));
  ret.addPropertyResult("monitoringOutputConfig", "MonitoringOutputConfig", (properties.MonitoringOutputConfig != null ? CfnMonitoringScheduleMonitoringOutputConfigPropertyFromCloudFormation(properties.MonitoringOutputConfig) : undefined));
  ret.addPropertyResult("monitoringResources", "MonitoringResources", (properties.MonitoringResources != null ? CfnMonitoringScheduleMonitoringResourcesPropertyFromCloudFormation(properties.MonitoringResources) : undefined));
  ret.addPropertyResult("networkConfig", "NetworkConfig", (properties.NetworkConfig != null ? CfnMonitoringScheduleNetworkConfigPropertyFromCloudFormation(properties.NetworkConfig) : undefined));
  ret.addPropertyResult("roleArn", "RoleArn", (properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined));
  ret.addPropertyResult("stoppingCondition", "StoppingCondition", (properties.StoppingCondition != null ? CfnMonitoringScheduleStoppingConditionPropertyFromCloudFormation(properties.StoppingCondition) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringScheduleConfigProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringScheduleConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleMonitoringScheduleConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("monitoringJobDefinition", CfnMonitoringScheduleMonitoringJobDefinitionPropertyValidator)(properties.monitoringJobDefinition));
  errors.collect(cdk.propertyValidator("monitoringJobDefinitionName", cdk.validateString)(properties.monitoringJobDefinitionName));
  errors.collect(cdk.propertyValidator("monitoringType", cdk.validateString)(properties.monitoringType));
  errors.collect(cdk.propertyValidator("scheduleConfig", CfnMonitoringScheduleScheduleConfigPropertyValidator)(properties.scheduleConfig));
  return errors.wrap("supplied properties not correct for \"MonitoringScheduleConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleMonitoringScheduleConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleMonitoringScheduleConfigPropertyValidator(properties).assertSuccess();
  return {
    "MonitoringJobDefinition": convertCfnMonitoringScheduleMonitoringJobDefinitionPropertyToCloudFormation(properties.monitoringJobDefinition),
    "MonitoringJobDefinitionName": cdk.stringToCloudFormation(properties.monitoringJobDefinitionName),
    "MonitoringType": cdk.stringToCloudFormation(properties.monitoringType),
    "ScheduleConfig": convertCfnMonitoringScheduleScheduleConfigPropertyToCloudFormation(properties.scheduleConfig)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleMonitoringScheduleConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnMonitoringSchedule.MonitoringScheduleConfigProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.MonitoringScheduleConfigProperty>();
  ret.addPropertyResult("monitoringJobDefinition", "MonitoringJobDefinition", (properties.MonitoringJobDefinition != null ? CfnMonitoringScheduleMonitoringJobDefinitionPropertyFromCloudFormation(properties.MonitoringJobDefinition) : undefined));
  ret.addPropertyResult("monitoringJobDefinitionName", "MonitoringJobDefinitionName", (properties.MonitoringJobDefinitionName != null ? cfn_parse.FromCloudFormation.getString(properties.MonitoringJobDefinitionName) : undefined));
  ret.addPropertyResult("monitoringType", "MonitoringType", (properties.MonitoringType != null ? cfn_parse.FromCloudFormation.getString(properties.MonitoringType) : undefined));
  ret.addPropertyResult("scheduleConfig", "ScheduleConfig", (properties.ScheduleConfig != null ? CfnMonitoringScheduleScheduleConfigPropertyFromCloudFormation(properties.ScheduleConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MonitoringExecutionSummaryProperty`
 *
 * @param properties - the TypeScript properties of a `MonitoringExecutionSummaryProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringScheduleMonitoringExecutionSummaryPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("creationTime", cdk.requiredValidator)(properties.creationTime));
  errors.collect(cdk.propertyValidator("creationTime", cdk.validateString)(properties.creationTime));
  errors.collect(cdk.propertyValidator("endpointName", cdk.validateString)(properties.endpointName));
  errors.collect(cdk.propertyValidator("failureReason", cdk.validateString)(properties.failureReason));
  errors.collect(cdk.propertyValidator("lastModifiedTime", cdk.requiredValidator)(properties.lastModifiedTime));
  errors.collect(cdk.propertyValidator("lastModifiedTime", cdk.validateString)(properties.lastModifiedTime));
  errors.collect(cdk.propertyValidator("monitoringExecutionStatus", cdk.requiredValidator)(properties.monitoringExecutionStatus));
  errors.collect(cdk.propertyValidator("monitoringExecutionStatus", cdk.validateString)(properties.monitoringExecutionStatus));
  errors.collect(cdk.propertyValidator("monitoringScheduleName", cdk.requiredValidator)(properties.monitoringScheduleName));
  errors.collect(cdk.propertyValidator("monitoringScheduleName", cdk.validateString)(properties.monitoringScheduleName));
  errors.collect(cdk.propertyValidator("processingJobArn", cdk.validateString)(properties.processingJobArn));
  errors.collect(cdk.propertyValidator("scheduledTime", cdk.requiredValidator)(properties.scheduledTime));
  errors.collect(cdk.propertyValidator("scheduledTime", cdk.validateString)(properties.scheduledTime));
  return errors.wrap("supplied properties not correct for \"MonitoringExecutionSummaryProperty\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringScheduleMonitoringExecutionSummaryPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringScheduleMonitoringExecutionSummaryPropertyValidator(properties).assertSuccess();
  return {
    "CreationTime": cdk.stringToCloudFormation(properties.creationTime),
    "EndpointName": cdk.stringToCloudFormation(properties.endpointName),
    "FailureReason": cdk.stringToCloudFormation(properties.failureReason),
    "LastModifiedTime": cdk.stringToCloudFormation(properties.lastModifiedTime),
    "MonitoringExecutionStatus": cdk.stringToCloudFormation(properties.monitoringExecutionStatus),
    "MonitoringScheduleName": cdk.stringToCloudFormation(properties.monitoringScheduleName),
    "ProcessingJobArn": cdk.stringToCloudFormation(properties.processingJobArn),
    "ScheduledTime": cdk.stringToCloudFormation(properties.scheduledTime)
  };
}

// @ts-ignore TS6133
function CfnMonitoringScheduleMonitoringExecutionSummaryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnMonitoringSchedule.MonitoringExecutionSummaryProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringSchedule.MonitoringExecutionSummaryProperty>();
  ret.addPropertyResult("creationTime", "CreationTime", (properties.CreationTime != null ? cfn_parse.FromCloudFormation.getString(properties.CreationTime) : undefined));
  ret.addPropertyResult("endpointName", "EndpointName", (properties.EndpointName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointName) : undefined));
  ret.addPropertyResult("failureReason", "FailureReason", (properties.FailureReason != null ? cfn_parse.FromCloudFormation.getString(properties.FailureReason) : undefined));
  ret.addPropertyResult("lastModifiedTime", "LastModifiedTime", (properties.LastModifiedTime != null ? cfn_parse.FromCloudFormation.getString(properties.LastModifiedTime) : undefined));
  ret.addPropertyResult("monitoringExecutionStatus", "MonitoringExecutionStatus", (properties.MonitoringExecutionStatus != null ? cfn_parse.FromCloudFormation.getString(properties.MonitoringExecutionStatus) : undefined));
  ret.addPropertyResult("monitoringScheduleName", "MonitoringScheduleName", (properties.MonitoringScheduleName != null ? cfn_parse.FromCloudFormation.getString(properties.MonitoringScheduleName) : undefined));
  ret.addPropertyResult("processingJobArn", "ProcessingJobArn", (properties.ProcessingJobArn != null ? cfn_parse.FromCloudFormation.getString(properties.ProcessingJobArn) : undefined));
  ret.addPropertyResult("scheduledTime", "ScheduledTime", (properties.ScheduledTime != null ? cfn_parse.FromCloudFormation.getString(properties.ScheduledTime) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnMonitoringScheduleProps`
 *
 * @param properties - the TypeScript properties of a `CfnMonitoringScheduleProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnMonitoringSchedulePropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("endpointName", cdk.validateString)(properties.endpointName));
  errors.collect(cdk.propertyValidator("failureReason", cdk.validateString)(properties.failureReason));
  errors.collect(cdk.propertyValidator("lastMonitoringExecutionSummary", CfnMonitoringScheduleMonitoringExecutionSummaryPropertyValidator)(properties.lastMonitoringExecutionSummary));
  errors.collect(cdk.propertyValidator("monitoringScheduleConfig", cdk.requiredValidator)(properties.monitoringScheduleConfig));
  errors.collect(cdk.propertyValidator("monitoringScheduleConfig", CfnMonitoringScheduleMonitoringScheduleConfigPropertyValidator)(properties.monitoringScheduleConfig));
  errors.collect(cdk.propertyValidator("monitoringScheduleName", cdk.requiredValidator)(properties.monitoringScheduleName));
  errors.collect(cdk.propertyValidator("monitoringScheduleName", cdk.validateString)(properties.monitoringScheduleName));
  errors.collect(cdk.propertyValidator("monitoringScheduleStatus", cdk.validateString)(properties.monitoringScheduleStatus));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  return errors.wrap("supplied properties not correct for \"CfnMonitoringScheduleProps\"");
}

// @ts-ignore TS6133
function convertCfnMonitoringSchedulePropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnMonitoringSchedulePropsValidator(properties).assertSuccess();
  return {
    "EndpointName": cdk.stringToCloudFormation(properties.endpointName),
    "FailureReason": cdk.stringToCloudFormation(properties.failureReason),
    "LastMonitoringExecutionSummary": convertCfnMonitoringScheduleMonitoringExecutionSummaryPropertyToCloudFormation(properties.lastMonitoringExecutionSummary),
    "MonitoringScheduleConfig": convertCfnMonitoringScheduleMonitoringScheduleConfigPropertyToCloudFormation(properties.monitoringScheduleConfig),
    "MonitoringScheduleName": cdk.stringToCloudFormation(properties.monitoringScheduleName),
    "MonitoringScheduleStatus": cdk.stringToCloudFormation(properties.monitoringScheduleStatus),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
  };
}

// @ts-ignore TS6133
function CfnMonitoringSchedulePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnMonitoringScheduleProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnMonitoringScheduleProps>();
  ret.addPropertyResult("endpointName", "EndpointName", (properties.EndpointName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointName) : undefined));
  ret.addPropertyResult("failureReason", "FailureReason", (properties.FailureReason != null ? cfn_parse.FromCloudFormation.getString(properties.FailureReason) : undefined));
  ret.addPropertyResult("lastMonitoringExecutionSummary", "LastMonitoringExecutionSummary", (properties.LastMonitoringExecutionSummary != null ? CfnMonitoringScheduleMonitoringExecutionSummaryPropertyFromCloudFormation(properties.LastMonitoringExecutionSummary) : undefined));
  ret.addPropertyResult("monitoringScheduleConfig", "MonitoringScheduleConfig", (properties.MonitoringScheduleConfig != null ? CfnMonitoringScheduleMonitoringScheduleConfigPropertyFromCloudFormation(properties.MonitoringScheduleConfig) : undefined));
  ret.addPropertyResult("monitoringScheduleName", "MonitoringScheduleName", (properties.MonitoringScheduleName != null ? cfn_parse.FromCloudFormation.getString(properties.MonitoringScheduleName) : undefined));
  ret.addPropertyResult("monitoringScheduleStatus", "MonitoringScheduleStatus", (properties.MonitoringScheduleStatus != null ? cfn_parse.FromCloudFormation.getString(properties.MonitoringScheduleStatus) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * The `AWS::SageMaker::NotebookInstance` resource creates an Amazon SageMaker notebook instance.
 *
 * A notebook instance is a machine learning (ML) compute instance running on a Jupyter notebook. For more information, see [Use Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi.html) .
 *
 * @cloudformationResource AWS::SageMaker::NotebookInstance
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html
 */
export class CfnNotebookInstance extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::NotebookInstance";

  /**
   * Build a CfnNotebookInstance from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnNotebookInstance {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnNotebookInstancePropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnNotebookInstance(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * @cloudformationAttribute Id
   */
  public readonly attrId: string;

  /**
   * The name of the notebook instance, such as `MyNotebookInstance` .
   *
   * @cloudformationAttribute NotebookInstanceName
   */
  public readonly attrNotebookInstanceName: string;

  /**
   * A list of Amazon Elastic Inference (EI) instance types to associate with the notebook instance.
   */
  public acceleratorTypes?: Array<string>;

  /**
   * An array of up to three Git repositories associated with the notebook instance.
   */
  public additionalCodeRepositories?: Array<string>;

  /**
   * The Git repository associated with the notebook instance as its default code repository.
   */
  public defaultCodeRepository?: string;

  /**
   * Sets whether SageMaker provides internet access to the notebook instance.
   */
  public directInternetAccess?: string;

  /**
   * Information on the IMDS configuration of the notebook instance.
   */
  public instanceMetadataServiceConfiguration?: CfnNotebookInstance.InstanceMetadataServiceConfigurationProperty | cdk.IResolvable;

  /**
   * The type of ML compute instance to launch for the notebook instance.
   */
  public instanceType: string;

  /**
   * The Amazon Resource Name (ARN) of a AWS Key Management Service key that SageMaker uses to encrypt data on the storage volume attached to your notebook instance.
   */
  public kmsKeyId?: string;

  /**
   * The name of a lifecycle configuration to associate with the notebook instance.
   */
  public lifecycleConfigName?: string;

  /**
   * The name of the new notebook instance.
   */
  public notebookInstanceName?: string;

  /**
   * The platform identifier of the notebook instance runtime environment.
   */
  public platformIdentifier?: string;

  /**
   * When you send any requests to AWS resources from the notebook instance, SageMaker assumes this role to perform tasks on your behalf.
   */
  public roleArn: string;

  /**
   * Whether root access is enabled or disabled for users of the notebook instance. The default value is `Enabled` .
   */
  public rootAccess?: string;

  /**
   * The VPC security group IDs, in the form sg-xxxxxxxx.
   */
  public securityGroupIds?: Array<string>;

  /**
   * The ID of the subnet in a VPC to which you would like to have a connectivity from your ML compute instance.
   */
  public subnetId?: string;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * A list of key-value pairs to apply to this resource.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * The size, in GB, of the ML storage volume to attach to the notebook instance.
   */
  public volumeSizeInGb?: number;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnNotebookInstanceProps) {
    super(scope, id, {
      "type": CfnNotebookInstance.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "instanceType", this);
    cdk.requireProperty(props, "roleArn", this);

    this.attrId = cdk.Token.asString(this.getAtt("Id", cdk.ResolutionTypeHint.STRING));
    this.attrNotebookInstanceName = cdk.Token.asString(this.getAtt("NotebookInstanceName", cdk.ResolutionTypeHint.STRING));
    this.acceleratorTypes = props.acceleratorTypes;
    this.additionalCodeRepositories = props.additionalCodeRepositories;
    this.defaultCodeRepository = props.defaultCodeRepository;
    this.directInternetAccess = props.directInternetAccess;
    this.instanceMetadataServiceConfiguration = props.instanceMetadataServiceConfiguration;
    this.instanceType = props.instanceType;
    this.kmsKeyId = props.kmsKeyId;
    this.lifecycleConfigName = props.lifecycleConfigName;
    this.notebookInstanceName = props.notebookInstanceName;
    this.platformIdentifier = props.platformIdentifier;
    this.roleArn = props.roleArn;
    this.rootAccess = props.rootAccess;
    this.securityGroupIds = props.securityGroupIds;
    this.subnetId = props.subnetId;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::NotebookInstance", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
    this.volumeSizeInGb = props.volumeSizeInGb;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "acceleratorTypes": this.acceleratorTypes,
      "additionalCodeRepositories": this.additionalCodeRepositories,
      "defaultCodeRepository": this.defaultCodeRepository,
      "directInternetAccess": this.directInternetAccess,
      "instanceMetadataServiceConfiguration": this.instanceMetadataServiceConfiguration,
      "instanceType": this.instanceType,
      "kmsKeyId": this.kmsKeyId,
      "lifecycleConfigName": this.lifecycleConfigName,
      "notebookInstanceName": this.notebookInstanceName,
      "platformIdentifier": this.platformIdentifier,
      "roleArn": this.roleArn,
      "rootAccess": this.rootAccess,
      "securityGroupIds": this.securityGroupIds,
      "subnetId": this.subnetId,
      "tags": this.tags.renderTags(),
      "volumeSizeInGb": this.volumeSizeInGb
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnNotebookInstance.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnNotebookInstancePropsToCloudFormation(props);
  }
}

export namespace CfnNotebookInstance {
  /**
   * Information on the IMDS configuration of the notebook instance.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-notebookinstance-instancemetadataserviceconfiguration.html
   */
  export interface InstanceMetadataServiceConfigurationProperty {
    /**
     * Indicates the minimum IMDS version that the notebook instance supports.
     *
     * When passed as part of `CreateNotebookInstance` , if no value is selected, then it defaults to IMDSv1. This means that both IMDSv1 and IMDSv2 are supported. If passed as part of `UpdateNotebookInstance` , there is no default.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-notebookinstance-instancemetadataserviceconfiguration.html#cfn-sagemaker-notebookinstance-instancemetadataserviceconfiguration-minimuminstancemetadataserviceversion
     */
    readonly minimumInstanceMetadataServiceVersion: string;
  }
}

/**
 * Properties for defining a `CfnNotebookInstance`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html
 */
export interface CfnNotebookInstanceProps {
  /**
   * A list of Amazon Elastic Inference (EI) instance types to associate with the notebook instance.
   *
   * Currently, only one instance type can be associated with a notebook instance. For more information, see [Using Elastic Inference in Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html) .
   *
   * *Valid Values:* `ml.eia1.medium | ml.eia1.large | ml.eia1.xlarge | ml.eia2.medium | ml.eia2.large | ml.eia2.xlarge` .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html#cfn-sagemaker-notebookinstance-acceleratortypes
   */
  readonly acceleratorTypes?: Array<string>;

  /**
   * An array of up to three Git repositories associated with the notebook instance.
   *
   * These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in [AWS CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see [Associating Git Repositories with SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html#cfn-sagemaker-notebookinstance-additionalcoderepositories
   */
  readonly additionalCodeRepositories?: Array<string>;

  /**
   * The Git repository associated with the notebook instance as its default code repository.
   *
   * This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in [AWS CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see [Associating Git Repositories with SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html#cfn-sagemaker-notebookinstance-defaultcoderepository
   */
  readonly defaultCodeRepository?: string;

  /**
   * Sets whether SageMaker provides internet access to the notebook instance.
   *
   * If you set this to `Disabled` this notebook instance is able to access resources only in your VPC, and is not be able to connect to SageMaker training and endpoint services unless you configure a NAT Gateway in your VPC.
   *
   * For more information, see [Notebook Instances Are Internet-Enabled by Default](https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access) . You can set the value of this parameter to `Disabled` only if you set a value for the `SubnetId` parameter.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html#cfn-sagemaker-notebookinstance-directinternetaccess
   */
  readonly directInternetAccess?: string;

  /**
   * Information on the IMDS configuration of the notebook instance.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html#cfn-sagemaker-notebookinstance-instancemetadataserviceconfiguration
   */
  readonly instanceMetadataServiceConfiguration?: CfnNotebookInstance.InstanceMetadataServiceConfigurationProperty | cdk.IResolvable;

  /**
   * The type of ML compute instance to launch for the notebook instance.
   *
   * > Expect some interruption of service if this parameter is changed as CloudFormation stops a notebook instance and starts it up again to update it.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html#cfn-sagemaker-notebookinstance-instancetype
   */
  readonly instanceType: string;

  /**
   * The Amazon Resource Name (ARN) of a AWS Key Management Service key that SageMaker uses to encrypt data on the storage volume attached to your notebook instance.
   *
   * The KMS key you provide must be enabled. For information, see [Enabling and Disabling Keys](https://docs.aws.amazon.com/kms/latest/developerguide/enabling-keys.html) in the *AWS Key Management Service Developer Guide* .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html#cfn-sagemaker-notebookinstance-kmskeyid
   */
  readonly kmsKeyId?: string;

  /**
   * The name of a lifecycle configuration to associate with the notebook instance.
   *
   * For information about lifecycle configurations, see [Customize a Notebook Instance](https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html) in the *Amazon SageMaker Developer Guide* .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html#cfn-sagemaker-notebookinstance-lifecycleconfigname
   */
  readonly lifecycleConfigName?: string;

  /**
   * The name of the new notebook instance.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html#cfn-sagemaker-notebookinstance-notebookinstancename
   */
  readonly notebookInstanceName?: string;

  /**
   * The platform identifier of the notebook instance runtime environment.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html#cfn-sagemaker-notebookinstance-platformidentifier
   */
  readonly platformIdentifier?: string;

  /**
   * When you send any requests to AWS resources from the notebook instance, SageMaker assumes this role to perform tasks on your behalf.
   *
   * You must grant this role necessary permissions so SageMaker can perform these tasks. The policy must allow the SageMaker service principal (sagemaker.amazonaws.com) permissions to assume this role. For more information, see [SageMaker Roles](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html) .
   *
   * > To be able to pass this role to SageMaker, the caller of this API must have the `iam:PassRole` permission.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html#cfn-sagemaker-notebookinstance-rolearn
   */
  readonly roleArn: string;

  /**
   * Whether root access is enabled or disabled for users of the notebook instance. The default value is `Enabled` .
   *
   * > Lifecycle configurations need root access to be able to set up a notebook instance. Because of this, lifecycle configurations associated with a notebook instance always run with root access even if you disable root access for users.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html#cfn-sagemaker-notebookinstance-rootaccess
   */
  readonly rootAccess?: string;

  /**
   * The VPC security group IDs, in the form sg-xxxxxxxx.
   *
   * The security groups must be for the same VPC as specified in the subnet.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html#cfn-sagemaker-notebookinstance-securitygroupids
   */
  readonly securityGroupIds?: Array<string>;

  /**
   * The ID of the subnet in a VPC to which you would like to have a connectivity from your ML compute instance.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html#cfn-sagemaker-notebookinstance-subnetid
   */
  readonly subnetId?: string;

  /**
   * A list of key-value pairs to apply to this resource.
   *
   * For more information, see [Resource Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) and [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what) .
   *
   * You can add tags later by using the `CreateTags` API.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html#cfn-sagemaker-notebookinstance-tags
   */
  readonly tags?: Array<cdk.CfnTag>;

  /**
   * The size, in GB, of the ML storage volume to attach to the notebook instance.
   *
   * The default value is 5 GB.
   *
   * > Expect some interruption of service if this parameter is changed as CloudFormation stops a notebook instance and starts it up again to update it.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html#cfn-sagemaker-notebookinstance-volumesizeingb
   */
  readonly volumeSizeInGb?: number;
}

/**
 * Determine whether the given properties match those of a `InstanceMetadataServiceConfigurationProperty`
 *
 * @param properties - the TypeScript properties of a `InstanceMetadataServiceConfigurationProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnNotebookInstanceInstanceMetadataServiceConfigurationPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("minimumInstanceMetadataServiceVersion", cdk.requiredValidator)(properties.minimumInstanceMetadataServiceVersion));
  errors.collect(cdk.propertyValidator("minimumInstanceMetadataServiceVersion", cdk.validateString)(properties.minimumInstanceMetadataServiceVersion));
  return errors.wrap("supplied properties not correct for \"InstanceMetadataServiceConfigurationProperty\"");
}

// @ts-ignore TS6133
function convertCfnNotebookInstanceInstanceMetadataServiceConfigurationPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnNotebookInstanceInstanceMetadataServiceConfigurationPropertyValidator(properties).assertSuccess();
  return {
    "MinimumInstanceMetadataServiceVersion": cdk.stringToCloudFormation(properties.minimumInstanceMetadataServiceVersion)
  };
}

// @ts-ignore TS6133
function CfnNotebookInstanceInstanceMetadataServiceConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNotebookInstance.InstanceMetadataServiceConfigurationProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNotebookInstance.InstanceMetadataServiceConfigurationProperty>();
  ret.addPropertyResult("minimumInstanceMetadataServiceVersion", "MinimumInstanceMetadataServiceVersion", (properties.MinimumInstanceMetadataServiceVersion != null ? cfn_parse.FromCloudFormation.getString(properties.MinimumInstanceMetadataServiceVersion) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnNotebookInstanceProps`
 *
 * @param properties - the TypeScript properties of a `CfnNotebookInstanceProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnNotebookInstancePropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("acceleratorTypes", cdk.listValidator(cdk.validateString))(properties.acceleratorTypes));
  errors.collect(cdk.propertyValidator("additionalCodeRepositories", cdk.listValidator(cdk.validateString))(properties.additionalCodeRepositories));
  errors.collect(cdk.propertyValidator("defaultCodeRepository", cdk.validateString)(properties.defaultCodeRepository));
  errors.collect(cdk.propertyValidator("directInternetAccess", cdk.validateString)(properties.directInternetAccess));
  errors.collect(cdk.propertyValidator("instanceMetadataServiceConfiguration", CfnNotebookInstanceInstanceMetadataServiceConfigurationPropertyValidator)(properties.instanceMetadataServiceConfiguration));
  errors.collect(cdk.propertyValidator("instanceType", cdk.requiredValidator)(properties.instanceType));
  errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
  errors.collect(cdk.propertyValidator("kmsKeyId", cdk.validateString)(properties.kmsKeyId));
  errors.collect(cdk.propertyValidator("lifecycleConfigName", cdk.validateString)(properties.lifecycleConfigName));
  errors.collect(cdk.propertyValidator("notebookInstanceName", cdk.validateString)(properties.notebookInstanceName));
  errors.collect(cdk.propertyValidator("platformIdentifier", cdk.validateString)(properties.platformIdentifier));
  errors.collect(cdk.propertyValidator("roleArn", cdk.requiredValidator)(properties.roleArn));
  errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
  errors.collect(cdk.propertyValidator("rootAccess", cdk.validateString)(properties.rootAccess));
  errors.collect(cdk.propertyValidator("securityGroupIds", cdk.listValidator(cdk.validateString))(properties.securityGroupIds));
  errors.collect(cdk.propertyValidator("subnetId", cdk.validateString)(properties.subnetId));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  errors.collect(cdk.propertyValidator("volumeSizeInGb", cdk.validateNumber)(properties.volumeSizeInGb));
  return errors.wrap("supplied properties not correct for \"CfnNotebookInstanceProps\"");
}

// @ts-ignore TS6133
function convertCfnNotebookInstancePropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnNotebookInstancePropsValidator(properties).assertSuccess();
  return {
    "AcceleratorTypes": cdk.listMapper(cdk.stringToCloudFormation)(properties.acceleratorTypes),
    "AdditionalCodeRepositories": cdk.listMapper(cdk.stringToCloudFormation)(properties.additionalCodeRepositories),
    "DefaultCodeRepository": cdk.stringToCloudFormation(properties.defaultCodeRepository),
    "DirectInternetAccess": cdk.stringToCloudFormation(properties.directInternetAccess),
    "InstanceMetadataServiceConfiguration": convertCfnNotebookInstanceInstanceMetadataServiceConfigurationPropertyToCloudFormation(properties.instanceMetadataServiceConfiguration),
    "InstanceType": cdk.stringToCloudFormation(properties.instanceType),
    "KmsKeyId": cdk.stringToCloudFormation(properties.kmsKeyId),
    "LifecycleConfigName": cdk.stringToCloudFormation(properties.lifecycleConfigName),
    "NotebookInstanceName": cdk.stringToCloudFormation(properties.notebookInstanceName),
    "PlatformIdentifier": cdk.stringToCloudFormation(properties.platformIdentifier),
    "RoleArn": cdk.stringToCloudFormation(properties.roleArn),
    "RootAccess": cdk.stringToCloudFormation(properties.rootAccess),
    "SecurityGroupIds": cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroupIds),
    "SubnetId": cdk.stringToCloudFormation(properties.subnetId),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
    "VolumeSizeInGB": cdk.numberToCloudFormation(properties.volumeSizeInGb)
  };
}

// @ts-ignore TS6133
function CfnNotebookInstancePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNotebookInstanceProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNotebookInstanceProps>();
  ret.addPropertyResult("acceleratorTypes", "AcceleratorTypes", (properties.AcceleratorTypes != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.AcceleratorTypes) : undefined));
  ret.addPropertyResult("additionalCodeRepositories", "AdditionalCodeRepositories", (properties.AdditionalCodeRepositories != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.AdditionalCodeRepositories) : undefined));
  ret.addPropertyResult("defaultCodeRepository", "DefaultCodeRepository", (properties.DefaultCodeRepository != null ? cfn_parse.FromCloudFormation.getString(properties.DefaultCodeRepository) : undefined));
  ret.addPropertyResult("directInternetAccess", "DirectInternetAccess", (properties.DirectInternetAccess != null ? cfn_parse.FromCloudFormation.getString(properties.DirectInternetAccess) : undefined));
  ret.addPropertyResult("instanceMetadataServiceConfiguration", "InstanceMetadataServiceConfiguration", (properties.InstanceMetadataServiceConfiguration != null ? CfnNotebookInstanceInstanceMetadataServiceConfigurationPropertyFromCloudFormation(properties.InstanceMetadataServiceConfiguration) : undefined));
  ret.addPropertyResult("instanceType", "InstanceType", (properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined));
  ret.addPropertyResult("kmsKeyId", "KmsKeyId", (properties.KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.KmsKeyId) : undefined));
  ret.addPropertyResult("lifecycleConfigName", "LifecycleConfigName", (properties.LifecycleConfigName != null ? cfn_parse.FromCloudFormation.getString(properties.LifecycleConfigName) : undefined));
  ret.addPropertyResult("notebookInstanceName", "NotebookInstanceName", (properties.NotebookInstanceName != null ? cfn_parse.FromCloudFormation.getString(properties.NotebookInstanceName) : undefined));
  ret.addPropertyResult("platformIdentifier", "PlatformIdentifier", (properties.PlatformIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.PlatformIdentifier) : undefined));
  ret.addPropertyResult("roleArn", "RoleArn", (properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined));
  ret.addPropertyResult("rootAccess", "RootAccess", (properties.RootAccess != null ? cfn_parse.FromCloudFormation.getString(properties.RootAccess) : undefined));
  ret.addPropertyResult("securityGroupIds", "SecurityGroupIds", (properties.SecurityGroupIds != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SecurityGroupIds) : undefined));
  ret.addPropertyResult("subnetId", "SubnetId", (properties.SubnetId != null ? cfn_parse.FromCloudFormation.getString(properties.SubnetId) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addPropertyResult("volumeSizeInGb", "VolumeSizeInGB", (properties.VolumeSizeInGB != null ? cfn_parse.FromCloudFormation.getNumber(properties.VolumeSizeInGB) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * The `AWS::SageMaker::NotebookInstanceLifecycleConfig` resource creates shell scripts that run when you create and/or start a notebook instance.
 *
 * For information about notebook instance lifecycle configurations, see [Customize a Notebook Instance](https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html) in the *Amazon SageMaker Developer Guide* .
 *
 * @cloudformationResource AWS::SageMaker::NotebookInstanceLifecycleConfig
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstancelifecycleconfig.html
 */
export class CfnNotebookInstanceLifecycleConfig extends cdk.CfnResource implements cdk.IInspectable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::NotebookInstanceLifecycleConfig";

  /**
   * Build a CfnNotebookInstanceLifecycleConfig from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnNotebookInstanceLifecycleConfig {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnNotebookInstanceLifecycleConfigPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnNotebookInstanceLifecycleConfig(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * @cloudformationAttribute Id
   */
  public readonly attrId: string;

  /**
   * The name of the lifecycle configuration, such as `MyLifecycleConfig` .
   *
   * @cloudformationAttribute NotebookInstanceLifecycleConfigName
   */
  public readonly attrNotebookInstanceLifecycleConfigName: string;

  /**
   * The name of the lifecycle configuration.
   */
  public notebookInstanceLifecycleConfigName?: string;

  /**
   * A shell script that runs only once, when you create a notebook instance.
   */
  public onCreate?: Array<cdk.IResolvable | CfnNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHookProperty> | cdk.IResolvable;

  /**
   * A shell script that runs every time you start a notebook instance, including when you create the notebook instance.
   */
  public onStart?: Array<cdk.IResolvable | CfnNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHookProperty> | cdk.IResolvable;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnNotebookInstanceLifecycleConfigProps = {}) {
    super(scope, id, {
      "type": CfnNotebookInstanceLifecycleConfig.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    this.attrId = cdk.Token.asString(this.getAtt("Id", cdk.ResolutionTypeHint.STRING));
    this.attrNotebookInstanceLifecycleConfigName = cdk.Token.asString(this.getAtt("NotebookInstanceLifecycleConfigName", cdk.ResolutionTypeHint.STRING));
    this.notebookInstanceLifecycleConfigName = props.notebookInstanceLifecycleConfigName;
    this.onCreate = props.onCreate;
    this.onStart = props.onStart;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "notebookInstanceLifecycleConfigName": this.notebookInstanceLifecycleConfigName,
      "onCreate": this.onCreate,
      "onStart": this.onStart
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnNotebookInstanceLifecycleConfig.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnNotebookInstanceLifecycleConfigPropsToCloudFormation(props);
  }
}

export namespace CfnNotebookInstanceLifecycleConfig {
  /**
   * Specifies the notebook instance lifecycle configuration script.
   *
   * Each lifecycle configuration script has a limit of 16384 characters.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-notebookinstancelifecycleconfig-notebookinstancelifecyclehook.html
   */
  export interface NotebookInstanceLifecycleHookProperty {
    /**
     * A base64-encoded string that contains a shell script for a notebook instance lifecycle configuration.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-notebookinstancelifecycleconfig-notebookinstancelifecyclehook.html#cfn-sagemaker-notebookinstancelifecycleconfig-notebookinstancelifecyclehook-content
     */
    readonly content?: string;
  }
}

/**
 * Properties for defining a `CfnNotebookInstanceLifecycleConfig`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstancelifecycleconfig.html
 */
export interface CfnNotebookInstanceLifecycleConfigProps {
  /**
   * The name of the lifecycle configuration.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstancelifecycleconfig.html#cfn-sagemaker-notebookinstancelifecycleconfig-notebookinstancelifecycleconfigname
   */
  readonly notebookInstanceLifecycleConfigName?: string;

  /**
   * A shell script that runs only once, when you create a notebook instance.
   *
   * The shell script must be a base64-encoded string.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstancelifecycleconfig.html#cfn-sagemaker-notebookinstancelifecycleconfig-oncreate
   */
  readonly onCreate?: Array<cdk.IResolvable | CfnNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHookProperty> | cdk.IResolvable;

  /**
   * A shell script that runs every time you start a notebook instance, including when you create the notebook instance.
   *
   * The shell script must be a base64-encoded string.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstancelifecycleconfig.html#cfn-sagemaker-notebookinstancelifecycleconfig-onstart
   */
  readonly onStart?: Array<cdk.IResolvable | CfnNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHookProperty> | cdk.IResolvable;
}

/**
 * Determine whether the given properties match those of a `NotebookInstanceLifecycleHookProperty`
 *
 * @param properties - the TypeScript properties of a `NotebookInstanceLifecycleHookProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnNotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("content", cdk.validateString)(properties.content));
  return errors.wrap("supplied properties not correct for \"NotebookInstanceLifecycleHookProperty\"");
}

// @ts-ignore TS6133
function convertCfnNotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnNotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookPropertyValidator(properties).assertSuccess();
  return {
    "Content": cdk.stringToCloudFormation(properties.content)
  };
}

// @ts-ignore TS6133
function CfnNotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHookProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHookProperty>();
  ret.addPropertyResult("content", "Content", (properties.Content != null ? cfn_parse.FromCloudFormation.getString(properties.Content) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnNotebookInstanceLifecycleConfigProps`
 *
 * @param properties - the TypeScript properties of a `CfnNotebookInstanceLifecycleConfigProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnNotebookInstanceLifecycleConfigPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("notebookInstanceLifecycleConfigName", cdk.validateString)(properties.notebookInstanceLifecycleConfigName));
  errors.collect(cdk.propertyValidator("onCreate", cdk.listValidator(CfnNotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookPropertyValidator))(properties.onCreate));
  errors.collect(cdk.propertyValidator("onStart", cdk.listValidator(CfnNotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookPropertyValidator))(properties.onStart));
  return errors.wrap("supplied properties not correct for \"CfnNotebookInstanceLifecycleConfigProps\"");
}

// @ts-ignore TS6133
function convertCfnNotebookInstanceLifecycleConfigPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnNotebookInstanceLifecycleConfigPropsValidator(properties).assertSuccess();
  return {
    "NotebookInstanceLifecycleConfigName": cdk.stringToCloudFormation(properties.notebookInstanceLifecycleConfigName),
    "OnCreate": cdk.listMapper(convertCfnNotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookPropertyToCloudFormation)(properties.onCreate),
    "OnStart": cdk.listMapper(convertCfnNotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookPropertyToCloudFormation)(properties.onStart)
  };
}

// @ts-ignore TS6133
function CfnNotebookInstanceLifecycleConfigPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnNotebookInstanceLifecycleConfigProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnNotebookInstanceLifecycleConfigProps>();
  ret.addPropertyResult("notebookInstanceLifecycleConfigName", "NotebookInstanceLifecycleConfigName", (properties.NotebookInstanceLifecycleConfigName != null ? cfn_parse.FromCloudFormation.getString(properties.NotebookInstanceLifecycleConfigName) : undefined));
  ret.addPropertyResult("onCreate", "OnCreate", (properties.OnCreate != null ? cfn_parse.FromCloudFormation.getArray(CfnNotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookPropertyFromCloudFormation)(properties.OnCreate) : undefined));
  ret.addPropertyResult("onStart", "OnStart", (properties.OnStart != null ? cfn_parse.FromCloudFormation.getArray(CfnNotebookInstanceLifecycleConfigNotebookInstanceLifecycleHookPropertyFromCloudFormation)(properties.OnStart) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * The `AWS::SageMaker::Pipeline` resource creates shell scripts that run when you create and/or start a SageMaker Pipeline.
 *
 * For information about SageMaker Pipelines, see [SageMaker Pipelines](https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines.html) in the *Amazon SageMaker Developer Guide* .
 *
 * @cloudformationResource AWS::SageMaker::Pipeline
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-pipeline.html
 */
export class CfnPipeline extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::Pipeline";

  /**
   * Build a CfnPipeline from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnPipeline {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnPipelinePropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnPipeline(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The parallelism configuration applied to the pipeline.
   */
  public parallelismConfiguration?: any | cdk.IResolvable;

  /**
   * The definition of the pipeline.
   */
  public pipelineDefinition: any | cdk.IResolvable;

  /**
   * The description of the pipeline.
   */
  public pipelineDescription?: string;

  /**
   * The display name of the pipeline.
   */
  public pipelineDisplayName?: string;

  /**
   * The name of the pipeline.
   */
  public pipelineName: string;

  /**
   * The Amazon Resource Name (ARN) of the IAM role used to execute the pipeline.
   */
  public roleArn: string;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * The tags of the pipeline.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnPipelineProps) {
    super(scope, id, {
      "type": CfnPipeline.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "pipelineDefinition", this);
    cdk.requireProperty(props, "pipelineName", this);
    cdk.requireProperty(props, "roleArn", this);

    this.parallelismConfiguration = props.parallelismConfiguration;
    this.pipelineDefinition = props.pipelineDefinition;
    this.pipelineDescription = props.pipelineDescription;
    this.pipelineDisplayName = props.pipelineDisplayName;
    this.pipelineName = props.pipelineName;
    this.roleArn = props.roleArn;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::Pipeline", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "parallelismConfiguration": this.parallelismConfiguration,
      "pipelineDefinition": this.pipelineDefinition,
      "pipelineDescription": this.pipelineDescription,
      "pipelineDisplayName": this.pipelineDisplayName,
      "pipelineName": this.pipelineName,
      "roleArn": this.roleArn,
      "tags": this.tags.renderTags()
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnPipeline.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnPipelinePropsToCloudFormation(props);
  }
}

export namespace CfnPipeline {
  /**
   * Configuration that controls the parallelism of the pipeline.
   *
   * By default, the parallelism configuration specified applies to all executions of the pipeline unless overridden.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-pipeline-parallelismconfiguration.html
   */
  export interface ParallelismConfigurationProperty {
    /**
     * The max number of steps that can be executed in parallel.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-pipeline-parallelismconfiguration.html#cfn-sagemaker-pipeline-parallelismconfiguration-maxparallelexecutionsteps
     */
    readonly maxParallelExecutionSteps: number;
  }

  /**
   * The definition of the pipeline.
   *
   * This can be either a JSON string or an Amazon S3 location.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-pipeline-pipelinedefinition.html
   */
  export interface PipelineDefinitionProperty {
    /**
     * The [JSON pipeline definition](https://docs.aws.amazon.com/https://aws-sagemaker-mlops.github.io/sagemaker-model-building-pipeline-definition-JSON-schema/) of the pipeline.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-pipeline-pipelinedefinition.html#cfn-sagemaker-pipeline-pipelinedefinition-pipelinedefinitionbody
     */
    readonly pipelineDefinitionBody: string;

    /**
     * The location of the pipeline definition stored in Amazon S3.
     *
     * If specified, SageMaker retrieves the pipeline definition from this location.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-pipeline-pipelinedefinition.html#cfn-sagemaker-pipeline-pipelinedefinition-pipelinedefinitions3location
     */
    readonly pipelineDefinitionS3Location?: cdk.IResolvable | CfnPipeline.S3LocationProperty;
  }

  /**
   * The location of the pipeline definition stored in Amazon S3.
   *
   * If specified, SageMaker will retrieve the pipeline definition from this location.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-pipeline-s3location.html
   */
  export interface S3LocationProperty {
    /**
     * The name of the S3 bucket.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-pipeline-s3location.html#cfn-sagemaker-pipeline-s3location-bucket
     */
    readonly bucket: string;

    /**
     * A file checksum of the pipeline definition file.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-pipeline-s3location.html#cfn-sagemaker-pipeline-s3location-etag
     */
    readonly eTag?: string;

    /**
     * The object key (or key name) which uniquely identifies the object in an S3 bucket.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-pipeline-s3location.html#cfn-sagemaker-pipeline-s3location-key
     */
    readonly key: string;

    /**
     * The version ID of the pipeline definition file.
     *
     * If not specified, Amazon SageMaker will retrieve the latest version.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-pipeline-s3location.html#cfn-sagemaker-pipeline-s3location-version
     */
    readonly version?: string;
  }
}

/**
 * Properties for defining a `CfnPipeline`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-pipeline.html
 */
export interface CfnPipelineProps {
  /**
   * The parallelism configuration applied to the pipeline.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-pipeline.html#cfn-sagemaker-pipeline-parallelismconfiguration
   */
  readonly parallelismConfiguration?: any | cdk.IResolvable;

  /**
   * The definition of the pipeline.
   *
   * This can be either a JSON string or an Amazon S3 location.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-pipeline.html#cfn-sagemaker-pipeline-pipelinedefinition
   */
  readonly pipelineDefinition: any | cdk.IResolvable;

  /**
   * The description of the pipeline.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-pipeline.html#cfn-sagemaker-pipeline-pipelinedescription
   */
  readonly pipelineDescription?: string;

  /**
   * The display name of the pipeline.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-pipeline.html#cfn-sagemaker-pipeline-pipelinedisplayname
   */
  readonly pipelineDisplayName?: string;

  /**
   * The name of the pipeline.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-pipeline.html#cfn-sagemaker-pipeline-pipelinename
   */
  readonly pipelineName: string;

  /**
   * The Amazon Resource Name (ARN) of the IAM role used to execute the pipeline.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-pipeline.html#cfn-sagemaker-pipeline-rolearn
   */
  readonly roleArn: string;

  /**
   * The tags of the pipeline.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-pipeline.html#cfn-sagemaker-pipeline-tags
   */
  readonly tags?: Array<cdk.CfnTag>;
}

/**
 * Determine whether the given properties match those of a `ParallelismConfigurationProperty`
 *
 * @param properties - the TypeScript properties of a `ParallelismConfigurationProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnPipelineParallelismConfigurationPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("maxParallelExecutionSteps", cdk.requiredValidator)(properties.maxParallelExecutionSteps));
  errors.collect(cdk.propertyValidator("maxParallelExecutionSteps", cdk.validateNumber)(properties.maxParallelExecutionSteps));
  return errors.wrap("supplied properties not correct for \"ParallelismConfigurationProperty\"");
}

// @ts-ignore TS6133
function convertCfnPipelineParallelismConfigurationPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnPipelineParallelismConfigurationPropertyValidator(properties).assertSuccess();
  return {
    "MaxParallelExecutionSteps": cdk.numberToCloudFormation(properties.maxParallelExecutionSteps)
  };
}

// @ts-ignore TS6133
function CfnPipelineParallelismConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnPipeline.ParallelismConfigurationProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPipeline.ParallelismConfigurationProperty>();
  ret.addPropertyResult("maxParallelExecutionSteps", "MaxParallelExecutionSteps", (properties.MaxParallelExecutionSteps != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxParallelExecutionSteps) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `S3LocationProperty`
 *
 * @param properties - the TypeScript properties of a `S3LocationProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnPipelineS3LocationPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("bucket", cdk.requiredValidator)(properties.bucket));
  errors.collect(cdk.propertyValidator("bucket", cdk.validateString)(properties.bucket));
  errors.collect(cdk.propertyValidator("eTag", cdk.validateString)(properties.eTag));
  errors.collect(cdk.propertyValidator("key", cdk.requiredValidator)(properties.key));
  errors.collect(cdk.propertyValidator("key", cdk.validateString)(properties.key));
  errors.collect(cdk.propertyValidator("version", cdk.validateString)(properties.version));
  return errors.wrap("supplied properties not correct for \"S3LocationProperty\"");
}

// @ts-ignore TS6133
function convertCfnPipelineS3LocationPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnPipelineS3LocationPropertyValidator(properties).assertSuccess();
  return {
    "Bucket": cdk.stringToCloudFormation(properties.bucket),
    "ETag": cdk.stringToCloudFormation(properties.eTag),
    "Key": cdk.stringToCloudFormation(properties.key),
    "Version": cdk.stringToCloudFormation(properties.version)
  };
}

// @ts-ignore TS6133
function CfnPipelineS3LocationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnPipeline.S3LocationProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPipeline.S3LocationProperty>();
  ret.addPropertyResult("bucket", "Bucket", (properties.Bucket != null ? cfn_parse.FromCloudFormation.getString(properties.Bucket) : undefined));
  ret.addPropertyResult("eTag", "ETag", (properties.ETag != null ? cfn_parse.FromCloudFormation.getString(properties.ETag) : undefined));
  ret.addPropertyResult("key", "Key", (properties.Key != null ? cfn_parse.FromCloudFormation.getString(properties.Key) : undefined));
  ret.addPropertyResult("version", "Version", (properties.Version != null ? cfn_parse.FromCloudFormation.getString(properties.Version) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `PipelineDefinitionProperty`
 *
 * @param properties - the TypeScript properties of a `PipelineDefinitionProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnPipelinePipelineDefinitionPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("pipelineDefinitionBody", cdk.requiredValidator)(properties.pipelineDefinitionBody));
  errors.collect(cdk.propertyValidator("pipelineDefinitionBody", cdk.validateString)(properties.pipelineDefinitionBody));
  errors.collect(cdk.propertyValidator("pipelineDefinitionS3Location", CfnPipelineS3LocationPropertyValidator)(properties.pipelineDefinitionS3Location));
  return errors.wrap("supplied properties not correct for \"PipelineDefinitionProperty\"");
}

// @ts-ignore TS6133
function convertCfnPipelinePipelineDefinitionPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnPipelinePipelineDefinitionPropertyValidator(properties).assertSuccess();
  return {
    "PipelineDefinitionBody": cdk.stringToCloudFormation(properties.pipelineDefinitionBody),
    "PipelineDefinitionS3Location": convertCfnPipelineS3LocationPropertyToCloudFormation(properties.pipelineDefinitionS3Location)
  };
}

// @ts-ignore TS6133
function CfnPipelinePipelineDefinitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnPipeline.PipelineDefinitionProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPipeline.PipelineDefinitionProperty>();
  ret.addPropertyResult("pipelineDefinitionBody", "PipelineDefinitionBody", (properties.PipelineDefinitionBody != null ? cfn_parse.FromCloudFormation.getString(properties.PipelineDefinitionBody) : undefined));
  ret.addPropertyResult("pipelineDefinitionS3Location", "PipelineDefinitionS3Location", (properties.PipelineDefinitionS3Location != null ? CfnPipelineS3LocationPropertyFromCloudFormation(properties.PipelineDefinitionS3Location) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnPipelineProps`
 *
 * @param properties - the TypeScript properties of a `CfnPipelineProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnPipelinePropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("parallelismConfiguration", cdk.validateObject)(properties.parallelismConfiguration));
  errors.collect(cdk.propertyValidator("pipelineDefinition", cdk.requiredValidator)(properties.pipelineDefinition));
  errors.collect(cdk.propertyValidator("pipelineDefinition", cdk.validateObject)(properties.pipelineDefinition));
  errors.collect(cdk.propertyValidator("pipelineDescription", cdk.validateString)(properties.pipelineDescription));
  errors.collect(cdk.propertyValidator("pipelineDisplayName", cdk.validateString)(properties.pipelineDisplayName));
  errors.collect(cdk.propertyValidator("pipelineName", cdk.requiredValidator)(properties.pipelineName));
  errors.collect(cdk.propertyValidator("pipelineName", cdk.validateString)(properties.pipelineName));
  errors.collect(cdk.propertyValidator("roleArn", cdk.requiredValidator)(properties.roleArn));
  errors.collect(cdk.propertyValidator("roleArn", cdk.validateString)(properties.roleArn));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  return errors.wrap("supplied properties not correct for \"CfnPipelineProps\"");
}

// @ts-ignore TS6133
function convertCfnPipelinePropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnPipelinePropsValidator(properties).assertSuccess();
  return {
    "ParallelismConfiguration": cdk.objectToCloudFormation(properties.parallelismConfiguration),
    "PipelineDefinition": cdk.objectToCloudFormation(properties.pipelineDefinition),
    "PipelineDescription": cdk.stringToCloudFormation(properties.pipelineDescription),
    "PipelineDisplayName": cdk.stringToCloudFormation(properties.pipelineDisplayName),
    "PipelineName": cdk.stringToCloudFormation(properties.pipelineName),
    "RoleArn": cdk.stringToCloudFormation(properties.roleArn),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
  };
}

// @ts-ignore TS6133
function CfnPipelinePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnPipelineProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnPipelineProps>();
  ret.addPropertyResult("parallelismConfiguration", "ParallelismConfiguration", (properties.ParallelismConfiguration != null ? cfn_parse.FromCloudFormation.getAny(properties.ParallelismConfiguration) : undefined));
  ret.addPropertyResult("pipelineDefinition", "PipelineDefinition", (properties.PipelineDefinition != null ? cfn_parse.FromCloudFormation.getAny(properties.PipelineDefinition) : undefined));
  ret.addPropertyResult("pipelineDescription", "PipelineDescription", (properties.PipelineDescription != null ? cfn_parse.FromCloudFormation.getString(properties.PipelineDescription) : undefined));
  ret.addPropertyResult("pipelineDisplayName", "PipelineDisplayName", (properties.PipelineDisplayName != null ? cfn_parse.FromCloudFormation.getString(properties.PipelineDisplayName) : undefined));
  ret.addPropertyResult("pipelineName", "PipelineName", (properties.PipelineName != null ? cfn_parse.FromCloudFormation.getString(properties.PipelineName) : undefined));
  ret.addPropertyResult("roleArn", "RoleArn", (properties.RoleArn != null ? cfn_parse.FromCloudFormation.getString(properties.RoleArn) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Creates a machine learning (ML) project that can contain one or more templates that set up an ML pipeline from training to deploying an approved model.
 *
 * @cloudformationResource AWS::SageMaker::Project
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-project.html
 */
export class CfnProject extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::Project";

  /**
   * Build a CfnProject from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnProject {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnProjectPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnProject(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The time that the project was created.
   *
   * @cloudformationAttribute CreationTime
   */
  public readonly attrCreationTime: string;

  /**
   * The Amazon Resource Name (ARN) of the project.
   *
   * @cloudformationAttribute ProjectArn
   */
  public readonly attrProjectArn: string;

  /**
   * The ID of the project. This ID is prepended to all entities associated with this project.
   *
   * @cloudformationAttribute ProjectId
   */
  public readonly attrProjectId: string;

  /**
   * The status of the project.
   *
   * @cloudformationAttribute ProjectStatus
   */
  public readonly attrProjectStatus: string;

  /**
   * The description of the project.
   */
  public projectDescription?: string;

  /**
   * The name of the project.
   */
  public projectName: string;

  /**
   * Details of a provisioned service catalog product.
   */
  public serviceCatalogProvisionedProductDetails?: cdk.IResolvable | CfnProject.ServiceCatalogProvisionedProductDetailsProperty;

  /**
   * The product ID and provisioning artifact ID to provision a service catalog.
   */
  public serviceCatalogProvisioningDetails: any | cdk.IResolvable;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * A list of key-value pairs to apply to this resource.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnProjectProps) {
    super(scope, id, {
      "type": CfnProject.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "projectName", this);
    cdk.requireProperty(props, "serviceCatalogProvisioningDetails", this);

    this.attrCreationTime = cdk.Token.asString(this.getAtt("CreationTime", cdk.ResolutionTypeHint.STRING));
    this.attrProjectArn = cdk.Token.asString(this.getAtt("ProjectArn", cdk.ResolutionTypeHint.STRING));
    this.attrProjectId = cdk.Token.asString(this.getAtt("ProjectId", cdk.ResolutionTypeHint.STRING));
    this.attrProjectStatus = cdk.Token.asString(this.getAtt("ProjectStatus", cdk.ResolutionTypeHint.STRING));
    this.projectDescription = props.projectDescription;
    this.projectName = props.projectName;
    this.serviceCatalogProvisionedProductDetails = props.serviceCatalogProvisionedProductDetails;
    this.serviceCatalogProvisioningDetails = props.serviceCatalogProvisioningDetails;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::Project", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "projectDescription": this.projectDescription,
      "projectName": this.projectName,
      "serviceCatalogProvisionedProductDetails": this.serviceCatalogProvisionedProductDetails,
      "serviceCatalogProvisioningDetails": this.serviceCatalogProvisioningDetails,
      "tags": this.tags.renderTags()
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnProject.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnProjectPropsToCloudFormation(props);
  }
}

export namespace CfnProject {
  /**
   * Details of a provisioned service catalog product.
   *
   * For information about service catalog, see [What is AWS Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html) .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-project-servicecatalogprovisionedproductdetails.html
   */
  export interface ServiceCatalogProvisionedProductDetailsProperty {
    /**
     * The ID of the provisioned product.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-project-servicecatalogprovisionedproductdetails.html#cfn-sagemaker-project-servicecatalogprovisionedproductdetails-provisionedproductid
     */
    readonly provisionedProductId?: string;

    /**
     * The current status of the product.
     *
     * - `AVAILABLE` - Stable state, ready to perform any operation. The most recent operation succeeded and completed.
     * - `UNDER_CHANGE` - Transitive state. Operations performed might not have valid results. Wait for an AVAILABLE status before performing operations.
     * - `TAINTED` - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version.
     * - `ERROR` - An unexpected error occurred. The provisioned product exists but the stack is not running. For example, CloudFormation received a parameter value that was not valid and could not launch the stack.
     * - `PLAN_IN_PROGRESS` - Transitive state. The plan operations were performed to provision a new product, but resources have not yet been created. After reviewing the list of resources to be created, execute the plan. Wait for an AVAILABLE status before performing operations.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-project-servicecatalogprovisionedproductdetails.html#cfn-sagemaker-project-servicecatalogprovisionedproductdetails-provisionedproductstatusmessage
     */
    readonly provisionedProductStatusMessage?: string;
  }

  /**
   * Details that you specify to provision a service catalog product.
   *
   * For information about service catalog, see [What is AWS Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html) .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-project-servicecatalogprovisioningdetails.html
   */
  export interface ServiceCatalogProvisioningDetailsProperty {
    /**
     * The path identifier of the product.
     *
     * This value is optional if the product has a default path, and required if the product has more than one path.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-project-servicecatalogprovisioningdetails.html#cfn-sagemaker-project-servicecatalogprovisioningdetails-pathid
     */
    readonly pathId?: string;

    /**
     * The ID of the product to provision.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-project-servicecatalogprovisioningdetails.html#cfn-sagemaker-project-servicecatalogprovisioningdetails-productid
     */
    readonly productId: string;

    /**
     * The ID of the provisioning artifact.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-project-servicecatalogprovisioningdetails.html#cfn-sagemaker-project-servicecatalogprovisioningdetails-provisioningartifactid
     */
    readonly provisioningArtifactId?: string;

    /**
     * A list of key value pairs that you specify when you provision a product.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-project-servicecatalogprovisioningdetails.html#cfn-sagemaker-project-servicecatalogprovisioningdetails-provisioningparameters
     */
    readonly provisioningParameters?: Array<cdk.IResolvable | CfnProject.ProvisioningParameterProperty> | cdk.IResolvable;
  }

  /**
   * A key value pair used when you provision a project as a service catalog product.
   *
   * For information, see [What is AWS Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html) .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-project-provisioningparameter.html
   */
  export interface ProvisioningParameterProperty {
    /**
     * The key that identifies a provisioning parameter.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-project-provisioningparameter.html#cfn-sagemaker-project-provisioningparameter-key
     */
    readonly key: string;

    /**
     * The value of the provisioning parameter.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-project-provisioningparameter.html#cfn-sagemaker-project-provisioningparameter-value
     */
    readonly value: string;
  }
}

/**
 * Properties for defining a `CfnProject`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-project.html
 */
export interface CfnProjectProps {
  /**
   * The description of the project.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-project.html#cfn-sagemaker-project-projectdescription
   */
  readonly projectDescription?: string;

  /**
   * The name of the project.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-project.html#cfn-sagemaker-project-projectname
   */
  readonly projectName: string;

  /**
   * Details of a provisioned service catalog product.
   *
   * For information about service catalog, see [What is AWS Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-project.html#cfn-sagemaker-project-servicecatalogprovisionedproductdetails
   */
  readonly serviceCatalogProvisionedProductDetails?: cdk.IResolvable | CfnProject.ServiceCatalogProvisionedProductDetailsProperty;

  /**
   * The product ID and provisioning artifact ID to provision a service catalog.
   *
   * For information, see [What is AWS Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-project.html#cfn-sagemaker-project-servicecatalogprovisioningdetails
   */
  readonly serviceCatalogProvisioningDetails: any | cdk.IResolvable;

  /**
   * A list of key-value pairs to apply to this resource.
   *
   * For more information, see [Resource Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) and [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what) in the *AWS Billing and Cost Management User Guide* .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-project.html#cfn-sagemaker-project-tags
   */
  readonly tags?: Array<cdk.CfnTag>;
}

/**
 * Determine whether the given properties match those of a `ServiceCatalogProvisionedProductDetailsProperty`
 *
 * @param properties - the TypeScript properties of a `ServiceCatalogProvisionedProductDetailsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnProjectServiceCatalogProvisionedProductDetailsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("provisionedProductId", cdk.validateString)(properties.provisionedProductId));
  errors.collect(cdk.propertyValidator("provisionedProductStatusMessage", cdk.validateString)(properties.provisionedProductStatusMessage));
  return errors.wrap("supplied properties not correct for \"ServiceCatalogProvisionedProductDetailsProperty\"");
}

// @ts-ignore TS6133
function convertCfnProjectServiceCatalogProvisionedProductDetailsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnProjectServiceCatalogProvisionedProductDetailsPropertyValidator(properties).assertSuccess();
  return {
    "ProvisionedProductId": cdk.stringToCloudFormation(properties.provisionedProductId),
    "ProvisionedProductStatusMessage": cdk.stringToCloudFormation(properties.provisionedProductStatusMessage)
  };
}

// @ts-ignore TS6133
function CfnProjectServiceCatalogProvisionedProductDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnProject.ServiceCatalogProvisionedProductDetailsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.ServiceCatalogProvisionedProductDetailsProperty>();
  ret.addPropertyResult("provisionedProductId", "ProvisionedProductId", (properties.ProvisionedProductId != null ? cfn_parse.FromCloudFormation.getString(properties.ProvisionedProductId) : undefined));
  ret.addPropertyResult("provisionedProductStatusMessage", "ProvisionedProductStatusMessage", (properties.ProvisionedProductStatusMessage != null ? cfn_parse.FromCloudFormation.getString(properties.ProvisionedProductStatusMessage) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ProvisioningParameterProperty`
 *
 * @param properties - the TypeScript properties of a `ProvisioningParameterProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnProjectProvisioningParameterPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("key", cdk.requiredValidator)(properties.key));
  errors.collect(cdk.propertyValidator("key", cdk.validateString)(properties.key));
  errors.collect(cdk.propertyValidator("value", cdk.requiredValidator)(properties.value));
  errors.collect(cdk.propertyValidator("value", cdk.validateString)(properties.value));
  return errors.wrap("supplied properties not correct for \"ProvisioningParameterProperty\"");
}

// @ts-ignore TS6133
function convertCfnProjectProvisioningParameterPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnProjectProvisioningParameterPropertyValidator(properties).assertSuccess();
  return {
    "Key": cdk.stringToCloudFormation(properties.key),
    "Value": cdk.stringToCloudFormation(properties.value)
  };
}

// @ts-ignore TS6133
function CfnProjectProvisioningParameterPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnProject.ProvisioningParameterProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.ProvisioningParameterProperty>();
  ret.addPropertyResult("key", "Key", (properties.Key != null ? cfn_parse.FromCloudFormation.getString(properties.Key) : undefined));
  ret.addPropertyResult("value", "Value", (properties.Value != null ? cfn_parse.FromCloudFormation.getString(properties.Value) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ServiceCatalogProvisioningDetailsProperty`
 *
 * @param properties - the TypeScript properties of a `ServiceCatalogProvisioningDetailsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnProjectServiceCatalogProvisioningDetailsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("pathId", cdk.validateString)(properties.pathId));
  errors.collect(cdk.propertyValidator("productId", cdk.requiredValidator)(properties.productId));
  errors.collect(cdk.propertyValidator("productId", cdk.validateString)(properties.productId));
  errors.collect(cdk.propertyValidator("provisioningArtifactId", cdk.validateString)(properties.provisioningArtifactId));
  errors.collect(cdk.propertyValidator("provisioningParameters", cdk.listValidator(CfnProjectProvisioningParameterPropertyValidator))(properties.provisioningParameters));
  return errors.wrap("supplied properties not correct for \"ServiceCatalogProvisioningDetailsProperty\"");
}

// @ts-ignore TS6133
function convertCfnProjectServiceCatalogProvisioningDetailsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnProjectServiceCatalogProvisioningDetailsPropertyValidator(properties).assertSuccess();
  return {
    "PathId": cdk.stringToCloudFormation(properties.pathId),
    "ProductId": cdk.stringToCloudFormation(properties.productId),
    "ProvisioningArtifactId": cdk.stringToCloudFormation(properties.provisioningArtifactId),
    "ProvisioningParameters": cdk.listMapper(convertCfnProjectProvisioningParameterPropertyToCloudFormation)(properties.provisioningParameters)
  };
}

// @ts-ignore TS6133
function CfnProjectServiceCatalogProvisioningDetailsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnProject.ServiceCatalogProvisioningDetailsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProject.ServiceCatalogProvisioningDetailsProperty>();
  ret.addPropertyResult("pathId", "PathId", (properties.PathId != null ? cfn_parse.FromCloudFormation.getString(properties.PathId) : undefined));
  ret.addPropertyResult("productId", "ProductId", (properties.ProductId != null ? cfn_parse.FromCloudFormation.getString(properties.ProductId) : undefined));
  ret.addPropertyResult("provisioningArtifactId", "ProvisioningArtifactId", (properties.ProvisioningArtifactId != null ? cfn_parse.FromCloudFormation.getString(properties.ProvisioningArtifactId) : undefined));
  ret.addPropertyResult("provisioningParameters", "ProvisioningParameters", (properties.ProvisioningParameters != null ? cfn_parse.FromCloudFormation.getArray(CfnProjectProvisioningParameterPropertyFromCloudFormation)(properties.ProvisioningParameters) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnProjectProps`
 *
 * @param properties - the TypeScript properties of a `CfnProjectProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnProjectPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("projectDescription", cdk.validateString)(properties.projectDescription));
  errors.collect(cdk.propertyValidator("projectName", cdk.requiredValidator)(properties.projectName));
  errors.collect(cdk.propertyValidator("projectName", cdk.validateString)(properties.projectName));
  errors.collect(cdk.propertyValidator("serviceCatalogProvisionedProductDetails", CfnProjectServiceCatalogProvisionedProductDetailsPropertyValidator)(properties.serviceCatalogProvisionedProductDetails));
  errors.collect(cdk.propertyValidator("serviceCatalogProvisioningDetails", cdk.requiredValidator)(properties.serviceCatalogProvisioningDetails));
  errors.collect(cdk.propertyValidator("serviceCatalogProvisioningDetails", cdk.validateObject)(properties.serviceCatalogProvisioningDetails));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  return errors.wrap("supplied properties not correct for \"CfnProjectProps\"");
}

// @ts-ignore TS6133
function convertCfnProjectPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnProjectPropsValidator(properties).assertSuccess();
  return {
    "ProjectDescription": cdk.stringToCloudFormation(properties.projectDescription),
    "ProjectName": cdk.stringToCloudFormation(properties.projectName),
    "ServiceCatalogProvisionedProductDetails": convertCfnProjectServiceCatalogProvisionedProductDetailsPropertyToCloudFormation(properties.serviceCatalogProvisionedProductDetails),
    "ServiceCatalogProvisioningDetails": cdk.objectToCloudFormation(properties.serviceCatalogProvisioningDetails),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
  };
}

// @ts-ignore TS6133
function CfnProjectPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnProjectProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnProjectProps>();
  ret.addPropertyResult("projectDescription", "ProjectDescription", (properties.ProjectDescription != null ? cfn_parse.FromCloudFormation.getString(properties.ProjectDescription) : undefined));
  ret.addPropertyResult("projectName", "ProjectName", (properties.ProjectName != null ? cfn_parse.FromCloudFormation.getString(properties.ProjectName) : undefined));
  ret.addPropertyResult("serviceCatalogProvisionedProductDetails", "ServiceCatalogProvisionedProductDetails", (properties.ServiceCatalogProvisionedProductDetails != null ? CfnProjectServiceCatalogProvisionedProductDetailsPropertyFromCloudFormation(properties.ServiceCatalogProvisionedProductDetails) : undefined));
  ret.addPropertyResult("serviceCatalogProvisioningDetails", "ServiceCatalogProvisioningDetails", (properties.ServiceCatalogProvisioningDetails != null ? cfn_parse.FromCloudFormation.getAny(properties.ServiceCatalogProvisioningDetails) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Creates a space used for real time collaboration in a Domain.
 *
 * @cloudformationResource AWS::SageMaker::Space
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-space.html
 */
export class CfnSpace extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::Space";

  /**
   * Build a CfnSpace from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnSpace {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnSpacePropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnSpace(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The space's Amazon Resource Name (ARN).
   *
   * @cloudformationAttribute SpaceArn
   */
  public readonly attrSpaceArn: string;

  /**
   * The ID of the associated Domain.
   */
  public domainId: string;

  /**
   * The name of the space.
   */
  public spaceName: string;

  /**
   * A collection of space settings.
   */
  public spaceSettings?: cdk.IResolvable | CfnSpace.SpaceSettingsProperty;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * An array of key-value pairs to apply to this resource.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnSpaceProps) {
    super(scope, id, {
      "type": CfnSpace.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "domainId", this);
    cdk.requireProperty(props, "spaceName", this);

    this.attrSpaceArn = cdk.Token.asString(this.getAtt("SpaceArn", cdk.ResolutionTypeHint.STRING));
    this.domainId = props.domainId;
    this.spaceName = props.spaceName;
    this.spaceSettings = props.spaceSettings;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::Space", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "domainId": this.domainId,
      "spaceName": this.spaceName,
      "spaceSettings": this.spaceSettings,
      "tags": this.tags.renderTags()
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnSpace.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnSpacePropsToCloudFormation(props);
  }
}

export namespace CfnSpace {
  /**
   * A collection of space settings.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-spacesettings.html
   */
  export interface SpaceSettingsProperty {
    /**
     * The JupyterServer app settings.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-spacesettings.html#cfn-sagemaker-space-spacesettings-jupyterserverappsettings
     */
    readonly jupyterServerAppSettings?: cdk.IResolvable | CfnSpace.JupyterServerAppSettingsProperty;

    /**
     * The KernelGateway app settings.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-spacesettings.html#cfn-sagemaker-space-spacesettings-kernelgatewayappsettings
     */
    readonly kernelGatewayAppSettings?: cdk.IResolvable | CfnSpace.KernelGatewayAppSettingsProperty;
  }

  /**
   * The KernelGateway app settings.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-kernelgatewayappsettings.html
   */
  export interface KernelGatewayAppSettingsProperty {
    /**
     * A list of custom SageMaker images that are configured to run as a KernelGateway app.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-kernelgatewayappsettings.html#cfn-sagemaker-space-kernelgatewayappsettings-customimages
     */
    readonly customImages?: Array<CfnSpace.CustomImageProperty | cdk.IResolvable> | cdk.IResolvable;

    /**
     * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
     *
     * > The Amazon SageMaker Studio UI does not use the default instance type value set here. The default instance type set here is used when Apps are created using the AWS Command Line Interface or AWS CloudFormation and the instance type parameter value is not passed.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-kernelgatewayappsettings.html#cfn-sagemaker-space-kernelgatewayappsettings-defaultresourcespec
     */
    readonly defaultResourceSpec?: cdk.IResolvable | CfnSpace.ResourceSpecProperty;
  }

  /**
   * A custom SageMaker image.
   *
   * For more information, see [Bring your own SageMaker image](https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html) .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-customimage.html
   */
  export interface CustomImageProperty {
    /**
     * The name of the AppImageConfig.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-customimage.html#cfn-sagemaker-space-customimage-appimageconfigname
     */
    readonly appImageConfigName: string;

    /**
     * The name of the CustomImage.
     *
     * Must be unique to your account.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-customimage.html#cfn-sagemaker-space-customimage-imagename
     */
    readonly imageName: string;

    /**
     * The version number of the CustomImage.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-customimage.html#cfn-sagemaker-space-customimage-imageversionnumber
     */
    readonly imageVersionNumber?: number;
  }

  /**
   * Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-resourcespec.html
   */
  export interface ResourceSpecProperty {
    /**
     * The instance type that the image version runs on.
     *
     * > *JupyterServer apps* only support the `system` value.
     * >
     * > For *KernelGateway apps* , the `system` value is translated to `ml.t3.medium` . KernelGateway apps also support all other values for available instance types.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-resourcespec.html#cfn-sagemaker-space-resourcespec-instancetype
     */
    readonly instanceType?: string;

    /**
     * The ARN of the SageMaker image that the image version belongs to.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-resourcespec.html#cfn-sagemaker-space-resourcespec-sagemakerimagearn
     */
    readonly sageMakerImageArn?: string;

    /**
     * The ARN of the image version created on the instance.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-resourcespec.html#cfn-sagemaker-space-resourcespec-sagemakerimageversionarn
     */
    readonly sageMakerImageVersionArn?: string;
  }

  /**
   * The JupyterServer app settings.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-jupyterserverappsettings.html
   */
  export interface JupyterServerAppSettingsProperty {
    /**
     * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterServer app.
     *
     * If you use the `LifecycleConfigArns` parameter, then this parameter is also required.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-jupyterserverappsettings.html#cfn-sagemaker-space-jupyterserverappsettings-defaultresourcespec
     */
    readonly defaultResourceSpec?: cdk.IResolvable | CfnSpace.ResourceSpecProperty;
  }
}

/**
 * Properties for defining a `CfnSpace`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-space.html
 */
export interface CfnSpaceProps {
  /**
   * The ID of the associated Domain.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-space.html#cfn-sagemaker-space-domainid
   */
  readonly domainId: string;

  /**
   * The name of the space.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-space.html#cfn-sagemaker-space-spacename
   */
  readonly spaceName: string;

  /**
   * A collection of space settings.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-space.html#cfn-sagemaker-space-spacesettings
   */
  readonly spaceSettings?: cdk.IResolvable | CfnSpace.SpaceSettingsProperty;

  /**
   * An array of key-value pairs to apply to this resource.
   *
   * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-space.html#cfn-sagemaker-space-tags
   */
  readonly tags?: Array<cdk.CfnTag>;
}

/**
 * Determine whether the given properties match those of a `CustomImageProperty`
 *
 * @param properties - the TypeScript properties of a `CustomImageProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnSpaceCustomImagePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("appImageConfigName", cdk.requiredValidator)(properties.appImageConfigName));
  errors.collect(cdk.propertyValidator("appImageConfigName", cdk.validateString)(properties.appImageConfigName));
  errors.collect(cdk.propertyValidator("imageName", cdk.requiredValidator)(properties.imageName));
  errors.collect(cdk.propertyValidator("imageName", cdk.validateString)(properties.imageName));
  errors.collect(cdk.propertyValidator("imageVersionNumber", cdk.validateNumber)(properties.imageVersionNumber));
  return errors.wrap("supplied properties not correct for \"CustomImageProperty\"");
}

// @ts-ignore TS6133
function convertCfnSpaceCustomImagePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnSpaceCustomImagePropertyValidator(properties).assertSuccess();
  return {
    "AppImageConfigName": cdk.stringToCloudFormation(properties.appImageConfigName),
    "ImageName": cdk.stringToCloudFormation(properties.imageName),
    "ImageVersionNumber": cdk.numberToCloudFormation(properties.imageVersionNumber)
  };
}

// @ts-ignore TS6133
function CfnSpaceCustomImagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpace.CustomImageProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpace.CustomImageProperty>();
  ret.addPropertyResult("appImageConfigName", "AppImageConfigName", (properties.AppImageConfigName != null ? cfn_parse.FromCloudFormation.getString(properties.AppImageConfigName) : undefined));
  ret.addPropertyResult("imageName", "ImageName", (properties.ImageName != null ? cfn_parse.FromCloudFormation.getString(properties.ImageName) : undefined));
  ret.addPropertyResult("imageVersionNumber", "ImageVersionNumber", (properties.ImageVersionNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.ImageVersionNumber) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ResourceSpecProperty`
 *
 * @param properties - the TypeScript properties of a `ResourceSpecProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnSpaceResourceSpecPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
  errors.collect(cdk.propertyValidator("sageMakerImageArn", cdk.validateString)(properties.sageMakerImageArn));
  errors.collect(cdk.propertyValidator("sageMakerImageVersionArn", cdk.validateString)(properties.sageMakerImageVersionArn));
  return errors.wrap("supplied properties not correct for \"ResourceSpecProperty\"");
}

// @ts-ignore TS6133
function convertCfnSpaceResourceSpecPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnSpaceResourceSpecPropertyValidator(properties).assertSuccess();
  return {
    "InstanceType": cdk.stringToCloudFormation(properties.instanceType),
    "SageMakerImageArn": cdk.stringToCloudFormation(properties.sageMakerImageArn),
    "SageMakerImageVersionArn": cdk.stringToCloudFormation(properties.sageMakerImageVersionArn)
  };
}

// @ts-ignore TS6133
function CfnSpaceResourceSpecPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnSpace.ResourceSpecProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpace.ResourceSpecProperty>();
  ret.addPropertyResult("instanceType", "InstanceType", (properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined));
  ret.addPropertyResult("sageMakerImageArn", "SageMakerImageArn", (properties.SageMakerImageArn != null ? cfn_parse.FromCloudFormation.getString(properties.SageMakerImageArn) : undefined));
  ret.addPropertyResult("sageMakerImageVersionArn", "SageMakerImageVersionArn", (properties.SageMakerImageVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.SageMakerImageVersionArn) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `KernelGatewayAppSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `KernelGatewayAppSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnSpaceKernelGatewayAppSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("customImages", cdk.listValidator(CfnSpaceCustomImagePropertyValidator))(properties.customImages));
  errors.collect(cdk.propertyValidator("defaultResourceSpec", CfnSpaceResourceSpecPropertyValidator)(properties.defaultResourceSpec));
  return errors.wrap("supplied properties not correct for \"KernelGatewayAppSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnSpaceKernelGatewayAppSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnSpaceKernelGatewayAppSettingsPropertyValidator(properties).assertSuccess();
  return {
    "CustomImages": cdk.listMapper(convertCfnSpaceCustomImagePropertyToCloudFormation)(properties.customImages),
    "DefaultResourceSpec": convertCfnSpaceResourceSpecPropertyToCloudFormation(properties.defaultResourceSpec)
  };
}

// @ts-ignore TS6133
function CfnSpaceKernelGatewayAppSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnSpace.KernelGatewayAppSettingsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpace.KernelGatewayAppSettingsProperty>();
  ret.addPropertyResult("customImages", "CustomImages", (properties.CustomImages != null ? cfn_parse.FromCloudFormation.getArray(CfnSpaceCustomImagePropertyFromCloudFormation)(properties.CustomImages) : undefined));
  ret.addPropertyResult("defaultResourceSpec", "DefaultResourceSpec", (properties.DefaultResourceSpec != null ? CfnSpaceResourceSpecPropertyFromCloudFormation(properties.DefaultResourceSpec) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `JupyterServerAppSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `JupyterServerAppSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnSpaceJupyterServerAppSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("defaultResourceSpec", CfnSpaceResourceSpecPropertyValidator)(properties.defaultResourceSpec));
  return errors.wrap("supplied properties not correct for \"JupyterServerAppSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnSpaceJupyterServerAppSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnSpaceJupyterServerAppSettingsPropertyValidator(properties).assertSuccess();
  return {
    "DefaultResourceSpec": convertCfnSpaceResourceSpecPropertyToCloudFormation(properties.defaultResourceSpec)
  };
}

// @ts-ignore TS6133
function CfnSpaceJupyterServerAppSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnSpace.JupyterServerAppSettingsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpace.JupyterServerAppSettingsProperty>();
  ret.addPropertyResult("defaultResourceSpec", "DefaultResourceSpec", (properties.DefaultResourceSpec != null ? CfnSpaceResourceSpecPropertyFromCloudFormation(properties.DefaultResourceSpec) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `SpaceSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `SpaceSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnSpaceSpaceSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("jupyterServerAppSettings", CfnSpaceJupyterServerAppSettingsPropertyValidator)(properties.jupyterServerAppSettings));
  errors.collect(cdk.propertyValidator("kernelGatewayAppSettings", CfnSpaceKernelGatewayAppSettingsPropertyValidator)(properties.kernelGatewayAppSettings));
  return errors.wrap("supplied properties not correct for \"SpaceSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnSpaceSpaceSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnSpaceSpaceSettingsPropertyValidator(properties).assertSuccess();
  return {
    "JupyterServerAppSettings": convertCfnSpaceJupyterServerAppSettingsPropertyToCloudFormation(properties.jupyterServerAppSettings),
    "KernelGatewayAppSettings": convertCfnSpaceKernelGatewayAppSettingsPropertyToCloudFormation(properties.kernelGatewayAppSettings)
  };
}

// @ts-ignore TS6133
function CfnSpaceSpaceSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnSpace.SpaceSettingsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpace.SpaceSettingsProperty>();
  ret.addPropertyResult("jupyterServerAppSettings", "JupyterServerAppSettings", (properties.JupyterServerAppSettings != null ? CfnSpaceJupyterServerAppSettingsPropertyFromCloudFormation(properties.JupyterServerAppSettings) : undefined));
  ret.addPropertyResult("kernelGatewayAppSettings", "KernelGatewayAppSettings", (properties.KernelGatewayAppSettings != null ? CfnSpaceKernelGatewayAppSettingsPropertyFromCloudFormation(properties.KernelGatewayAppSettings) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnSpaceProps`
 *
 * @param properties - the TypeScript properties of a `CfnSpaceProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnSpacePropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("domainId", cdk.requiredValidator)(properties.domainId));
  errors.collect(cdk.propertyValidator("domainId", cdk.validateString)(properties.domainId));
  errors.collect(cdk.propertyValidator("spaceName", cdk.requiredValidator)(properties.spaceName));
  errors.collect(cdk.propertyValidator("spaceName", cdk.validateString)(properties.spaceName));
  errors.collect(cdk.propertyValidator("spaceSettings", CfnSpaceSpaceSettingsPropertyValidator)(properties.spaceSettings));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  return errors.wrap("supplied properties not correct for \"CfnSpaceProps\"");
}

// @ts-ignore TS6133
function convertCfnSpacePropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnSpacePropsValidator(properties).assertSuccess();
  return {
    "DomainId": cdk.stringToCloudFormation(properties.domainId),
    "SpaceName": cdk.stringToCloudFormation(properties.spaceName),
    "SpaceSettings": convertCfnSpaceSpaceSettingsPropertyToCloudFormation(properties.spaceSettings),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)
  };
}

// @ts-ignore TS6133
function CfnSpacePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnSpaceProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnSpaceProps>();
  ret.addPropertyResult("domainId", "DomainId", (properties.DomainId != null ? cfn_parse.FromCloudFormation.getString(properties.DomainId) : undefined));
  ret.addPropertyResult("spaceName", "SpaceName", (properties.SpaceName != null ? cfn_parse.FromCloudFormation.getString(properties.SpaceName) : undefined));
  ret.addPropertyResult("spaceSettings", "SpaceSettings", (properties.SpaceSettings != null ? CfnSpaceSpaceSettingsPropertyFromCloudFormation(properties.SpaceSettings) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Creates a user profile.
 *
 * A user profile represents a single user within a domain, and is the main way to reference a "person" for the purposes of sharing, reporting, and other user-oriented features. This entity is created when a user onboards to Amazon SageMaker Studio. If an administrator invites a person by email or imports them from IAM Identity Center , a user profile is automatically created. A user profile is the primary holder of settings for an individual user and has a reference to the user's private Amazon Elastic File System (EFS) home directory.
 *
 * > If you're using IAM Identity Center authentication, a user in IAM Identity Center , or a group in IAM Identity Center containing that user, must be assigned to the Amazon SageMaker Studio application from the IAM Identity Center Console to create a user profile. For more information about application assignment, see [Assign user access](https://docs.aws.amazon.com/singlesignon/latest/userguide/assignuserstoapp.html) . After assignment is complete, a user profile can be created for that user in IAM Identity Center with AWS CloudFormation.
 *
 * @cloudformationResource AWS::SageMaker::UserProfile
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-userprofile.html
 */
export class CfnUserProfile extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::UserProfile";

  /**
   * Build a CfnUserProfile from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnUserProfile {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnUserProfilePropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnUserProfile(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The Amazon Resource Name (ARN) of the user profile, such as `arn:aws:sagemaker:us-west-2:account-id:user-profile/my-user-profile` .
   *
   * @cloudformationAttribute UserProfileArn
   */
  public readonly attrUserProfileArn: string;

  /**
   * The domain ID.
   */
  public domainId: string;

  /**
   * A specifier for the type of value specified in SingleSignOnUserValue.
   */
  public singleSignOnUserIdentifier?: string;

  /**
   * The username of the associated AWS Single Sign-On User for this UserProfile.
   */
  public singleSignOnUserValue?: string;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * An array of key-value pairs to apply to this resource.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  /**
   * The user profile name.
   */
  public userProfileName: string;

  /**
   * A collection of settings that apply to users of Amazon SageMaker Studio.
   */
  public userSettings?: cdk.IResolvable | CfnUserProfile.UserSettingsProperty;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnUserProfileProps) {
    super(scope, id, {
      "type": CfnUserProfile.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "domainId", this);
    cdk.requireProperty(props, "userProfileName", this);

    this.attrUserProfileArn = cdk.Token.asString(this.getAtt("UserProfileArn", cdk.ResolutionTypeHint.STRING));
    this.domainId = props.domainId;
    this.singleSignOnUserIdentifier = props.singleSignOnUserIdentifier;
    this.singleSignOnUserValue = props.singleSignOnUserValue;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::UserProfile", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
    this.userProfileName = props.userProfileName;
    this.userSettings = props.userSettings;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "domainId": this.domainId,
      "singleSignOnUserIdentifier": this.singleSignOnUserIdentifier,
      "singleSignOnUserValue": this.singleSignOnUserValue,
      "tags": this.tags.renderTags(),
      "userProfileName": this.userProfileName,
      "userSettings": this.userSettings
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnUserProfile.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnUserProfilePropsToCloudFormation(props);
  }
}

export namespace CfnUserProfile {
  /**
   * A collection of settings that apply to users of Amazon SageMaker Studio.
   *
   * These settings are specified when the [CreateUserProfile](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateUserProfile.html) API is called, and as `DefaultUserSettings` when the [CreateDomain](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateDomain.html) API is called.
   *
   * `SecurityGroups` is aggregated when specified in both calls. For all other settings in `UserSettings` , the values specified in `CreateUserProfile` take precedence over those specified in `CreateDomain` .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-usersettings.html
   */
  export interface UserSettingsProperty {
    /**
     * The Code Editor application settings.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-usersettings.html#cfn-sagemaker-userprofile-usersettings-codeeditorappsettings
     */
    readonly codeEditorAppSettings?: CfnUserProfile.CodeEditorAppSettingsProperty | cdk.IResolvable;

    /**
     * The settings for assigning a custom file system to a user profile.
     *
     * Permitted users can access this file system in Amazon SageMaker Studio.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-usersettings.html#cfn-sagemaker-userprofile-usersettings-customfilesystemconfigs
     */
    readonly customFileSystemConfigs?: Array<CfnUserProfile.CustomFileSystemConfigProperty | cdk.IResolvable> | cdk.IResolvable;

    /**
     * Details about the POSIX identity that is used for file system operations.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-usersettings.html#cfn-sagemaker-userprofile-usersettings-customposixuserconfig
     */
    readonly customPosixUserConfig?: CfnUserProfile.CustomPosixUserConfigProperty | cdk.IResolvable;

    /**
     * The default experience that the user is directed to when accessing the domain. The supported values are:.
     *
     * - `studio::` : Indicates that Studio is the default experience. This value can only be passed if `StudioWebPortal` is set to `ENABLED` .
     * - `app:JupyterServer:` : Indicates that Studio Classic is the default experience.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-usersettings.html#cfn-sagemaker-userprofile-usersettings-defaultlandinguri
     */
    readonly defaultLandingUri?: string;

    /**
     * The execution role for the user.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-usersettings.html#cfn-sagemaker-userprofile-usersettings-executionrole
     */
    readonly executionRole?: string;

    /**
     * The settings for the JupyterLab application.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-usersettings.html#cfn-sagemaker-userprofile-usersettings-jupyterlabappsettings
     */
    readonly jupyterLabAppSettings?: cdk.IResolvable | CfnUserProfile.JupyterLabAppSettingsProperty;

    /**
     * The Jupyter server's app settings.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-usersettings.html#cfn-sagemaker-userprofile-usersettings-jupyterserverappsettings
     */
    readonly jupyterServerAppSettings?: cdk.IResolvable | CfnUserProfile.JupyterServerAppSettingsProperty;

    /**
     * The kernel gateway app settings.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-usersettings.html#cfn-sagemaker-userprofile-usersettings-kernelgatewayappsettings
     */
    readonly kernelGatewayAppSettings?: cdk.IResolvable | CfnUserProfile.KernelGatewayAppSettingsProperty;

    /**
     * A collection of settings that configure user interaction with the `RStudioServerPro` app.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-usersettings.html#cfn-sagemaker-userprofile-usersettings-rstudioserverproappsettings
     */
    readonly rStudioServerProAppSettings?: cdk.IResolvable | CfnUserProfile.RStudioServerProAppSettingsProperty;

    /**
     * The security groups for the Amazon Virtual Private Cloud (VPC) that the domain uses for communication.
     *
     * Optional when the `CreateDomain.AppNetworkAccessType` parameter is set to `PublicInternetOnly` .
     *
     * Required when the `CreateDomain.AppNetworkAccessType` parameter is set to `VpcOnly` , unless specified as part of the `DefaultUserSettings` for the domain.
     *
     * Amazon SageMaker adds a security group to allow NFS traffic from Amazon SageMaker Studio. Therefore, the number of security groups that you can specify is one less than the maximum number shown.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-usersettings.html#cfn-sagemaker-userprofile-usersettings-securitygroups
     */
    readonly securityGroups?: Array<string>;

    /**
     * Specifies options for sharing Amazon SageMaker Studio notebooks.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-usersettings.html#cfn-sagemaker-userprofile-usersettings-sharingsettings
     */
    readonly sharingSettings?: cdk.IResolvable | CfnUserProfile.SharingSettingsProperty;

    /**
     * The storage settings for a private space.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-usersettings.html#cfn-sagemaker-userprofile-usersettings-spacestoragesettings
     */
    readonly spaceStorageSettings?: CfnUserProfile.DefaultSpaceStorageSettingsProperty | cdk.IResolvable;

    /**
     * Whether the user can access Studio.
     *
     * If this value is set to `DISABLED` , the user cannot access Studio, even if that is the default experience for the domain.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-usersettings.html#cfn-sagemaker-userprofile-usersettings-studiowebportal
     */
    readonly studioWebPortal?: string;
  }

  /**
   * The KernelGateway app settings.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-kernelgatewayappsettings.html
   */
  export interface KernelGatewayAppSettingsProperty {
    /**
     * A list of custom SageMaker images that are configured to run as a KernelGateway app.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-kernelgatewayappsettings.html#cfn-sagemaker-userprofile-kernelgatewayappsettings-customimages
     */
    readonly customImages?: Array<CfnUserProfile.CustomImageProperty | cdk.IResolvable> | cdk.IResolvable;

    /**
     * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app.
     *
     * > The Amazon SageMaker Studio UI does not use the default instance type value set here. The default instance type set here is used when Apps are created using the AWS Command Line Interface or AWS CloudFormation and the instance type parameter value is not passed.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-kernelgatewayappsettings.html#cfn-sagemaker-userprofile-kernelgatewayappsettings-defaultresourcespec
     */
    readonly defaultResourceSpec?: cdk.IResolvable | CfnUserProfile.ResourceSpecProperty;
  }

  /**
   * A custom SageMaker image.
   *
   * For more information, see [Bring your own SageMaker image](https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html) .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-customimage.html
   */
  export interface CustomImageProperty {
    /**
     * The name of the AppImageConfig.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-customimage.html#cfn-sagemaker-userprofile-customimage-appimageconfigname
     */
    readonly appImageConfigName: string;

    /**
     * The name of the CustomImage.
     *
     * Must be unique to your account.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-customimage.html#cfn-sagemaker-userprofile-customimage-imagename
     */
    readonly imageName: string;

    /**
     * The version number of the CustomImage.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-customimage.html#cfn-sagemaker-userprofile-customimage-imageversionnumber
     */
    readonly imageVersionNumber?: number;
  }

  /**
   * Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-resourcespec.html
   */
  export interface ResourceSpecProperty {
    /**
     * The instance type that the image version runs on.
     *
     * > *JupyterServer apps* only support the `system` value.
     * >
     * > For *KernelGateway apps* , the `system` value is translated to `ml.t3.medium` . KernelGateway apps also support all other values for available instance types.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-resourcespec.html#cfn-sagemaker-userprofile-resourcespec-instancetype
     */
    readonly instanceType?: string;

    /**
     * The ARN of the SageMaker image that the image version belongs to.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-resourcespec.html#cfn-sagemaker-userprofile-resourcespec-sagemakerimagearn
     */
    readonly sageMakerImageArn?: string;

    /**
     * The ARN of the image version created on the instance.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-resourcespec.html#cfn-sagemaker-userprofile-resourcespec-sagemakerimageversionarn
     */
    readonly sageMakerImageVersionArn?: string;
  }

  /**
   * A collection of settings that configure user interaction with the `RStudioServerPro` app.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-rstudioserverproappsettings.html
   */
  export interface RStudioServerProAppSettingsProperty {
    /**
     * Indicates whether the current user has access to the `RStudioServerPro` app.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-rstudioserverproappsettings.html#cfn-sagemaker-userprofile-rstudioserverproappsettings-accessstatus
     */
    readonly accessStatus?: string;

    /**
     * The level of permissions that the user has within the `RStudioServerPro` app.
     *
     * This value defaults to `User`. The `Admin` value allows the user access to the RStudio Administrative Dashboard.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-rstudioserverproappsettings.html#cfn-sagemaker-userprofile-rstudioserverproappsettings-usergroup
     */
    readonly userGroup?: string;
  }

  /**
   * The JupyterServer app settings.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-jupyterserverappsettings.html
   */
  export interface JupyterServerAppSettingsProperty {
    /**
     * The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterServer app.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-jupyterserverappsettings.html#cfn-sagemaker-userprofile-jupyterserverappsettings-defaultresourcespec
     */
    readonly defaultResourceSpec?: cdk.IResolvable | CfnUserProfile.ResourceSpecProperty;
  }

  /**
   * Specifies options when sharing an Amazon SageMaker Studio notebook.
   *
   * These settings are specified as part of `DefaultUserSettings` when the [CreateDomain](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateDomain.html) API is called, and as part of `UserSettings` when the [CreateUserProfile](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateUserProfile.html) API is called.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-sharingsettings.html
   */
  export interface SharingSettingsProperty {
    /**
     * Whether to include the notebook cell output when sharing the notebook.
     *
     * The default is `Disabled` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-sharingsettings.html#cfn-sagemaker-userprofile-sharingsettings-notebookoutputoption
     */
    readonly notebookOutputOption?: string;

    /**
     * When `NotebookOutputOption` is `Allowed` , the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-sharingsettings.html#cfn-sagemaker-userprofile-sharingsettings-s3kmskeyid
     */
    readonly s3KmsKeyId?: string;

    /**
     * When `NotebookOutputOption` is `Allowed` , the Amazon S3 bucket used to store the shared notebook snapshots.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-sharingsettings.html#cfn-sagemaker-userprofile-sharingsettings-s3outputpath
     */
    readonly s3OutputPath?: string;
  }

  /**
   * The settings for the JupyterLab application.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-jupyterlabappsettings.html
   */
  export interface JupyterLabAppSettingsProperty {
    /**
     * A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterLab application.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-jupyterlabappsettings.html#cfn-sagemaker-userprofile-jupyterlabappsettings-coderepositories
     */
    readonly codeRepositories?: Array<CfnUserProfile.CodeRepositoryProperty | cdk.IResolvable> | cdk.IResolvable;

    /**
     * A list of custom SageMaker images that are configured to run as a JupyterLab app.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-jupyterlabappsettings.html#cfn-sagemaker-userprofile-jupyterlabappsettings-customimages
     */
    readonly customImages?: Array<CfnUserProfile.CustomImageProperty | cdk.IResolvable> | cdk.IResolvable;

    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-jupyterlabappsettings.html#cfn-sagemaker-userprofile-jupyterlabappsettings-defaultresourcespec
     */
    readonly defaultResourceSpec?: cdk.IResolvable | CfnUserProfile.ResourceSpecProperty;

    /**
     * The Amazon Resource Name (ARN) of the lifecycle configurations attached to the user profile or domain.
     *
     * To remove a lifecycle config, you must set `LifecycleConfigArns` to an empty list.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-jupyterlabappsettings.html#cfn-sagemaker-userprofile-jupyterlabappsettings-lifecycleconfigarns
     */
    readonly lifecycleConfigArns?: Array<string>;
  }

  /**
   * A Git repository that SageMaker automatically displays to users for cloning in the JupyterServer application.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-coderepository.html
   */
  export interface CodeRepositoryProperty {
    /**
     * The URL of the Git repository.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-coderepository.html#cfn-sagemaker-userprofile-coderepository-repositoryurl
     */
    readonly repositoryUrl: string;
  }

  /**
   * The default storage settings for a private space.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-defaultspacestoragesettings.html
   */
  export interface DefaultSpaceStorageSettingsProperty {
    /**
     * The default EBS storage settings for a private space.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-defaultspacestoragesettings.html#cfn-sagemaker-userprofile-defaultspacestoragesettings-defaultebsstoragesettings
     */
    readonly defaultEbsStorageSettings?: CfnUserProfile.DefaultEbsStorageSettingsProperty | cdk.IResolvable;
  }

  /**
   * A collection of default EBS storage settings that applies to private spaces created within a domain or user profile.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-defaultebsstoragesettings.html
   */
  export interface DefaultEbsStorageSettingsProperty {
    /**
     * The default size of the EBS storage volume for a private space.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-defaultebsstoragesettings.html#cfn-sagemaker-userprofile-defaultebsstoragesettings-defaultebsvolumesizeingb
     */
    readonly defaultEbsVolumeSizeInGb: number;

    /**
     * The maximum size of the EBS storage volume for a private space.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-defaultebsstoragesettings.html#cfn-sagemaker-userprofile-defaultebsstoragesettings-maximumebsvolumesizeingb
     */
    readonly maximumEbsVolumeSizeInGb: number;
  }

  /**
   * The Code Editor application settings.
   *
   * For more information about Code Editor, see [Get started with Code Editor in Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/code-editor.html) .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-codeeditorappsettings.html
   */
  export interface CodeEditorAppSettingsProperty {
    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-codeeditorappsettings.html#cfn-sagemaker-userprofile-codeeditorappsettings-defaultresourcespec
     */
    readonly defaultResourceSpec?: cdk.IResolvable | CfnUserProfile.ResourceSpecProperty;

    /**
     * The Amazon Resource Name (ARN) of the Code Editor application lifecycle configuration.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-codeeditorappsettings.html#cfn-sagemaker-userprofile-codeeditorappsettings-lifecycleconfigarns
     */
    readonly lifecycleConfigArns?: Array<string>;
  }

  /**
   * Details about the POSIX identity that is used for file system operations.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-customposixuserconfig.html
   */
  export interface CustomPosixUserConfigProperty {
    /**
     * The POSIX group ID.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-customposixuserconfig.html#cfn-sagemaker-userprofile-customposixuserconfig-gid
     */
    readonly gid: number;

    /**
     * The POSIX user ID.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-customposixuserconfig.html#cfn-sagemaker-userprofile-customposixuserconfig-uid
     */
    readonly uid: number;
  }

  /**
   * The settings for assigning a custom file system to a user profile or space for an Amazon SageMaker Domain.
   *
   * Permitted users can access this file system in Amazon SageMaker Studio.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-customfilesystemconfig.html
   */
  export interface CustomFileSystemConfigProperty {
    /**
     * The settings for a custom Amazon EFS file system.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-customfilesystemconfig.html#cfn-sagemaker-userprofile-customfilesystemconfig-efsfilesystemconfig
     */
    readonly efsFileSystemConfig?: CfnUserProfile.EFSFileSystemConfigProperty | cdk.IResolvable;
  }

  /**
   * The settings for assigning a custom Amazon EFS file system to a user profile or space for an Amazon SageMaker Domain.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-efsfilesystemconfig.html
   */
  export interface EFSFileSystemConfigProperty {
    /**
     * The ID of your Amazon EFS file system.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-efsfilesystemconfig.html#cfn-sagemaker-userprofile-efsfilesystemconfig-filesystemid
     */
    readonly fileSystemId: string;

    /**
     * The path to the file system directory that is accessible in Amazon SageMaker Studio.
     *
     * Permitted users can access only this directory and below.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-efsfilesystemconfig.html#cfn-sagemaker-userprofile-efsfilesystemconfig-filesystempath
     */
    readonly fileSystemPath?: string;
  }
}

/**
 * Properties for defining a `CfnUserProfile`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-userprofile.html
 */
export interface CfnUserProfileProps {
  /**
   * The domain ID.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-userprofile.html#cfn-sagemaker-userprofile-domainid
   */
  readonly domainId: string;

  /**
   * A specifier for the type of value specified in SingleSignOnUserValue.
   *
   * Currently, the only supported value is "UserName". If the Domain's AuthMode is IAM Identity Center , this field is required. If the Domain's AuthMode is not IAM Identity Center , this field cannot be specified.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-userprofile.html#cfn-sagemaker-userprofile-singlesignonuseridentifier
   */
  readonly singleSignOnUserIdentifier?: string;

  /**
   * The username of the associated AWS Single Sign-On User for this UserProfile.
   *
   * If the Domain's AuthMode is IAM Identity Center , this field is required, and must match a valid username of a user in your directory. If the Domain's AuthMode is not IAM Identity Center , this field cannot be specified.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-userprofile.html#cfn-sagemaker-userprofile-singlesignonuservalue
   */
  readonly singleSignOnUserValue?: string;

  /**
   * An array of key-value pairs to apply to this resource.
   *
   * Tags that you specify for the User Profile are also added to all apps that the User Profile launches.
   *
   * For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-userprofile.html#cfn-sagemaker-userprofile-tags
   */
  readonly tags?: Array<cdk.CfnTag>;

  /**
   * The user profile name.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-userprofile.html#cfn-sagemaker-userprofile-userprofilename
   */
  readonly userProfileName: string;

  /**
   * A collection of settings that apply to users of Amazon SageMaker Studio.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-userprofile.html#cfn-sagemaker-userprofile-usersettings
   */
  readonly userSettings?: cdk.IResolvable | CfnUserProfile.UserSettingsProperty;
}

/**
 * Determine whether the given properties match those of a `CustomImageProperty`
 *
 * @param properties - the TypeScript properties of a `CustomImageProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnUserProfileCustomImagePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("appImageConfigName", cdk.requiredValidator)(properties.appImageConfigName));
  errors.collect(cdk.propertyValidator("appImageConfigName", cdk.validateString)(properties.appImageConfigName));
  errors.collect(cdk.propertyValidator("imageName", cdk.requiredValidator)(properties.imageName));
  errors.collect(cdk.propertyValidator("imageName", cdk.validateString)(properties.imageName));
  errors.collect(cdk.propertyValidator("imageVersionNumber", cdk.validateNumber)(properties.imageVersionNumber));
  return errors.wrap("supplied properties not correct for \"CustomImageProperty\"");
}

// @ts-ignore TS6133
function convertCfnUserProfileCustomImagePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnUserProfileCustomImagePropertyValidator(properties).assertSuccess();
  return {
    "AppImageConfigName": cdk.stringToCloudFormation(properties.appImageConfigName),
    "ImageName": cdk.stringToCloudFormation(properties.imageName),
    "ImageVersionNumber": cdk.numberToCloudFormation(properties.imageVersionNumber)
  };
}

// @ts-ignore TS6133
function CfnUserProfileCustomImagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProfile.CustomImageProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.CustomImageProperty>();
  ret.addPropertyResult("appImageConfigName", "AppImageConfigName", (properties.AppImageConfigName != null ? cfn_parse.FromCloudFormation.getString(properties.AppImageConfigName) : undefined));
  ret.addPropertyResult("imageName", "ImageName", (properties.ImageName != null ? cfn_parse.FromCloudFormation.getString(properties.ImageName) : undefined));
  ret.addPropertyResult("imageVersionNumber", "ImageVersionNumber", (properties.ImageVersionNumber != null ? cfn_parse.FromCloudFormation.getNumber(properties.ImageVersionNumber) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `ResourceSpecProperty`
 *
 * @param properties - the TypeScript properties of a `ResourceSpecProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnUserProfileResourceSpecPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("instanceType", cdk.validateString)(properties.instanceType));
  errors.collect(cdk.propertyValidator("sageMakerImageArn", cdk.validateString)(properties.sageMakerImageArn));
  errors.collect(cdk.propertyValidator("sageMakerImageVersionArn", cdk.validateString)(properties.sageMakerImageVersionArn));
  return errors.wrap("supplied properties not correct for \"ResourceSpecProperty\"");
}

// @ts-ignore TS6133
function convertCfnUserProfileResourceSpecPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnUserProfileResourceSpecPropertyValidator(properties).assertSuccess();
  return {
    "InstanceType": cdk.stringToCloudFormation(properties.instanceType),
    "SageMakerImageArn": cdk.stringToCloudFormation(properties.sageMakerImageArn),
    "SageMakerImageVersionArn": cdk.stringToCloudFormation(properties.sageMakerImageVersionArn)
  };
}

// @ts-ignore TS6133
function CfnUserProfileResourceSpecPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnUserProfile.ResourceSpecProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.ResourceSpecProperty>();
  ret.addPropertyResult("instanceType", "InstanceType", (properties.InstanceType != null ? cfn_parse.FromCloudFormation.getString(properties.InstanceType) : undefined));
  ret.addPropertyResult("sageMakerImageArn", "SageMakerImageArn", (properties.SageMakerImageArn != null ? cfn_parse.FromCloudFormation.getString(properties.SageMakerImageArn) : undefined));
  ret.addPropertyResult("sageMakerImageVersionArn", "SageMakerImageVersionArn", (properties.SageMakerImageVersionArn != null ? cfn_parse.FromCloudFormation.getString(properties.SageMakerImageVersionArn) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `KernelGatewayAppSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `KernelGatewayAppSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnUserProfileKernelGatewayAppSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("customImages", cdk.listValidator(CfnUserProfileCustomImagePropertyValidator))(properties.customImages));
  errors.collect(cdk.propertyValidator("defaultResourceSpec", CfnUserProfileResourceSpecPropertyValidator)(properties.defaultResourceSpec));
  return errors.wrap("supplied properties not correct for \"KernelGatewayAppSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnUserProfileKernelGatewayAppSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnUserProfileKernelGatewayAppSettingsPropertyValidator(properties).assertSuccess();
  return {
    "CustomImages": cdk.listMapper(convertCfnUserProfileCustomImagePropertyToCloudFormation)(properties.customImages),
    "DefaultResourceSpec": convertCfnUserProfileResourceSpecPropertyToCloudFormation(properties.defaultResourceSpec)
  };
}

// @ts-ignore TS6133
function CfnUserProfileKernelGatewayAppSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnUserProfile.KernelGatewayAppSettingsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.KernelGatewayAppSettingsProperty>();
  ret.addPropertyResult("customImages", "CustomImages", (properties.CustomImages != null ? cfn_parse.FromCloudFormation.getArray(CfnUserProfileCustomImagePropertyFromCloudFormation)(properties.CustomImages) : undefined));
  ret.addPropertyResult("defaultResourceSpec", "DefaultResourceSpec", (properties.DefaultResourceSpec != null ? CfnUserProfileResourceSpecPropertyFromCloudFormation(properties.DefaultResourceSpec) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `RStudioServerProAppSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `RStudioServerProAppSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnUserProfileRStudioServerProAppSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("accessStatus", cdk.validateString)(properties.accessStatus));
  errors.collect(cdk.propertyValidator("userGroup", cdk.validateString)(properties.userGroup));
  return errors.wrap("supplied properties not correct for \"RStudioServerProAppSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnUserProfileRStudioServerProAppSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnUserProfileRStudioServerProAppSettingsPropertyValidator(properties).assertSuccess();
  return {
    "AccessStatus": cdk.stringToCloudFormation(properties.accessStatus),
    "UserGroup": cdk.stringToCloudFormation(properties.userGroup)
  };
}

// @ts-ignore TS6133
function CfnUserProfileRStudioServerProAppSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnUserProfile.RStudioServerProAppSettingsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.RStudioServerProAppSettingsProperty>();
  ret.addPropertyResult("accessStatus", "AccessStatus", (properties.AccessStatus != null ? cfn_parse.FromCloudFormation.getString(properties.AccessStatus) : undefined));
  ret.addPropertyResult("userGroup", "UserGroup", (properties.UserGroup != null ? cfn_parse.FromCloudFormation.getString(properties.UserGroup) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `JupyterServerAppSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `JupyterServerAppSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnUserProfileJupyterServerAppSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("defaultResourceSpec", CfnUserProfileResourceSpecPropertyValidator)(properties.defaultResourceSpec));
  return errors.wrap("supplied properties not correct for \"JupyterServerAppSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnUserProfileJupyterServerAppSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnUserProfileJupyterServerAppSettingsPropertyValidator(properties).assertSuccess();
  return {
    "DefaultResourceSpec": convertCfnUserProfileResourceSpecPropertyToCloudFormation(properties.defaultResourceSpec)
  };
}

// @ts-ignore TS6133
function CfnUserProfileJupyterServerAppSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnUserProfile.JupyterServerAppSettingsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.JupyterServerAppSettingsProperty>();
  ret.addPropertyResult("defaultResourceSpec", "DefaultResourceSpec", (properties.DefaultResourceSpec != null ? CfnUserProfileResourceSpecPropertyFromCloudFormation(properties.DefaultResourceSpec) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `SharingSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `SharingSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnUserProfileSharingSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("notebookOutputOption", cdk.validateString)(properties.notebookOutputOption));
  errors.collect(cdk.propertyValidator("s3KmsKeyId", cdk.validateString)(properties.s3KmsKeyId));
  errors.collect(cdk.propertyValidator("s3OutputPath", cdk.validateString)(properties.s3OutputPath));
  return errors.wrap("supplied properties not correct for \"SharingSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnUserProfileSharingSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnUserProfileSharingSettingsPropertyValidator(properties).assertSuccess();
  return {
    "NotebookOutputOption": cdk.stringToCloudFormation(properties.notebookOutputOption),
    "S3KmsKeyId": cdk.stringToCloudFormation(properties.s3KmsKeyId),
    "S3OutputPath": cdk.stringToCloudFormation(properties.s3OutputPath)
  };
}

// @ts-ignore TS6133
function CfnUserProfileSharingSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnUserProfile.SharingSettingsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.SharingSettingsProperty>();
  ret.addPropertyResult("notebookOutputOption", "NotebookOutputOption", (properties.NotebookOutputOption != null ? cfn_parse.FromCloudFormation.getString(properties.NotebookOutputOption) : undefined));
  ret.addPropertyResult("s3KmsKeyId", "S3KmsKeyId", (properties.S3KmsKeyId != null ? cfn_parse.FromCloudFormation.getString(properties.S3KmsKeyId) : undefined));
  ret.addPropertyResult("s3OutputPath", "S3OutputPath", (properties.S3OutputPath != null ? cfn_parse.FromCloudFormation.getString(properties.S3OutputPath) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CodeRepositoryProperty`
 *
 * @param properties - the TypeScript properties of a `CodeRepositoryProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnUserProfileCodeRepositoryPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("repositoryUrl", cdk.requiredValidator)(properties.repositoryUrl));
  errors.collect(cdk.propertyValidator("repositoryUrl", cdk.validateString)(properties.repositoryUrl));
  return errors.wrap("supplied properties not correct for \"CodeRepositoryProperty\"");
}

// @ts-ignore TS6133
function convertCfnUserProfileCodeRepositoryPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnUserProfileCodeRepositoryPropertyValidator(properties).assertSuccess();
  return {
    "RepositoryUrl": cdk.stringToCloudFormation(properties.repositoryUrl)
  };
}

// @ts-ignore TS6133
function CfnUserProfileCodeRepositoryPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProfile.CodeRepositoryProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.CodeRepositoryProperty>();
  ret.addPropertyResult("repositoryUrl", "RepositoryUrl", (properties.RepositoryUrl != null ? cfn_parse.FromCloudFormation.getString(properties.RepositoryUrl) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `JupyterLabAppSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `JupyterLabAppSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnUserProfileJupyterLabAppSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("codeRepositories", cdk.listValidator(CfnUserProfileCodeRepositoryPropertyValidator))(properties.codeRepositories));
  errors.collect(cdk.propertyValidator("customImages", cdk.listValidator(CfnUserProfileCustomImagePropertyValidator))(properties.customImages));
  errors.collect(cdk.propertyValidator("defaultResourceSpec", CfnUserProfileResourceSpecPropertyValidator)(properties.defaultResourceSpec));
  errors.collect(cdk.propertyValidator("lifecycleConfigArns", cdk.listValidator(cdk.validateString))(properties.lifecycleConfigArns));
  return errors.wrap("supplied properties not correct for \"JupyterLabAppSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnUserProfileJupyterLabAppSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnUserProfileJupyterLabAppSettingsPropertyValidator(properties).assertSuccess();
  return {
    "CodeRepositories": cdk.listMapper(convertCfnUserProfileCodeRepositoryPropertyToCloudFormation)(properties.codeRepositories),
    "CustomImages": cdk.listMapper(convertCfnUserProfileCustomImagePropertyToCloudFormation)(properties.customImages),
    "DefaultResourceSpec": convertCfnUserProfileResourceSpecPropertyToCloudFormation(properties.defaultResourceSpec),
    "LifecycleConfigArns": cdk.listMapper(cdk.stringToCloudFormation)(properties.lifecycleConfigArns)
  };
}

// @ts-ignore TS6133
function CfnUserProfileJupyterLabAppSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnUserProfile.JupyterLabAppSettingsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.JupyterLabAppSettingsProperty>();
  ret.addPropertyResult("codeRepositories", "CodeRepositories", (properties.CodeRepositories != null ? cfn_parse.FromCloudFormation.getArray(CfnUserProfileCodeRepositoryPropertyFromCloudFormation)(properties.CodeRepositories) : undefined));
  ret.addPropertyResult("customImages", "CustomImages", (properties.CustomImages != null ? cfn_parse.FromCloudFormation.getArray(CfnUserProfileCustomImagePropertyFromCloudFormation)(properties.CustomImages) : undefined));
  ret.addPropertyResult("defaultResourceSpec", "DefaultResourceSpec", (properties.DefaultResourceSpec != null ? CfnUserProfileResourceSpecPropertyFromCloudFormation(properties.DefaultResourceSpec) : undefined));
  ret.addPropertyResult("lifecycleConfigArns", "LifecycleConfigArns", (properties.LifecycleConfigArns != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.LifecycleConfigArns) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DefaultEbsStorageSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `DefaultEbsStorageSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnUserProfileDefaultEbsStorageSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("defaultEbsVolumeSizeInGb", cdk.requiredValidator)(properties.defaultEbsVolumeSizeInGb));
  errors.collect(cdk.propertyValidator("defaultEbsVolumeSizeInGb", cdk.validateNumber)(properties.defaultEbsVolumeSizeInGb));
  errors.collect(cdk.propertyValidator("maximumEbsVolumeSizeInGb", cdk.requiredValidator)(properties.maximumEbsVolumeSizeInGb));
  errors.collect(cdk.propertyValidator("maximumEbsVolumeSizeInGb", cdk.validateNumber)(properties.maximumEbsVolumeSizeInGb));
  return errors.wrap("supplied properties not correct for \"DefaultEbsStorageSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnUserProfileDefaultEbsStorageSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnUserProfileDefaultEbsStorageSettingsPropertyValidator(properties).assertSuccess();
  return {
    "DefaultEbsVolumeSizeInGb": cdk.numberToCloudFormation(properties.defaultEbsVolumeSizeInGb),
    "MaximumEbsVolumeSizeInGb": cdk.numberToCloudFormation(properties.maximumEbsVolumeSizeInGb)
  };
}

// @ts-ignore TS6133
function CfnUserProfileDefaultEbsStorageSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProfile.DefaultEbsStorageSettingsProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.DefaultEbsStorageSettingsProperty>();
  ret.addPropertyResult("defaultEbsVolumeSizeInGb", "DefaultEbsVolumeSizeInGb", (properties.DefaultEbsVolumeSizeInGb != null ? cfn_parse.FromCloudFormation.getNumber(properties.DefaultEbsVolumeSizeInGb) : undefined));
  ret.addPropertyResult("maximumEbsVolumeSizeInGb", "MaximumEbsVolumeSizeInGb", (properties.MaximumEbsVolumeSizeInGb != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaximumEbsVolumeSizeInGb) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `DefaultSpaceStorageSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `DefaultSpaceStorageSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnUserProfileDefaultSpaceStorageSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("defaultEbsStorageSettings", CfnUserProfileDefaultEbsStorageSettingsPropertyValidator)(properties.defaultEbsStorageSettings));
  return errors.wrap("supplied properties not correct for \"DefaultSpaceStorageSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnUserProfileDefaultSpaceStorageSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnUserProfileDefaultSpaceStorageSettingsPropertyValidator(properties).assertSuccess();
  return {
    "DefaultEbsStorageSettings": convertCfnUserProfileDefaultEbsStorageSettingsPropertyToCloudFormation(properties.defaultEbsStorageSettings)
  };
}

// @ts-ignore TS6133
function CfnUserProfileDefaultSpaceStorageSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProfile.DefaultSpaceStorageSettingsProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.DefaultSpaceStorageSettingsProperty>();
  ret.addPropertyResult("defaultEbsStorageSettings", "DefaultEbsStorageSettings", (properties.DefaultEbsStorageSettings != null ? CfnUserProfileDefaultEbsStorageSettingsPropertyFromCloudFormation(properties.DefaultEbsStorageSettings) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CodeEditorAppSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `CodeEditorAppSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnUserProfileCodeEditorAppSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("defaultResourceSpec", CfnUserProfileResourceSpecPropertyValidator)(properties.defaultResourceSpec));
  errors.collect(cdk.propertyValidator("lifecycleConfigArns", cdk.listValidator(cdk.validateString))(properties.lifecycleConfigArns));
  return errors.wrap("supplied properties not correct for \"CodeEditorAppSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnUserProfileCodeEditorAppSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnUserProfileCodeEditorAppSettingsPropertyValidator(properties).assertSuccess();
  return {
    "DefaultResourceSpec": convertCfnUserProfileResourceSpecPropertyToCloudFormation(properties.defaultResourceSpec),
    "LifecycleConfigArns": cdk.listMapper(cdk.stringToCloudFormation)(properties.lifecycleConfigArns)
  };
}

// @ts-ignore TS6133
function CfnUserProfileCodeEditorAppSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProfile.CodeEditorAppSettingsProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.CodeEditorAppSettingsProperty>();
  ret.addPropertyResult("defaultResourceSpec", "DefaultResourceSpec", (properties.DefaultResourceSpec != null ? CfnUserProfileResourceSpecPropertyFromCloudFormation(properties.DefaultResourceSpec) : undefined));
  ret.addPropertyResult("lifecycleConfigArns", "LifecycleConfigArns", (properties.LifecycleConfigArns != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.LifecycleConfigArns) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CustomPosixUserConfigProperty`
 *
 * @param properties - the TypeScript properties of a `CustomPosixUserConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnUserProfileCustomPosixUserConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("gid", cdk.requiredValidator)(properties.gid));
  errors.collect(cdk.propertyValidator("gid", cdk.validateNumber)(properties.gid));
  errors.collect(cdk.propertyValidator("uid", cdk.requiredValidator)(properties.uid));
  errors.collect(cdk.propertyValidator("uid", cdk.validateNumber)(properties.uid));
  return errors.wrap("supplied properties not correct for \"CustomPosixUserConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnUserProfileCustomPosixUserConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnUserProfileCustomPosixUserConfigPropertyValidator(properties).assertSuccess();
  return {
    "Gid": cdk.numberToCloudFormation(properties.gid),
    "Uid": cdk.numberToCloudFormation(properties.uid)
  };
}

// @ts-ignore TS6133
function CfnUserProfileCustomPosixUserConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProfile.CustomPosixUserConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.CustomPosixUserConfigProperty>();
  ret.addPropertyResult("gid", "Gid", (properties.Gid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Gid) : undefined));
  ret.addPropertyResult("uid", "Uid", (properties.Uid != null ? cfn_parse.FromCloudFormation.getNumber(properties.Uid) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `EFSFileSystemConfigProperty`
 *
 * @param properties - the TypeScript properties of a `EFSFileSystemConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnUserProfileEFSFileSystemConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("fileSystemId", cdk.requiredValidator)(properties.fileSystemId));
  errors.collect(cdk.propertyValidator("fileSystemId", cdk.validateString)(properties.fileSystemId));
  errors.collect(cdk.propertyValidator("fileSystemPath", cdk.validateString)(properties.fileSystemPath));
  return errors.wrap("supplied properties not correct for \"EFSFileSystemConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnUserProfileEFSFileSystemConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnUserProfileEFSFileSystemConfigPropertyValidator(properties).assertSuccess();
  return {
    "FileSystemId": cdk.stringToCloudFormation(properties.fileSystemId),
    "FileSystemPath": cdk.stringToCloudFormation(properties.fileSystemPath)
  };
}

// @ts-ignore TS6133
function CfnUserProfileEFSFileSystemConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProfile.EFSFileSystemConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.EFSFileSystemConfigProperty>();
  ret.addPropertyResult("fileSystemId", "FileSystemId", (properties.FileSystemId != null ? cfn_parse.FromCloudFormation.getString(properties.FileSystemId) : undefined));
  ret.addPropertyResult("fileSystemPath", "FileSystemPath", (properties.FileSystemPath != null ? cfn_parse.FromCloudFormation.getString(properties.FileSystemPath) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CustomFileSystemConfigProperty`
 *
 * @param properties - the TypeScript properties of a `CustomFileSystemConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnUserProfileCustomFileSystemConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("efsFileSystemConfig", CfnUserProfileEFSFileSystemConfigPropertyValidator)(properties.efsFileSystemConfig));
  return errors.wrap("supplied properties not correct for \"CustomFileSystemConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnUserProfileCustomFileSystemConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnUserProfileCustomFileSystemConfigPropertyValidator(properties).assertSuccess();
  return {
    "EFSFileSystemConfig": convertCfnUserProfileEFSFileSystemConfigPropertyToCloudFormation(properties.efsFileSystemConfig)
  };
}

// @ts-ignore TS6133
function CfnUserProfileCustomFileSystemConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProfile.CustomFileSystemConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.CustomFileSystemConfigProperty>();
  ret.addPropertyResult("efsFileSystemConfig", "EFSFileSystemConfig", (properties.EFSFileSystemConfig != null ? CfnUserProfileEFSFileSystemConfigPropertyFromCloudFormation(properties.EFSFileSystemConfig) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `UserSettingsProperty`
 *
 * @param properties - the TypeScript properties of a `UserSettingsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnUserProfileUserSettingsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("codeEditorAppSettings", CfnUserProfileCodeEditorAppSettingsPropertyValidator)(properties.codeEditorAppSettings));
  errors.collect(cdk.propertyValidator("customFileSystemConfigs", cdk.listValidator(CfnUserProfileCustomFileSystemConfigPropertyValidator))(properties.customFileSystemConfigs));
  errors.collect(cdk.propertyValidator("customPosixUserConfig", CfnUserProfileCustomPosixUserConfigPropertyValidator)(properties.customPosixUserConfig));
  errors.collect(cdk.propertyValidator("defaultLandingUri", cdk.validateString)(properties.defaultLandingUri));
  errors.collect(cdk.propertyValidator("executionRole", cdk.validateString)(properties.executionRole));
  errors.collect(cdk.propertyValidator("jupyterLabAppSettings", CfnUserProfileJupyterLabAppSettingsPropertyValidator)(properties.jupyterLabAppSettings));
  errors.collect(cdk.propertyValidator("jupyterServerAppSettings", CfnUserProfileJupyterServerAppSettingsPropertyValidator)(properties.jupyterServerAppSettings));
  errors.collect(cdk.propertyValidator("kernelGatewayAppSettings", CfnUserProfileKernelGatewayAppSettingsPropertyValidator)(properties.kernelGatewayAppSettings));
  errors.collect(cdk.propertyValidator("rStudioServerProAppSettings", CfnUserProfileRStudioServerProAppSettingsPropertyValidator)(properties.rStudioServerProAppSettings));
  errors.collect(cdk.propertyValidator("securityGroups", cdk.listValidator(cdk.validateString))(properties.securityGroups));
  errors.collect(cdk.propertyValidator("sharingSettings", CfnUserProfileSharingSettingsPropertyValidator)(properties.sharingSettings));
  errors.collect(cdk.propertyValidator("spaceStorageSettings", CfnUserProfileDefaultSpaceStorageSettingsPropertyValidator)(properties.spaceStorageSettings));
  errors.collect(cdk.propertyValidator("studioWebPortal", cdk.validateString)(properties.studioWebPortal));
  return errors.wrap("supplied properties not correct for \"UserSettingsProperty\"");
}

// @ts-ignore TS6133
function convertCfnUserProfileUserSettingsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnUserProfileUserSettingsPropertyValidator(properties).assertSuccess();
  return {
    "CodeEditorAppSettings": convertCfnUserProfileCodeEditorAppSettingsPropertyToCloudFormation(properties.codeEditorAppSettings),
    "CustomFileSystemConfigs": cdk.listMapper(convertCfnUserProfileCustomFileSystemConfigPropertyToCloudFormation)(properties.customFileSystemConfigs),
    "CustomPosixUserConfig": convertCfnUserProfileCustomPosixUserConfigPropertyToCloudFormation(properties.customPosixUserConfig),
    "DefaultLandingUri": cdk.stringToCloudFormation(properties.defaultLandingUri),
    "ExecutionRole": cdk.stringToCloudFormation(properties.executionRole),
    "JupyterLabAppSettings": convertCfnUserProfileJupyterLabAppSettingsPropertyToCloudFormation(properties.jupyterLabAppSettings),
    "JupyterServerAppSettings": convertCfnUserProfileJupyterServerAppSettingsPropertyToCloudFormation(properties.jupyterServerAppSettings),
    "KernelGatewayAppSettings": convertCfnUserProfileKernelGatewayAppSettingsPropertyToCloudFormation(properties.kernelGatewayAppSettings),
    "RStudioServerProAppSettings": convertCfnUserProfileRStudioServerProAppSettingsPropertyToCloudFormation(properties.rStudioServerProAppSettings),
    "SecurityGroups": cdk.listMapper(cdk.stringToCloudFormation)(properties.securityGroups),
    "SharingSettings": convertCfnUserProfileSharingSettingsPropertyToCloudFormation(properties.sharingSettings),
    "SpaceStorageSettings": convertCfnUserProfileDefaultSpaceStorageSettingsPropertyToCloudFormation(properties.spaceStorageSettings),
    "StudioWebPortal": cdk.stringToCloudFormation(properties.studioWebPortal)
  };
}

// @ts-ignore TS6133
function CfnUserProfileUserSettingsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnUserProfile.UserSettingsProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfile.UserSettingsProperty>();
  ret.addPropertyResult("codeEditorAppSettings", "CodeEditorAppSettings", (properties.CodeEditorAppSettings != null ? CfnUserProfileCodeEditorAppSettingsPropertyFromCloudFormation(properties.CodeEditorAppSettings) : undefined));
  ret.addPropertyResult("customFileSystemConfigs", "CustomFileSystemConfigs", (properties.CustomFileSystemConfigs != null ? cfn_parse.FromCloudFormation.getArray(CfnUserProfileCustomFileSystemConfigPropertyFromCloudFormation)(properties.CustomFileSystemConfigs) : undefined));
  ret.addPropertyResult("customPosixUserConfig", "CustomPosixUserConfig", (properties.CustomPosixUserConfig != null ? CfnUserProfileCustomPosixUserConfigPropertyFromCloudFormation(properties.CustomPosixUserConfig) : undefined));
  ret.addPropertyResult("defaultLandingUri", "DefaultLandingUri", (properties.DefaultLandingUri != null ? cfn_parse.FromCloudFormation.getString(properties.DefaultLandingUri) : undefined));
  ret.addPropertyResult("executionRole", "ExecutionRole", (properties.ExecutionRole != null ? cfn_parse.FromCloudFormation.getString(properties.ExecutionRole) : undefined));
  ret.addPropertyResult("jupyterLabAppSettings", "JupyterLabAppSettings", (properties.JupyterLabAppSettings != null ? CfnUserProfileJupyterLabAppSettingsPropertyFromCloudFormation(properties.JupyterLabAppSettings) : undefined));
  ret.addPropertyResult("jupyterServerAppSettings", "JupyterServerAppSettings", (properties.JupyterServerAppSettings != null ? CfnUserProfileJupyterServerAppSettingsPropertyFromCloudFormation(properties.JupyterServerAppSettings) : undefined));
  ret.addPropertyResult("kernelGatewayAppSettings", "KernelGatewayAppSettings", (properties.KernelGatewayAppSettings != null ? CfnUserProfileKernelGatewayAppSettingsPropertyFromCloudFormation(properties.KernelGatewayAppSettings) : undefined));
  ret.addPropertyResult("rStudioServerProAppSettings", "RStudioServerProAppSettings", (properties.RStudioServerProAppSettings != null ? CfnUserProfileRStudioServerProAppSettingsPropertyFromCloudFormation(properties.RStudioServerProAppSettings) : undefined));
  ret.addPropertyResult("securityGroups", "SecurityGroups", (properties.SecurityGroups != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.SecurityGroups) : undefined));
  ret.addPropertyResult("sharingSettings", "SharingSettings", (properties.SharingSettings != null ? CfnUserProfileSharingSettingsPropertyFromCloudFormation(properties.SharingSettings) : undefined));
  ret.addPropertyResult("spaceStorageSettings", "SpaceStorageSettings", (properties.SpaceStorageSettings != null ? CfnUserProfileDefaultSpaceStorageSettingsPropertyFromCloudFormation(properties.SpaceStorageSettings) : undefined));
  ret.addPropertyResult("studioWebPortal", "StudioWebPortal", (properties.StudioWebPortal != null ? cfn_parse.FromCloudFormation.getString(properties.StudioWebPortal) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnUserProfileProps`
 *
 * @param properties - the TypeScript properties of a `CfnUserProfileProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnUserProfilePropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("domainId", cdk.requiredValidator)(properties.domainId));
  errors.collect(cdk.propertyValidator("domainId", cdk.validateString)(properties.domainId));
  errors.collect(cdk.propertyValidator("singleSignOnUserIdentifier", cdk.validateString)(properties.singleSignOnUserIdentifier));
  errors.collect(cdk.propertyValidator("singleSignOnUserValue", cdk.validateString)(properties.singleSignOnUserValue));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  errors.collect(cdk.propertyValidator("userProfileName", cdk.requiredValidator)(properties.userProfileName));
  errors.collect(cdk.propertyValidator("userProfileName", cdk.validateString)(properties.userProfileName));
  errors.collect(cdk.propertyValidator("userSettings", CfnUserProfileUserSettingsPropertyValidator)(properties.userSettings));
  return errors.wrap("supplied properties not correct for \"CfnUserProfileProps\"");
}

// @ts-ignore TS6133
function convertCfnUserProfilePropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnUserProfilePropsValidator(properties).assertSuccess();
  return {
    "DomainId": cdk.stringToCloudFormation(properties.domainId),
    "SingleSignOnUserIdentifier": cdk.stringToCloudFormation(properties.singleSignOnUserIdentifier),
    "SingleSignOnUserValue": cdk.stringToCloudFormation(properties.singleSignOnUserValue),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
    "UserProfileName": cdk.stringToCloudFormation(properties.userProfileName),
    "UserSettings": convertCfnUserProfileUserSettingsPropertyToCloudFormation(properties.userSettings)
  };
}

// @ts-ignore TS6133
function CfnUserProfilePropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnUserProfileProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnUserProfileProps>();
  ret.addPropertyResult("domainId", "DomainId", (properties.DomainId != null ? cfn_parse.FromCloudFormation.getString(properties.DomainId) : undefined));
  ret.addPropertyResult("singleSignOnUserIdentifier", "SingleSignOnUserIdentifier", (properties.SingleSignOnUserIdentifier != null ? cfn_parse.FromCloudFormation.getString(properties.SingleSignOnUserIdentifier) : undefined));
  ret.addPropertyResult("singleSignOnUserValue", "SingleSignOnUserValue", (properties.SingleSignOnUserValue != null ? cfn_parse.FromCloudFormation.getString(properties.SingleSignOnUserValue) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addPropertyResult("userProfileName", "UserProfileName", (properties.UserProfileName != null ? cfn_parse.FromCloudFormation.getString(properties.UserProfileName) : undefined));
  ret.addPropertyResult("userSettings", "UserSettings", (properties.UserSettings != null ? CfnUserProfileUserSettingsPropertyFromCloudFormation(properties.UserSettings) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Creates a new work team for labeling your data.
 *
 * A work team is defined by one or more Amazon Cognito user pools. You must first create the user pools before you can create a work team.
 *
 * You cannot create more than 25 work teams in an account and region.
 *
 * @cloudformationResource AWS::SageMaker::Workteam
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-workteam.html
 */
export class CfnWorkteam extends cdk.CfnResource implements cdk.IInspectable, cdk.ITaggable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::Workteam";

  /**
   * Build a CfnWorkteam from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnWorkteam {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnWorkteamPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnWorkteam(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * @cloudformationAttribute Id
   */
  public readonly attrId: string;

  /**
   * The name of the work team.
   *
   * @cloudformationAttribute WorkteamName
   */
  public readonly attrWorkteamName: string;

  /**
   * A description of the work team.
   */
  public description?: string;

  /**
   * A list of `MemberDefinition` objects that contains objects that identify the workers that make up the work team.
   */
  public memberDefinitions?: Array<cdk.IResolvable | CfnWorkteam.MemberDefinitionProperty> | cdk.IResolvable;

  /**
   * Configures SNS notifications of available or expiring work items for work teams.
   */
  public notificationConfiguration?: cdk.IResolvable | CfnWorkteam.NotificationConfigurationProperty;

  /**
   * Tag Manager which manages the tags for this resource
   */
  public readonly tags: cdk.TagManager;

  /**
   * An array of key-value pairs.
   */
  public tagsRaw?: Array<cdk.CfnTag>;

  public workforceName?: string;

  /**
   * The name of the work team.
   */
  public workteamName?: string;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnWorkteamProps = {}) {
    super(scope, id, {
      "type": CfnWorkteam.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    this.attrId = cdk.Token.asString(this.getAtt("Id", cdk.ResolutionTypeHint.STRING));
    this.attrWorkteamName = cdk.Token.asString(this.getAtt("WorkteamName", cdk.ResolutionTypeHint.STRING));
    this.description = props.description;
    this.memberDefinitions = props.memberDefinitions;
    this.notificationConfiguration = props.notificationConfiguration;
    this.tags = new cdk.TagManager(cdk.TagType.STANDARD, "AWS::SageMaker::Workteam", props.tags, {
      "tagPropertyName": "tags"
    });
    this.tagsRaw = props.tags;
    this.workforceName = props.workforceName;
    this.workteamName = props.workteamName;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "description": this.description,
      "memberDefinitions": this.memberDefinitions,
      "notificationConfiguration": this.notificationConfiguration,
      "tags": this.tags.renderTags(),
      "workforceName": this.workforceName,
      "workteamName": this.workteamName
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnWorkteam.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnWorkteamPropsToCloudFormation(props);
  }
}

export namespace CfnWorkteam {
  /**
   * Configures Amazon SNS notifications of available or expiring work items for work teams.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-workteam-notificationconfiguration.html
   */
  export interface NotificationConfigurationProperty {
    /**
     * The ARN for the Amazon SNS topic to which notifications should be published.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-workteam-notificationconfiguration.html#cfn-sagemaker-workteam-notificationconfiguration-notificationtopicarn
     */
    readonly notificationTopicArn: string;
  }

  /**
   * Defines an Amazon Cognito or your own OIDC IdP user group that is part of a work team.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-workteam-memberdefinition.html
   */
  export interface MemberDefinitionProperty {
    /**
     * The Amazon Cognito user group that is part of the work team.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-workteam-memberdefinition.html#cfn-sagemaker-workteam-memberdefinition-cognitomemberdefinition
     */
    readonly cognitoMemberDefinition?: CfnWorkteam.CognitoMemberDefinitionProperty | cdk.IResolvable;

    /**
     * A list user groups that exist in your OIDC Identity Provider (IdP).
     *
     * One to ten groups can be used to create a single private work team. When you add a user group to the list of `Groups` , you can add that user group to one or more private work teams. If you add a user group to a private work team, all workers in that user group are added to the work team.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-workteam-memberdefinition.html#cfn-sagemaker-workteam-memberdefinition-oidcmemberdefinition
     */
    readonly oidcMemberDefinition?: cdk.IResolvable | CfnWorkteam.OidcMemberDefinitionProperty;
  }

  /**
   * A list of user groups that exist in your OIDC Identity Provider (IdP).
   *
   * One to ten groups can be used to create a single private work team. When you add a user group to the list of `Groups` , you can add that user group to one or more private work teams. If you add a user group to a private work team, all workers in that user group are added to the work team.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-workteam-oidcmemberdefinition.html
   */
  export interface OidcMemberDefinitionProperty {
    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-workteam-oidcmemberdefinition.html#cfn-sagemaker-workteam-oidcmemberdefinition-oidcgroups
     */
    readonly oidcGroups: Array<string>;
  }

  /**
   * Identifies a Amazon Cognito user group.
   *
   * A user group can be used in on or more work teams.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-workteam-cognitomemberdefinition.html
   */
  export interface CognitoMemberDefinitionProperty {
    /**
     * An identifier for an application client.
     *
     * You must create the app client ID using Amazon Cognito.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-workteam-cognitomemberdefinition.html#cfn-sagemaker-workteam-cognitomemberdefinition-cognitoclientid
     */
    readonly cognitoClientId: string;

    /**
     * An identifier for a user group.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-workteam-cognitomemberdefinition.html#cfn-sagemaker-workteam-cognitomemberdefinition-cognitousergroup
     */
    readonly cognitoUserGroup: string;

    /**
     * An identifier for a user pool.
     *
     * The user pool must be in the same region as the service that you are calling.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-workteam-cognitomemberdefinition.html#cfn-sagemaker-workteam-cognitomemberdefinition-cognitouserpool
     */
    readonly cognitoUserPool: string;
  }
}

/**
 * Properties for defining a `CfnWorkteam`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-workteam.html
 */
export interface CfnWorkteamProps {
  /**
   * A description of the work team.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-workteam.html#cfn-sagemaker-workteam-description
   */
  readonly description?: string;

  /**
   * A list of `MemberDefinition` objects that contains objects that identify the workers that make up the work team.
   *
   * Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use `CognitoMemberDefinition` . For workforces created using your own OIDC identity provider (IdP) use `OidcMemberDefinition` .
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-workteam.html#cfn-sagemaker-workteam-memberdefinitions
   */
  readonly memberDefinitions?: Array<cdk.IResolvable | CfnWorkteam.MemberDefinitionProperty> | cdk.IResolvable;

  /**
   * Configures SNS notifications of available or expiring work items for work teams.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-workteam.html#cfn-sagemaker-workteam-notificationconfiguration
   */
  readonly notificationConfiguration?: cdk.IResolvable | CfnWorkteam.NotificationConfigurationProperty;

  /**
   * An array of key-value pairs.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-workteam.html#cfn-sagemaker-workteam-tags
   */
  readonly tags?: Array<cdk.CfnTag>;

  /**
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-workteam.html#cfn-sagemaker-workteam-workforcename
   */
  readonly workforceName?: string;

  /**
   * The name of the work team.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-workteam.html#cfn-sagemaker-workteam-workteamname
   */
  readonly workteamName?: string;
}

/**
 * Determine whether the given properties match those of a `NotificationConfigurationProperty`
 *
 * @param properties - the TypeScript properties of a `NotificationConfigurationProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnWorkteamNotificationConfigurationPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("notificationTopicArn", cdk.requiredValidator)(properties.notificationTopicArn));
  errors.collect(cdk.propertyValidator("notificationTopicArn", cdk.validateString)(properties.notificationTopicArn));
  return errors.wrap("supplied properties not correct for \"NotificationConfigurationProperty\"");
}

// @ts-ignore TS6133
function convertCfnWorkteamNotificationConfigurationPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnWorkteamNotificationConfigurationPropertyValidator(properties).assertSuccess();
  return {
    "NotificationTopicArn": cdk.stringToCloudFormation(properties.notificationTopicArn)
  };
}

// @ts-ignore TS6133
function CfnWorkteamNotificationConfigurationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnWorkteam.NotificationConfigurationProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnWorkteam.NotificationConfigurationProperty>();
  ret.addPropertyResult("notificationTopicArn", "NotificationTopicArn", (properties.NotificationTopicArn != null ? cfn_parse.FromCloudFormation.getString(properties.NotificationTopicArn) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `OidcMemberDefinitionProperty`
 *
 * @param properties - the TypeScript properties of a `OidcMemberDefinitionProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnWorkteamOidcMemberDefinitionPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("oidcGroups", cdk.requiredValidator)(properties.oidcGroups));
  errors.collect(cdk.propertyValidator("oidcGroups", cdk.listValidator(cdk.validateString))(properties.oidcGroups));
  return errors.wrap("supplied properties not correct for \"OidcMemberDefinitionProperty\"");
}

// @ts-ignore TS6133
function convertCfnWorkteamOidcMemberDefinitionPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnWorkteamOidcMemberDefinitionPropertyValidator(properties).assertSuccess();
  return {
    "OidcGroups": cdk.listMapper(cdk.stringToCloudFormation)(properties.oidcGroups)
  };
}

// @ts-ignore TS6133
function CfnWorkteamOidcMemberDefinitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnWorkteam.OidcMemberDefinitionProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnWorkteam.OidcMemberDefinitionProperty>();
  ret.addPropertyResult("oidcGroups", "OidcGroups", (properties.OidcGroups != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getString)(properties.OidcGroups) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CognitoMemberDefinitionProperty`
 *
 * @param properties - the TypeScript properties of a `CognitoMemberDefinitionProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnWorkteamCognitoMemberDefinitionPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("cognitoClientId", cdk.requiredValidator)(properties.cognitoClientId));
  errors.collect(cdk.propertyValidator("cognitoClientId", cdk.validateString)(properties.cognitoClientId));
  errors.collect(cdk.propertyValidator("cognitoUserGroup", cdk.requiredValidator)(properties.cognitoUserGroup));
  errors.collect(cdk.propertyValidator("cognitoUserGroup", cdk.validateString)(properties.cognitoUserGroup));
  errors.collect(cdk.propertyValidator("cognitoUserPool", cdk.requiredValidator)(properties.cognitoUserPool));
  errors.collect(cdk.propertyValidator("cognitoUserPool", cdk.validateString)(properties.cognitoUserPool));
  return errors.wrap("supplied properties not correct for \"CognitoMemberDefinitionProperty\"");
}

// @ts-ignore TS6133
function convertCfnWorkteamCognitoMemberDefinitionPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnWorkteamCognitoMemberDefinitionPropertyValidator(properties).assertSuccess();
  return {
    "CognitoClientId": cdk.stringToCloudFormation(properties.cognitoClientId),
    "CognitoUserGroup": cdk.stringToCloudFormation(properties.cognitoUserGroup),
    "CognitoUserPool": cdk.stringToCloudFormation(properties.cognitoUserPool)
  };
}

// @ts-ignore TS6133
function CfnWorkteamCognitoMemberDefinitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnWorkteam.CognitoMemberDefinitionProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnWorkteam.CognitoMemberDefinitionProperty>();
  ret.addPropertyResult("cognitoClientId", "CognitoClientId", (properties.CognitoClientId != null ? cfn_parse.FromCloudFormation.getString(properties.CognitoClientId) : undefined));
  ret.addPropertyResult("cognitoUserGroup", "CognitoUserGroup", (properties.CognitoUserGroup != null ? cfn_parse.FromCloudFormation.getString(properties.CognitoUserGroup) : undefined));
  ret.addPropertyResult("cognitoUserPool", "CognitoUserPool", (properties.CognitoUserPool != null ? cfn_parse.FromCloudFormation.getString(properties.CognitoUserPool) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `MemberDefinitionProperty`
 *
 * @param properties - the TypeScript properties of a `MemberDefinitionProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnWorkteamMemberDefinitionPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("cognitoMemberDefinition", CfnWorkteamCognitoMemberDefinitionPropertyValidator)(properties.cognitoMemberDefinition));
  errors.collect(cdk.propertyValidator("oidcMemberDefinition", CfnWorkteamOidcMemberDefinitionPropertyValidator)(properties.oidcMemberDefinition));
  return errors.wrap("supplied properties not correct for \"MemberDefinitionProperty\"");
}

// @ts-ignore TS6133
function convertCfnWorkteamMemberDefinitionPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnWorkteamMemberDefinitionPropertyValidator(properties).assertSuccess();
  return {
    "CognitoMemberDefinition": convertCfnWorkteamCognitoMemberDefinitionPropertyToCloudFormation(properties.cognitoMemberDefinition),
    "OidcMemberDefinition": convertCfnWorkteamOidcMemberDefinitionPropertyToCloudFormation(properties.oidcMemberDefinition)
  };
}

// @ts-ignore TS6133
function CfnWorkteamMemberDefinitionPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<cdk.IResolvable | CfnWorkteam.MemberDefinitionProperty> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnWorkteam.MemberDefinitionProperty>();
  ret.addPropertyResult("cognitoMemberDefinition", "CognitoMemberDefinition", (properties.CognitoMemberDefinition != null ? CfnWorkteamCognitoMemberDefinitionPropertyFromCloudFormation(properties.CognitoMemberDefinition) : undefined));
  ret.addPropertyResult("oidcMemberDefinition", "OidcMemberDefinition", (properties.OidcMemberDefinition != null ? CfnWorkteamOidcMemberDefinitionPropertyFromCloudFormation(properties.OidcMemberDefinition) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnWorkteamProps`
 *
 * @param properties - the TypeScript properties of a `CfnWorkteamProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnWorkteamPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("description", cdk.validateString)(properties.description));
  errors.collect(cdk.propertyValidator("memberDefinitions", cdk.listValidator(CfnWorkteamMemberDefinitionPropertyValidator))(properties.memberDefinitions));
  errors.collect(cdk.propertyValidator("notificationConfiguration", CfnWorkteamNotificationConfigurationPropertyValidator)(properties.notificationConfiguration));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  errors.collect(cdk.propertyValidator("workforceName", cdk.validateString)(properties.workforceName));
  errors.collect(cdk.propertyValidator("workteamName", cdk.validateString)(properties.workteamName));
  return errors.wrap("supplied properties not correct for \"CfnWorkteamProps\"");
}

// @ts-ignore TS6133
function convertCfnWorkteamPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnWorkteamPropsValidator(properties).assertSuccess();
  return {
    "Description": cdk.stringToCloudFormation(properties.description),
    "MemberDefinitions": cdk.listMapper(convertCfnWorkteamMemberDefinitionPropertyToCloudFormation)(properties.memberDefinitions),
    "NotificationConfiguration": convertCfnWorkteamNotificationConfigurationPropertyToCloudFormation(properties.notificationConfiguration),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
    "WorkforceName": cdk.stringToCloudFormation(properties.workforceName),
    "WorkteamName": cdk.stringToCloudFormation(properties.workteamName)
  };
}

// @ts-ignore TS6133
function CfnWorkteamPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnWorkteamProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnWorkteamProps>();
  ret.addPropertyResult("description", "Description", (properties.Description != null ? cfn_parse.FromCloudFormation.getString(properties.Description) : undefined));
  ret.addPropertyResult("memberDefinitions", "MemberDefinitions", (properties.MemberDefinitions != null ? cfn_parse.FromCloudFormation.getArray(CfnWorkteamMemberDefinitionPropertyFromCloudFormation)(properties.MemberDefinitions) : undefined));
  ret.addPropertyResult("notificationConfiguration", "NotificationConfiguration", (properties.NotificationConfiguration != null ? CfnWorkteamNotificationConfigurationPropertyFromCloudFormation(properties.NotificationConfiguration) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addPropertyResult("workforceName", "WorkforceName", (properties.WorkforceName != null ? cfn_parse.FromCloudFormation.getString(properties.WorkforceName) : undefined));
  ret.addPropertyResult("workteamName", "WorkteamName", (properties.WorkteamName != null ? cfn_parse.FromCloudFormation.getString(properties.WorkteamName) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Creates an inference component, which is a SageMaker hosting object that you can use to deploy a model to an endpoint.
 *
 * In the inference component settings, you specify the model, the endpoint, and how the model utilizes the resources that the endpoint hosts. You can optimize resource utilization by tailoring how the required CPU cores, accelerators, and memory are allocated. You can deploy multiple inference components to an endpoint, where each inference component contains one model and the resource utilization needs for that individual model. After you deploy an inference component, you can directly invoke the associated model when you use the InvokeEndpoint API action.
 *
 * @cloudformationResource AWS::SageMaker::InferenceComponent
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferencecomponent.html
 */
export class CfnInferenceComponent extends cdk.CfnResource implements cdk.IInspectable {
  /**
   * The CloudFormation resource type name for this resource class.
   */
  public static readonly CFN_RESOURCE_TYPE_NAME: string = "AWS::SageMaker::InferenceComponent";

  /**
   * Build a CfnInferenceComponent from CloudFormation properties
   *
   * A factory method that creates a new instance of this class from an object
   * containing the CloudFormation properties of this resource.
   * Used in the @aws-cdk/cloudformation-include module.
   *
   * @internal
   */
  public static _fromCloudFormation(scope: constructs.Construct, id: string, resourceAttributes: any, options: cfn_parse.FromCloudFormationOptions): CfnInferenceComponent {
    resourceAttributes = resourceAttributes || {};
    const resourceProperties = options.parser.parseValue(resourceAttributes.Properties);
    const propsResult = CfnInferenceComponentPropsFromCloudFormation(resourceProperties);
    if (cdk.isResolvableObject(propsResult.value)) {
      throw new Error("Unexpected IResolvable");
    }
    const ret = new CfnInferenceComponent(scope, id, propsResult.value);
    for (const [propKey, propVal] of Object.entries(propsResult.extraProperties)) {
      ret.addPropertyOverride(propKey, propVal);
    }
    options.parser.handleAttributes(ret, resourceAttributes, id);
    return ret;
  }

  /**
   * The time when the inference component was created.
   *
   * @cloudformationAttribute CreationTime
   */
  public readonly attrCreationTime: string;

  /**
   * The failure reason if the inference component is in a failed state
   *
   * @cloudformationAttribute FailureReason
   */
  public readonly attrFailureReason: string;

  /**
   * The Amazon Resource Name (ARN) of the inference component.
   *
   * @cloudformationAttribute InferenceComponentArn
   */
  public readonly attrInferenceComponentArn: string;

  /**
   * The status of the inference component.
   *
   * @cloudformationAttribute InferenceComponentStatus
   */
  public readonly attrInferenceComponentStatus: string;

  /**
   * The time when the inference component was last updated.
   *
   * @cloudformationAttribute LastModifiedTime
   */
  public readonly attrLastModifiedTime: string;

  /**
   * The number of copies for the inference component
   *
   * @cloudformationAttribute RuntimeConfig.CurrentCopyCount
   */
  public readonly attrRuntimeConfigCurrentCopyCount: number;

  /**
   * The number of copies for the inference component
   *
   * @cloudformationAttribute RuntimeConfig.DesiredCopyCount
   */
  public readonly attrRuntimeConfigDesiredCopyCount: number;

  /**
   * @cloudformationAttribute Specification.Container.DeployedImage
   */
  public readonly attrSpecificationContainerDeployedImage: cdk.IResolvable;

  /**
   * The Amazon Resource Name (ARN) of the endpoint that hosts the inference component.
   */
  public endpointArn?: string;

  /**
   * The name of the endpoint that hosts the inference component.
   */
  public endpointName: string;

  /**
   * The name of the inference component.
   */
  public inferenceComponentName?: string;

  /**
   * The runtime config for the inference component.
   */
  public runtimeConfig: CfnInferenceComponent.InferenceComponentRuntimeConfigProperty | cdk.IResolvable;

  /**
   * The specification for the inference component.
   */
  public specification: CfnInferenceComponent.InferenceComponentSpecificationProperty | cdk.IResolvable;

  /**
   * An array of tags to apply to the resource.
   */
  public tags?: Array<cdk.CfnTag>;

  /**
   * The name of the production variant that hosts the inference component.
   */
  public variantName: string;

  /**
   * @param scope Scope in which this resource is defined
   * @param id Construct identifier for this resource (unique in its scope)
   * @param props Resource properties
   */
  public constructor(scope: constructs.Construct, id: string, props: CfnInferenceComponentProps) {
    super(scope, id, {
      "type": CfnInferenceComponent.CFN_RESOURCE_TYPE_NAME,
      "properties": props
    });

    cdk.requireProperty(props, "endpointName", this);
    cdk.requireProperty(props, "runtimeConfig", this);
    cdk.requireProperty(props, "specification", this);
    cdk.requireProperty(props, "variantName", this);

    this.attrCreationTime = cdk.Token.asString(this.getAtt("CreationTime", cdk.ResolutionTypeHint.STRING));
    this.attrFailureReason = cdk.Token.asString(this.getAtt("FailureReason", cdk.ResolutionTypeHint.STRING));
    this.attrInferenceComponentArn = cdk.Token.asString(this.getAtt("InferenceComponentArn", cdk.ResolutionTypeHint.STRING));
    this.attrInferenceComponentStatus = cdk.Token.asString(this.getAtt("InferenceComponentStatus", cdk.ResolutionTypeHint.STRING));
    this.attrLastModifiedTime = cdk.Token.asString(this.getAtt("LastModifiedTime", cdk.ResolutionTypeHint.STRING));
    this.attrRuntimeConfigCurrentCopyCount = cdk.Token.asNumber(this.getAtt("RuntimeConfig.CurrentCopyCount", cdk.ResolutionTypeHint.NUMBER));
    this.attrRuntimeConfigDesiredCopyCount = cdk.Token.asNumber(this.getAtt("RuntimeConfig.DesiredCopyCount", cdk.ResolutionTypeHint.NUMBER));
    this.attrSpecificationContainerDeployedImage = this.getAtt("Specification.Container.DeployedImage");
    this.endpointArn = props.endpointArn;
    this.endpointName = props.endpointName;
    this.inferenceComponentName = props.inferenceComponentName;
    this.runtimeConfig = props.runtimeConfig;
    this.specification = props.specification;
    this.tags = props.tags;
    this.variantName = props.variantName;
  }

  protected get cfnProperties(): Record<string, any> {
    return {
      "endpointArn": this.endpointArn,
      "endpointName": this.endpointName,
      "inferenceComponentName": this.inferenceComponentName,
      "runtimeConfig": this.runtimeConfig,
      "specification": this.specification,
      "tags": this.tags,
      "variantName": this.variantName
    };
  }

  /**
   * Examines the CloudFormation resource and discloses attributes
   *
   * @param inspector tree inspector to collect and process attributes
   */
  public inspect(inspector: cdk.TreeInspector): void {
    inspector.addAttribute("aws:cdk:cloudformation:type", CfnInferenceComponent.CFN_RESOURCE_TYPE_NAME);
    inspector.addAttribute("aws:cdk:cloudformation:props", this.cfnProperties);
  }

  protected renderProperties(props: Record<string, any>): Record<string, any> {
    return convertCfnInferenceComponentPropsToCloudFormation(props);
  }
}

export namespace CfnInferenceComponent {
  /**
   * Details about the resources to deploy with this inference component, including the model, container, and compute resources.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentspecification.html
   */
  export interface InferenceComponentSpecificationProperty {
    /**
     * The compute resources allocated to run the model assigned to the inference component.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentspecification.html#cfn-sagemaker-inferencecomponent-inferencecomponentspecification-computeresourcerequirements
     */
    readonly computeResourceRequirements: CfnInferenceComponent.InferenceComponentComputeResourceRequirementsProperty | cdk.IResolvable;

    /**
     * Defines a container that provides the runtime environment for a model that you deploy with an inference component.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentspecification.html#cfn-sagemaker-inferencecomponent-inferencecomponentspecification-container
     */
    readonly container?: CfnInferenceComponent.InferenceComponentContainerSpecificationProperty | cdk.IResolvable;

    /**
     * The name of an existing SageMaker model object in your account that you want to deploy with the inference component.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentspecification.html#cfn-sagemaker-inferencecomponent-inferencecomponentspecification-modelname
     */
    readonly modelName?: string;

    /**
     * Settings that take effect while the model container starts up.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentspecification.html#cfn-sagemaker-inferencecomponent-inferencecomponentspecification-startupparameters
     */
    readonly startupParameters?: CfnInferenceComponent.InferenceComponentStartupParametersProperty | cdk.IResolvable;
  }

  /**
   * Defines a container that provides the runtime environment for a model that you deploy with an inference component.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentcontainerspecification.html
   */
  export interface InferenceComponentContainerSpecificationProperty {
    /**
     * The Amazon S3 path where the model artifacts, which result from model training, are stored.
     *
     * This path must point to a single gzip compressed tar archive (.tar.gz suffix).
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentcontainerspecification.html#cfn-sagemaker-inferencecomponent-inferencecomponentcontainerspecification-artifacturl
     */
    readonly artifactUrl?: string;

    /**
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentcontainerspecification.html#cfn-sagemaker-inferencecomponent-inferencecomponentcontainerspecification-deployedimage
     */
    readonly deployedImage?: CfnInferenceComponent.DeployedImageProperty | cdk.IResolvable;

    /**
     * The environment variables to set in the Docker container.
     *
     * Each key and value in the Environment string-to-string map can have length of up to 1024. We support up to 16 entries in the map.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentcontainerspecification.html#cfn-sagemaker-inferencecomponent-inferencecomponentcontainerspecification-environment
     */
    readonly environment?: cdk.IResolvable | Record<string, string>;

    /**
     * The Amazon Elastic Container Registry (Amazon ECR) path where the Docker image for the model is stored.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentcontainerspecification.html#cfn-sagemaker-inferencecomponent-inferencecomponentcontainerspecification-image
     */
    readonly image?: string;
  }

  /**
   * Gets the Amazon EC2 Container Registry path of the docker image of the model that is hosted in this [ProductionVariant](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ProductionVariant.html) .
   *
   * If you used the `registry/repository[:tag]` form to specify the image path of the primary container when you created the model hosted in this `ProductionVariant` , the path resolves to a path of the form `registry/repository[@digest]` . A digest is a hash value that identifies a specific version of an image. For information about Amazon ECR paths, see [Pulling an Image](https://docs.aws.amazon.com//AmazonECR/latest/userguide/docker-pull-ecr-image.html) in the *Amazon ECR User Guide* .
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-deployedimage.html
   */
  export interface DeployedImageProperty {
    /**
     * The date and time when the image path for the model resolved to the `ResolvedImage`.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-deployedimage.html#cfn-sagemaker-inferencecomponent-deployedimage-resolutiontime
     */
    readonly resolutionTime?: string;

    /**
     * The specific digest path of the image hosted in this `ProductionVariant` .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-deployedimage.html#cfn-sagemaker-inferencecomponent-deployedimage-resolvedimage
     */
    readonly resolvedImage?: string;

    /**
     * The image path you specified when you created the model.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-deployedimage.html#cfn-sagemaker-inferencecomponent-deployedimage-specifiedimage
     */
    readonly specifiedImage?: string;
  }

  /**
   * Settings that take effect while the model container starts up.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentstartupparameters.html
   */
  export interface InferenceComponentStartupParametersProperty {
    /**
     * The timeout value, in seconds, for your inference container to pass health check by Amazon S3 Hosting.
     *
     * For more information about health check, see [How Your Container Should Respond to Health Check (Ping) Requests](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-inference-code.html#your-algorithms-inference-algo-ping-requests) .
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentstartupparameters.html#cfn-sagemaker-inferencecomponent-inferencecomponentstartupparameters-containerstartuphealthchecktimeoutinseconds
     */
    readonly containerStartupHealthCheckTimeoutInSeconds?: number;

    /**
     * The timeout value, in seconds, to download and extract the model that you want to host from Amazon S3 to the individual inference instance associated with this inference component.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentstartupparameters.html#cfn-sagemaker-inferencecomponent-inferencecomponentstartupparameters-modeldatadownloadtimeoutinseconds
     */
    readonly modelDataDownloadTimeoutInSeconds?: number;
  }

  /**
   * Defines the compute resources to allocate to run a model that you assign to an inference component.
   *
   * These resources include CPU cores, accelerators, and memory.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentcomputeresourcerequirements.html
   */
  export interface InferenceComponentComputeResourceRequirementsProperty {
    /**
     * The maximum MB of memory to allocate to run a model that you assign to an inference component.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentcomputeresourcerequirements.html#cfn-sagemaker-inferencecomponent-inferencecomponentcomputeresourcerequirements-maxmemoryrequiredinmb
     */
    readonly maxMemoryRequiredInMb?: number;

    /**
     * The minimum MB of memory to allocate to run a model that you assign to an inference component.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentcomputeresourcerequirements.html#cfn-sagemaker-inferencecomponent-inferencecomponentcomputeresourcerequirements-minmemoryrequiredinmb
     */
    readonly minMemoryRequiredInMb?: number;

    /**
     * The number of accelerators to allocate to run a model that you assign to an inference component.
     *
     * Accelerators include GPUs and AWS Inferentia.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentcomputeresourcerequirements.html#cfn-sagemaker-inferencecomponent-inferencecomponentcomputeresourcerequirements-numberofacceleratordevicesrequired
     */
    readonly numberOfAcceleratorDevicesRequired?: number;

    /**
     * The number of CPU cores to allocate to run a model that you assign to an inference component.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentcomputeresourcerequirements.html#cfn-sagemaker-inferencecomponent-inferencecomponentcomputeresourcerequirements-numberofcpucoresrequired
     */
    readonly numberOfCpuCoresRequired?: number;
  }

  /**
   * Runtime settings for a model that is deployed with an inference component.
   *
   * @struct
   * @stability external
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentruntimeconfig.html
   */
  export interface InferenceComponentRuntimeConfigProperty {
    /**
     * The number of runtime copies of the model container to deploy with the inference component.
     *
     * Each copy can serve inference requests.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentruntimeconfig.html#cfn-sagemaker-inferencecomponent-inferencecomponentruntimeconfig-copycount
     */
    readonly copyCount?: number;

    /**
     * The number of copies for the inference component.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentruntimeconfig.html#cfn-sagemaker-inferencecomponent-inferencecomponentruntimeconfig-currentcopycount
     */
    readonly currentCopyCount?: number;

    /**
     * The number of copies for the inference component.
     *
     * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferencecomponent-inferencecomponentruntimeconfig.html#cfn-sagemaker-inferencecomponent-inferencecomponentruntimeconfig-desiredcopycount
     */
    readonly desiredCopyCount?: number;
  }
}

/**
 * Properties for defining a `CfnInferenceComponent`
 *
 * @struct
 * @stability external
 * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferencecomponent.html
 */
export interface CfnInferenceComponentProps {
  /**
   * The Amazon Resource Name (ARN) of the endpoint that hosts the inference component.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferencecomponent.html#cfn-sagemaker-inferencecomponent-endpointarn
   */
  readonly endpointArn?: string;

  /**
   * The name of the endpoint that hosts the inference component.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferencecomponent.html#cfn-sagemaker-inferencecomponent-endpointname
   */
  readonly endpointName: string;

  /**
   * The name of the inference component.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferencecomponent.html#cfn-sagemaker-inferencecomponent-inferencecomponentname
   */
  readonly inferenceComponentName?: string;

  /**
   * The runtime config for the inference component.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferencecomponent.html#cfn-sagemaker-inferencecomponent-runtimeconfig
   */
  readonly runtimeConfig: CfnInferenceComponent.InferenceComponentRuntimeConfigProperty | cdk.IResolvable;

  /**
   * The specification for the inference component.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferencecomponent.html#cfn-sagemaker-inferencecomponent-specification
   */
  readonly specification: CfnInferenceComponent.InferenceComponentSpecificationProperty | cdk.IResolvable;

  /**
   * An array of tags to apply to the resource.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferencecomponent.html#cfn-sagemaker-inferencecomponent-tags
   */
  readonly tags?: Array<cdk.CfnTag>;

  /**
   * The name of the production variant that hosts the inference component.
   *
   * @see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferencecomponent.html#cfn-sagemaker-inferencecomponent-variantname
   */
  readonly variantName: string;
}

/**
 * Determine whether the given properties match those of a `DeployedImageProperty`
 *
 * @param properties - the TypeScript properties of a `DeployedImageProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnInferenceComponentDeployedImagePropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("resolutionTime", cdk.validateString)(properties.resolutionTime));
  errors.collect(cdk.propertyValidator("resolvedImage", cdk.validateString)(properties.resolvedImage));
  errors.collect(cdk.propertyValidator("specifiedImage", cdk.validateString)(properties.specifiedImage));
  return errors.wrap("supplied properties not correct for \"DeployedImageProperty\"");
}

// @ts-ignore TS6133
function convertCfnInferenceComponentDeployedImagePropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnInferenceComponentDeployedImagePropertyValidator(properties).assertSuccess();
  return {
    "ResolutionTime": cdk.stringToCloudFormation(properties.resolutionTime),
    "ResolvedImage": cdk.stringToCloudFormation(properties.resolvedImage),
    "SpecifiedImage": cdk.stringToCloudFormation(properties.specifiedImage)
  };
}

// @ts-ignore TS6133
function CfnInferenceComponentDeployedImagePropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInferenceComponent.DeployedImageProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInferenceComponent.DeployedImageProperty>();
  ret.addPropertyResult("resolutionTime", "ResolutionTime", (properties.ResolutionTime != null ? cfn_parse.FromCloudFormation.getString(properties.ResolutionTime) : undefined));
  ret.addPropertyResult("resolvedImage", "ResolvedImage", (properties.ResolvedImage != null ? cfn_parse.FromCloudFormation.getString(properties.ResolvedImage) : undefined));
  ret.addPropertyResult("specifiedImage", "SpecifiedImage", (properties.SpecifiedImage != null ? cfn_parse.FromCloudFormation.getString(properties.SpecifiedImage) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `InferenceComponentContainerSpecificationProperty`
 *
 * @param properties - the TypeScript properties of a `InferenceComponentContainerSpecificationProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnInferenceComponentInferenceComponentContainerSpecificationPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("artifactUrl", cdk.validateString)(properties.artifactUrl));
  errors.collect(cdk.propertyValidator("deployedImage", CfnInferenceComponentDeployedImagePropertyValidator)(properties.deployedImage));
  errors.collect(cdk.propertyValidator("environment", cdk.hashValidator(cdk.validateString))(properties.environment));
  errors.collect(cdk.propertyValidator("image", cdk.validateString)(properties.image));
  return errors.wrap("supplied properties not correct for \"InferenceComponentContainerSpecificationProperty\"");
}

// @ts-ignore TS6133
function convertCfnInferenceComponentInferenceComponentContainerSpecificationPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnInferenceComponentInferenceComponentContainerSpecificationPropertyValidator(properties).assertSuccess();
  return {
    "ArtifactUrl": cdk.stringToCloudFormation(properties.artifactUrl),
    "DeployedImage": convertCfnInferenceComponentDeployedImagePropertyToCloudFormation(properties.deployedImage),
    "Environment": cdk.hashMapper(cdk.stringToCloudFormation)(properties.environment),
    "Image": cdk.stringToCloudFormation(properties.image)
  };
}

// @ts-ignore TS6133
function CfnInferenceComponentInferenceComponentContainerSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInferenceComponent.InferenceComponentContainerSpecificationProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInferenceComponent.InferenceComponentContainerSpecificationProperty>();
  ret.addPropertyResult("artifactUrl", "ArtifactUrl", (properties.ArtifactUrl != null ? cfn_parse.FromCloudFormation.getString(properties.ArtifactUrl) : undefined));
  ret.addPropertyResult("deployedImage", "DeployedImage", (properties.DeployedImage != null ? CfnInferenceComponentDeployedImagePropertyFromCloudFormation(properties.DeployedImage) : undefined));
  ret.addPropertyResult("environment", "Environment", (properties.Environment != null ? cfn_parse.FromCloudFormation.getMap(cfn_parse.FromCloudFormation.getString)(properties.Environment) : undefined));
  ret.addPropertyResult("image", "Image", (properties.Image != null ? cfn_parse.FromCloudFormation.getString(properties.Image) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `InferenceComponentStartupParametersProperty`
 *
 * @param properties - the TypeScript properties of a `InferenceComponentStartupParametersProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnInferenceComponentInferenceComponentStartupParametersPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("containerStartupHealthCheckTimeoutInSeconds", cdk.validateNumber)(properties.containerStartupHealthCheckTimeoutInSeconds));
  errors.collect(cdk.propertyValidator("modelDataDownloadTimeoutInSeconds", cdk.validateNumber)(properties.modelDataDownloadTimeoutInSeconds));
  return errors.wrap("supplied properties not correct for \"InferenceComponentStartupParametersProperty\"");
}

// @ts-ignore TS6133
function convertCfnInferenceComponentInferenceComponentStartupParametersPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnInferenceComponentInferenceComponentStartupParametersPropertyValidator(properties).assertSuccess();
  return {
    "ContainerStartupHealthCheckTimeoutInSeconds": cdk.numberToCloudFormation(properties.containerStartupHealthCheckTimeoutInSeconds),
    "ModelDataDownloadTimeoutInSeconds": cdk.numberToCloudFormation(properties.modelDataDownloadTimeoutInSeconds)
  };
}

// @ts-ignore TS6133
function CfnInferenceComponentInferenceComponentStartupParametersPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInferenceComponent.InferenceComponentStartupParametersProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInferenceComponent.InferenceComponentStartupParametersProperty>();
  ret.addPropertyResult("containerStartupHealthCheckTimeoutInSeconds", "ContainerStartupHealthCheckTimeoutInSeconds", (properties.ContainerStartupHealthCheckTimeoutInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.ContainerStartupHealthCheckTimeoutInSeconds) : undefined));
  ret.addPropertyResult("modelDataDownloadTimeoutInSeconds", "ModelDataDownloadTimeoutInSeconds", (properties.ModelDataDownloadTimeoutInSeconds != null ? cfn_parse.FromCloudFormation.getNumber(properties.ModelDataDownloadTimeoutInSeconds) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `InferenceComponentComputeResourceRequirementsProperty`
 *
 * @param properties - the TypeScript properties of a `InferenceComponentComputeResourceRequirementsProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnInferenceComponentInferenceComponentComputeResourceRequirementsPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("maxMemoryRequiredInMb", cdk.validateNumber)(properties.maxMemoryRequiredInMb));
  errors.collect(cdk.propertyValidator("minMemoryRequiredInMb", cdk.validateNumber)(properties.minMemoryRequiredInMb));
  errors.collect(cdk.propertyValidator("numberOfAcceleratorDevicesRequired", cdk.validateNumber)(properties.numberOfAcceleratorDevicesRequired));
  errors.collect(cdk.propertyValidator("numberOfCpuCoresRequired", cdk.validateNumber)(properties.numberOfCpuCoresRequired));
  return errors.wrap("supplied properties not correct for \"InferenceComponentComputeResourceRequirementsProperty\"");
}

// @ts-ignore TS6133
function convertCfnInferenceComponentInferenceComponentComputeResourceRequirementsPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnInferenceComponentInferenceComponentComputeResourceRequirementsPropertyValidator(properties).assertSuccess();
  return {
    "MaxMemoryRequiredInMb": cdk.numberToCloudFormation(properties.maxMemoryRequiredInMb),
    "MinMemoryRequiredInMb": cdk.numberToCloudFormation(properties.minMemoryRequiredInMb),
    "NumberOfAcceleratorDevicesRequired": cdk.numberToCloudFormation(properties.numberOfAcceleratorDevicesRequired),
    "NumberOfCpuCoresRequired": cdk.numberToCloudFormation(properties.numberOfCpuCoresRequired)
  };
}

// @ts-ignore TS6133
function CfnInferenceComponentInferenceComponentComputeResourceRequirementsPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInferenceComponent.InferenceComponentComputeResourceRequirementsProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInferenceComponent.InferenceComponentComputeResourceRequirementsProperty>();
  ret.addPropertyResult("maxMemoryRequiredInMb", "MaxMemoryRequiredInMb", (properties.MaxMemoryRequiredInMb != null ? cfn_parse.FromCloudFormation.getNumber(properties.MaxMemoryRequiredInMb) : undefined));
  ret.addPropertyResult("minMemoryRequiredInMb", "MinMemoryRequiredInMb", (properties.MinMemoryRequiredInMb != null ? cfn_parse.FromCloudFormation.getNumber(properties.MinMemoryRequiredInMb) : undefined));
  ret.addPropertyResult("numberOfAcceleratorDevicesRequired", "NumberOfAcceleratorDevicesRequired", (properties.NumberOfAcceleratorDevicesRequired != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumberOfAcceleratorDevicesRequired) : undefined));
  ret.addPropertyResult("numberOfCpuCoresRequired", "NumberOfCpuCoresRequired", (properties.NumberOfCpuCoresRequired != null ? cfn_parse.FromCloudFormation.getNumber(properties.NumberOfCpuCoresRequired) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `InferenceComponentSpecificationProperty`
 *
 * @param properties - the TypeScript properties of a `InferenceComponentSpecificationProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnInferenceComponentInferenceComponentSpecificationPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("computeResourceRequirements", cdk.requiredValidator)(properties.computeResourceRequirements));
  errors.collect(cdk.propertyValidator("computeResourceRequirements", CfnInferenceComponentInferenceComponentComputeResourceRequirementsPropertyValidator)(properties.computeResourceRequirements));
  errors.collect(cdk.propertyValidator("container", CfnInferenceComponentInferenceComponentContainerSpecificationPropertyValidator)(properties.container));
  errors.collect(cdk.propertyValidator("modelName", cdk.validateString)(properties.modelName));
  errors.collect(cdk.propertyValidator("startupParameters", CfnInferenceComponentInferenceComponentStartupParametersPropertyValidator)(properties.startupParameters));
  return errors.wrap("supplied properties not correct for \"InferenceComponentSpecificationProperty\"");
}

// @ts-ignore TS6133
function convertCfnInferenceComponentInferenceComponentSpecificationPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnInferenceComponentInferenceComponentSpecificationPropertyValidator(properties).assertSuccess();
  return {
    "ComputeResourceRequirements": convertCfnInferenceComponentInferenceComponentComputeResourceRequirementsPropertyToCloudFormation(properties.computeResourceRequirements),
    "Container": convertCfnInferenceComponentInferenceComponentContainerSpecificationPropertyToCloudFormation(properties.container),
    "ModelName": cdk.stringToCloudFormation(properties.modelName),
    "StartupParameters": convertCfnInferenceComponentInferenceComponentStartupParametersPropertyToCloudFormation(properties.startupParameters)
  };
}

// @ts-ignore TS6133
function CfnInferenceComponentInferenceComponentSpecificationPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInferenceComponent.InferenceComponentSpecificationProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInferenceComponent.InferenceComponentSpecificationProperty>();
  ret.addPropertyResult("computeResourceRequirements", "ComputeResourceRequirements", (properties.ComputeResourceRequirements != null ? CfnInferenceComponentInferenceComponentComputeResourceRequirementsPropertyFromCloudFormation(properties.ComputeResourceRequirements) : undefined));
  ret.addPropertyResult("container", "Container", (properties.Container != null ? CfnInferenceComponentInferenceComponentContainerSpecificationPropertyFromCloudFormation(properties.Container) : undefined));
  ret.addPropertyResult("modelName", "ModelName", (properties.ModelName != null ? cfn_parse.FromCloudFormation.getString(properties.ModelName) : undefined));
  ret.addPropertyResult("startupParameters", "StartupParameters", (properties.StartupParameters != null ? CfnInferenceComponentInferenceComponentStartupParametersPropertyFromCloudFormation(properties.StartupParameters) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `InferenceComponentRuntimeConfigProperty`
 *
 * @param properties - the TypeScript properties of a `InferenceComponentRuntimeConfigProperty`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnInferenceComponentInferenceComponentRuntimeConfigPropertyValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("copyCount", cdk.validateNumber)(properties.copyCount));
  errors.collect(cdk.propertyValidator("currentCopyCount", cdk.validateNumber)(properties.currentCopyCount));
  errors.collect(cdk.propertyValidator("desiredCopyCount", cdk.validateNumber)(properties.desiredCopyCount));
  return errors.wrap("supplied properties not correct for \"InferenceComponentRuntimeConfigProperty\"");
}

// @ts-ignore TS6133
function convertCfnInferenceComponentInferenceComponentRuntimeConfigPropertyToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnInferenceComponentInferenceComponentRuntimeConfigPropertyValidator(properties).assertSuccess();
  return {
    "CopyCount": cdk.numberToCloudFormation(properties.copyCount),
    "CurrentCopyCount": cdk.numberToCloudFormation(properties.currentCopyCount),
    "DesiredCopyCount": cdk.numberToCloudFormation(properties.desiredCopyCount)
  };
}

// @ts-ignore TS6133
function CfnInferenceComponentInferenceComponentRuntimeConfigPropertyFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInferenceComponent.InferenceComponentRuntimeConfigProperty | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInferenceComponent.InferenceComponentRuntimeConfigProperty>();
  ret.addPropertyResult("copyCount", "CopyCount", (properties.CopyCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.CopyCount) : undefined));
  ret.addPropertyResult("currentCopyCount", "CurrentCopyCount", (properties.CurrentCopyCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.CurrentCopyCount) : undefined));
  ret.addPropertyResult("desiredCopyCount", "DesiredCopyCount", (properties.DesiredCopyCount != null ? cfn_parse.FromCloudFormation.getNumber(properties.DesiredCopyCount) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}

/**
 * Determine whether the given properties match those of a `CfnInferenceComponentProps`
 *
 * @param properties - the TypeScript properties of a `CfnInferenceComponentProps`
 *
 * @returns the result of the validation.
 */
// @ts-ignore TS6133
function CfnInferenceComponentPropsValidator(properties: any): cdk.ValidationResult {
  if (!cdk.canInspect(properties)) return cdk.VALIDATION_SUCCESS;
  const errors = new cdk.ValidationResults();
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    errors.collect(new cdk.ValidationResult("Expected an object, but received: " + JSON.stringify(properties)));
  }
  errors.collect(cdk.propertyValidator("endpointArn", cdk.validateString)(properties.endpointArn));
  errors.collect(cdk.propertyValidator("endpointName", cdk.requiredValidator)(properties.endpointName));
  errors.collect(cdk.propertyValidator("endpointName", cdk.validateString)(properties.endpointName));
  errors.collect(cdk.propertyValidator("inferenceComponentName", cdk.validateString)(properties.inferenceComponentName));
  errors.collect(cdk.propertyValidator("runtimeConfig", cdk.requiredValidator)(properties.runtimeConfig));
  errors.collect(cdk.propertyValidator("runtimeConfig", CfnInferenceComponentInferenceComponentRuntimeConfigPropertyValidator)(properties.runtimeConfig));
  errors.collect(cdk.propertyValidator("specification", cdk.requiredValidator)(properties.specification));
  errors.collect(cdk.propertyValidator("specification", CfnInferenceComponentInferenceComponentSpecificationPropertyValidator)(properties.specification));
  errors.collect(cdk.propertyValidator("tags", cdk.listValidator(cdk.validateCfnTag))(properties.tags));
  errors.collect(cdk.propertyValidator("variantName", cdk.requiredValidator)(properties.variantName));
  errors.collect(cdk.propertyValidator("variantName", cdk.validateString)(properties.variantName));
  return errors.wrap("supplied properties not correct for \"CfnInferenceComponentProps\"");
}

// @ts-ignore TS6133
function convertCfnInferenceComponentPropsToCloudFormation(properties: any): any {
  if (!cdk.canInspect(properties)) return properties;
  CfnInferenceComponentPropsValidator(properties).assertSuccess();
  return {
    "EndpointArn": cdk.stringToCloudFormation(properties.endpointArn),
    "EndpointName": cdk.stringToCloudFormation(properties.endpointName),
    "InferenceComponentName": cdk.stringToCloudFormation(properties.inferenceComponentName),
    "RuntimeConfig": convertCfnInferenceComponentInferenceComponentRuntimeConfigPropertyToCloudFormation(properties.runtimeConfig),
    "Specification": convertCfnInferenceComponentInferenceComponentSpecificationPropertyToCloudFormation(properties.specification),
    "Tags": cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),
    "VariantName": cdk.stringToCloudFormation(properties.variantName)
  };
}

// @ts-ignore TS6133
function CfnInferenceComponentPropsFromCloudFormation(properties: any): cfn_parse.FromCloudFormationResult<CfnInferenceComponentProps | cdk.IResolvable> {
  if (cdk.isResolvableObject(properties)) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  properties = ((properties == null) ? {} : properties);
  if (!(properties && typeof properties == 'object' && !Array.isArray(properties))) {
    return new cfn_parse.FromCloudFormationResult(properties);
  }
  const ret = new cfn_parse.FromCloudFormationPropertyObject<CfnInferenceComponentProps>();
  ret.addPropertyResult("endpointArn", "EndpointArn", (properties.EndpointArn != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointArn) : undefined));
  ret.addPropertyResult("endpointName", "EndpointName", (properties.EndpointName != null ? cfn_parse.FromCloudFormation.getString(properties.EndpointName) : undefined));
  ret.addPropertyResult("inferenceComponentName", "InferenceComponentName", (properties.InferenceComponentName != null ? cfn_parse.FromCloudFormation.getString(properties.InferenceComponentName) : undefined));
  ret.addPropertyResult("runtimeConfig", "RuntimeConfig", (properties.RuntimeConfig != null ? CfnInferenceComponentInferenceComponentRuntimeConfigPropertyFromCloudFormation(properties.RuntimeConfig) : undefined));
  ret.addPropertyResult("specification", "Specification", (properties.Specification != null ? CfnInferenceComponentInferenceComponentSpecificationPropertyFromCloudFormation(properties.Specification) : undefined));
  ret.addPropertyResult("tags", "Tags", (properties.Tags != null ? cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags) : undefined));
  ret.addPropertyResult("variantName", "VariantName", (properties.VariantName != null ? cfn_parse.FromCloudFormation.getString(properties.VariantName) : undefined));
  ret.addUnrecognizedPropertiesAsExtra(properties);
  return ret;
}